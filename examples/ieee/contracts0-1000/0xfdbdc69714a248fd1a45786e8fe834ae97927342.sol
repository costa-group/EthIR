{"cope.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./ERC20Contract.sol\u0027;\r\nimport \u0027./Owned.sol\u0027;\r\n\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"COPE\";\r\n    string public  name = \"COPE\";\r\n    uint256 public decimals = 18;\r\n    uint256 private maxCapSupply = 1e5 * 10**(decimals); // 100,000\r\n    uint256 _totalSupply = 1000 * 10 ** (decimals); // 1.000 \r\n    address incubator;\r\n    \r\n    mapping(address =\u003e uint256) balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) allowed;\r\n    \r\n    constructor() public {\r\n        balances[owner] = balances[owner].add(_totalSupply);\r\n        emit Transfer(address(0),owner, _totalSupply);\r\n    }\r\n    \r\n    function SetIncubator(address _address) external onlyOwner{\r\n        require(_address != address(0), \"Invalid address\");\r\n        incubator = _address;\r\n    }\r\n    \r\n    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\r\n        require(msg.sender == incubator);\r\n        require(_beneficiary != address(0), \"Invalid address\");\r\n        require(_totalSupply.add(_amount) \u003c= maxCapSupply, \"exceeds max cap supply 10 million\");\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        \r\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\r\n        \r\n        emit Transfer(address(0),_beneficiary, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function BurnTokens(uint256 _amount) external {\r\n        _burn(_amount, msg.sender);\r\n    }\r\n\r\n    function _burn(uint256 _amount, address _account) internal {\r\n        require(balances[_account] \u003e= _amount, \"insufficient account balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        balances[_account] = balances[_account].sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n    \r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply; \r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address to, uint256 tokens) public override returns  (bool success) {\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] \u003e= tokens );\r\n        require(balances[to].add(tokens) \u003e= balances[to]);\r\n            \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens \u003c= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] \u003e= tokens);\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}"},"ERC20Contract.sol":{"content":"// // SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}"},"Owned.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}"}}