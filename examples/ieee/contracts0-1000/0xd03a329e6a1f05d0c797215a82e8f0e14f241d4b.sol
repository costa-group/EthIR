{"interfaces.sol":{"content":"pragma solidity ^0.6.12;\n\ninterface DaiErc20 {\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address,address,uint256) external returns (bool);\n    function approve(address,uint256) external returns (bool);\n    function balanceOf(address) external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n}\n"},"mathlib.sol":{"content":"pragma solidity ^0.6.12;\n\nlibrary mathlib\n{\n     \n     // --- Math functions as implemented in DAI ERC20 Token---\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) \u003e= x);\n    }\n    \n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) \u003c= x);\n    }\n    \n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    \n}\n"},"owned.sol":{"content":"pragma solidity ^0.6.12;\n\ncontract owned\n{\n     /*\n        \t1) Allows the manager to pause the main Factory contract, set a new manager or change the Escrow fee\n        \t2) Only the Factory contract is owned, not the escrows that are created.\n\t    \t3) The manager has no control over the outcome of the escrows that are created.\n    */\n\n    address public manager;\n    \n    constructor() public \n\t{\n\t    manager = msg.sender;\n\t}\n\n    modifier onlyManager()\n    {\n        require(msg.sender == manager);\n        _;\n    }\n    \n    function setManager(address newmanager) external onlyManager\n    {\n        /*\n            Allows the current manager to set a new manager\n        */\n        \n        require(newmanager.balance \u003e 0);\n        manager = newmanager;\n    }\n    \n}\n\n\n\n\n\n"},"stableescrow.sol":{"content":"pragma solidity ^0.6.12;\n\nimport \"./owned.sol\";\nimport \"./mathlib.sol\";\nimport \"./interfaces.sol\";\n\nenum escrowstatus {CANCELLED, ACTIVATED, SETTLED}\n\ncontract EscrowFactory is owned\n{\n    /*\n            1) The Escrow Factory contract to create and manage Escrows\n\t        2) Only the Escrow Factory is owned by the manager\n\t        3) The manager has no control over each Escrow or the cumulative payment locked in the Factory contract\n    */\n    \n    address constant private dai_ = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    DaiErc20 constant private daiToken = DaiErc20(dai_);\n\n    //Escrow Fee in wad payed to the manager to create a Escrow\n    uint public escrowfee;\n    \n    //Switch that controls whether the factory is active\n    bool public factorycontractactive;\n    \n    uint private escrowid;\n    \n    uint constant private maxuint = 2**256-1;\n    \n    struct Escrow \n    {\n        address escrowpayer;\n        address escrowpayee;\n        uint escrowamount;\n        uint escrowsettlementamount;\n        escrowstatus estatus;\n        address escrowmoderator;\n        uint escrowmoderatorfee;\n    }\n    \n    mapping (bytes32 =\u003e Escrow) public Escrows;\n    \n    \n    /** Events **/\n\n    //Event for new Escrow Contract\n    event NewEscrowEvent(bytes32 esid, address indexed escrowpayer, address indexed escrowpayee, uint escrowamount, uint eventtime);\n    \n    //Event overload with moderator\n    event NewEscrowEvent(bytes32 esid, address indexed escrowpayer, address indexed escrowpayee, uint escrowamount, address indexed escrowmoderator, \n    uint escrowmoderatorfee,  uint eventtime);\n    \n    //The Escrowid is indexed\n    event NewEscrowEventById(bytes32 indexed esid, address escrowpayer, address escrowpayee, uint escrowamount, uint eventtime);\n    \n    //The Escrowid is indexed overload for moderator\n    event NewEscrowEventById(bytes32 indexed esid, address escrowpayer, address escrowpayee,  uint escrowamount, address escrowmoderator, \n    uint escrowmoderatorfee, uint eventtime);\n    \n    //Escrow Status Change Event\n    event EscrowStatusEvent(bytes32 indexed esid, escrowstatus estatus, uint escrowsettlementamount, uint eventtime);\n    \n    constructor() public \n\t{\n\t\tescrowid = 0;\n\t    escrowfee = 1000000000000000000; //1 DAI\n\t\tfactorycontractactive = true;\n\t}\n\n\n    function setEscrowFee(uint newfee) external onlyManager\n    {\n        /*\n            \t1) Changes the Escrow fee that is paid to the manager\n            \t2) The Escrow fee at launch of contract is set to 1 DAI\n\t            3) The escrowfee is a public variable and can always queried\t\n        */\n        \n        require(newfee \u003e 0);\n        \n        escrowfee = newfee;\n    }\n    \n\n    function setFactoryContractSwitch() external onlyManager\n    {\n        /*\n            \t1) Switch that controls whether the contract is active\n\t            2) If the contract is paused new Escrows can not be created, but existing Escrows can still be Settled.\n        */\n        \n        factorycontractactive = factorycontractactive == true ? false : true;\n    }\n    \n  \n    //create new escrow\n    function createNewEscrow(address escrowpayee, uint escrowamount) external \n    {\n        \n        require(factorycontractactive, \"Factory Contract should be Active\");\n        require(escrowid \u003c maxuint, \"Maximum escrowid reached\");\n        require(msg.sender != escrowpayee,\"The Payer, payee should be different\");\n        require(escrowpayee != address(0),\"The Escrow Payee can not be address(0)\");\n        require(escrowamount \u003e 0,\"Escrow amount has to be greater than 0\");\n        \n        require(daiToken.allowance(msg.sender,address(this)) \u003e= mathlib.add(escrowamount, escrowfee), \"daiToken allowance exceeded\");\n        \n        bytes32 esid = keccak256(abi.encodePacked(escrowid));\n        \n        Escrows[esid] = Escrow({escrowpayer:msg.sender, escrowpayee:escrowpayee, escrowamount:escrowamount,\n            escrowsettlementamount:escrowamount, estatus:escrowstatus.ACTIVATED,escrowmoderator:address(0),escrowmoderatorfee:0});\n        \n        escrowid = mathlib.add(escrowid,1);\n        \n        //The Esrow Amount gets transferred to factory contract\n        daiToken.transferFrom(msg.sender, address(this), escrowamount);\n        \n        //Transfer the escrow fee to factory manager\n        daiToken.transferFrom(msg.sender, manager, escrowfee);\n        \n        emit NewEscrowEvent(esid, msg.sender, escrowpayee, escrowamount, now);\n        \n        emit NewEscrowEventById(esid, msg.sender, escrowpayee, escrowamount, now);\n        \n    }\n    \n     //create new escrow overload\n    function createNewEscrow(address escrowpayee, uint escrowamount, address escrowmoderator, uint escrowmoderatorfee) external \n    {\n        \n        require(factorycontractactive, \"Factory Contract should be Active\");\n        require(escrowid \u003c maxuint, \"Maximum escrowid reached\");\n        require(msg.sender != escrowpayee \u0026\u0026 msg.sender != escrowmoderator \u0026\u0026 escrowpayee != escrowmoderator,\"The Payer, payee \u0026 moderator should be different\");\n        require(escrowpayee != address(0) \u0026\u0026 escrowmoderator!=address(0),\"Escrow Payee or moderator can not be address(0)\");\n        require(escrowamount \u003e 0,\"Escrow amount has to be greater than 0\");\n    \n        uint dailockedinnewescrow = mathlib.add(escrowamount,escrowmoderatorfee);\n  \n        require(daiToken.allowance(msg.sender,address(this)) \u003e= mathlib.add(dailockedinnewescrow, escrowfee), \"daiToken allowance exceeded\");\n        \n        bytes32 esid = keccak256(abi.encodePacked(escrowid));\n        \n        Escrows[esid] = Escrows[esid] = Escrow({escrowpayer:msg.sender, escrowpayee:escrowpayee, escrowamount:escrowamount,\n            escrowsettlementamount:escrowamount, estatus:escrowstatus.ACTIVATED,escrowmoderator:escrowmoderator,escrowmoderatorfee:escrowmoderatorfee});\n        \n        escrowid = mathlib.add(escrowid,1);\n        \n        //The Esrow Amount and Moderator fee gets transferred to factory contract\n        daiToken.transferFrom(msg.sender, address(this), dailockedinnewescrow);\n        \n        //Transfer the escrow fee to factory manager\n        daiToken.transferFrom(msg.sender, manager, escrowfee);\n        \n        emit NewEscrowEvent(esid, msg.sender, escrowpayee, escrowamount, escrowmoderator, escrowmoderatorfee ,now);\n        \n        emit NewEscrowEventById(esid, msg.sender, escrowpayee, escrowamount, escrowmoderator, escrowmoderatorfee, now);\n        \n    }\n    \n    modifier onlyPayerOrModerator(bytes32 esid)\n    {\n        require(msg.sender == Escrows[esid].escrowpayer || msg.sender == Escrows[esid].escrowmoderator, \"Only Payer or Moderator\");\n        _;\n    }\n    \n    modifier onlyPayeeOrModerator(bytes32 esid)\n    {\n        require(msg.sender == Escrows[esid].escrowpayee || msg.sender == Escrows[esid].escrowmoderator, \"Only Payee or Moderator\");\n        _;\n    }\n    \n    function getEscrowDetails(bytes32 esid) external view returns (escrowstatus, uint)\n    {\n        /*\n            Gets the changing variables of a escrow based on escrowid\n        */\n        \n        Escrow memory thisescrow = Escrows[esid];\n        \n        require(thisescrow.escrowpayee !=address(0),\"Escrow does not exist\");\n        \n        return(thisescrow.estatus, thisescrow.escrowsettlementamount);\n    }\n    \n \n     function setEscrowSettlementAmount(bytes32 esid, uint esettlementamount) external onlyPayeeOrModerator(esid)\n    {\n        /*\n            Only the escrow Payee or Moderator can change the escrow settlement amount to less than or equal to the original escrowamount\n        */\n        \n        Escrow storage thisescrow = Escrows[esid];\n        \n        require(thisescrow.estatus == escrowstatus.ACTIVATED,\"Escrow should be Activated\");\n        require(esettlementamount \u003e 0 \u0026\u0026 esettlementamount \u003c= thisescrow.escrowamount ,\"escrow settlementamount is incorrect\");\n        \n        thisescrow.escrowsettlementamount = esettlementamount;\n        \n        emit EscrowStatusEvent(esid, thisescrow.estatus, thisescrow.escrowsettlementamount,now);\n    }\n    \n     function releaseFundsToPayee(bytes32 esid) external onlyPayerOrModerator(esid)\n    {\n        /*\n            1) The payee gets paid the escrow settlement amount\n            2) The moderator gets paid the moderation fee if exists\n            3) Any remaining amount is transferred to the Payer\n        */\n        \n        Escrow storage thisescrow = Escrows[esid];\n        \n        require(thisescrow.estatus == escrowstatus.ACTIVATED, \"Escrow Should be activated\");\n        \n        require(thisescrow.escrowsettlementamount \u003e 0, \"Escrow Settlement amount is 0\");\n    \n        uint payeramt = thisescrow.escrowamount \u003e thisescrow.escrowsettlementamount ? mathlib.sub(thisescrow.escrowamount,thisescrow.escrowsettlementamount) : 0;\n        \n        uint settlementamount = thisescrow.escrowsettlementamount;\n        thisescrow.escrowsettlementamount = 0;\n        thisescrow.estatus = escrowstatus.SETTLED;\n        \n        //Payee gets paid\n        daiToken.transfer(thisescrow.escrowpayee,settlementamount);\n        \n        //Moderator gets paid if exists\n        if (thisescrow.escrowmoderatorfee \u003e 0)\n        {\n            daiToken.transfer(thisescrow.escrowmoderator,thisescrow.escrowmoderatorfee);\n        }\n        \n        //Payer gets paid any remaining balance\n        if (payeramt \u003e 0)\n        {\n            daiToken.transfer(thisescrow.escrowpayer,payeramt);\n        }\n        \n        emit EscrowStatusEvent(esid, thisescrow.estatus, thisescrow.escrowsettlementamount,now);\n    \n    }\n    \n    function cancelEscrow(bytes32 esid) external onlyPayeeOrModerator(esid)\n    {\n        /*\n             1) The payer gets refunded the full escrow amount\n             2) The moderator gets paid the moderation fee if exists\n        */\n        \n        Escrow storage thisescrow = Escrows[esid];\n        \n        require(thisescrow.estatus == escrowstatus.ACTIVATED, \"Escrow Should be activated\");\n        \n        require(thisescrow.escrowamount == thisescrow.escrowsettlementamount,\"Escrow amount and Escrow settlement amount should be equal\");\n        \n        uint settlementamount = thisescrow.escrowsettlementamount;\n        thisescrow.escrowsettlementamount = 0;\n        thisescrow.estatus = escrowstatus.CANCELLED;\n        \n        //Moderator gets paid if exists\n        if (thisescrow.escrowmoderatorfee \u003e 0)\n        {\n            daiToken.transfer(thisescrow.escrowmoderator,thisescrow.escrowmoderatorfee);\n        }\n        \n        //Payer gets full refund\n        daiToken.transfer(thisescrow.escrowpayer,settlementamount);\n        \n        emit EscrowStatusEvent(esid, thisescrow.estatus, thisescrow.escrowsettlementamount,now);\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}}