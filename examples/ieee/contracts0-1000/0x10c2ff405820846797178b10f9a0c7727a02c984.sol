{"DydxFlashloanBase.sol":{"content":"pragma solidity ^0.5.7;\npragma experimental ABIEncoderV2;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\n\nimport \"./ISoloMargin.sol\";\n\n\ncontract DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i \u003c numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n"},"ICallee.sol":{"content":"pragma solidity ^0.5.7;\npragma experimental ABIEncoderV2;\n\nimport { Account } from \"./ISoloMargin.sol\";\n\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ncontract ICallee {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    )\n        public;\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"ISoloMargin.sol":{"content":"pragma solidity ^0.5.7;\npragma experimental ABIEncoderV2;\n\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 =\u003e Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n    struct Value {\n        uint256 value;\n    }\n}\n\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower\u0027s interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId =\u003e Market\n        mapping(uint256 =\u003e Market) markets;\n        // owner =\u003e account number =\u003e Account\n        mapping(address =\u003e mapping(uint256 =\u003e Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address =\u003e mapping(address =\u003e bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address =\u003e bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\n\ncontract ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    ) public;\n\n    function getIsGlobalOperator(address operator) public view returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId)\n        public\n        view\n        returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n        public;\n\n    function getAccountValues(Account.Info memory account)\n        public\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId)\n        public\n        view\n        returns (address);\n\n    function getMarketInterestSetter(uint256 marketId)\n        public\n        view\n        returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId)\n        public\n        view\n        returns (Decimal.D256 memory);\n\n    function getNumMarkets() public view returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n        public\n        returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n        public;\n\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public;\n\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public;\n\n    function getIsLocalOperator(address owner, address operator)\n        public\n        view\n        returns (bool);\n\n    function getAccountPar(Account.Info memory account, uint256 marketId)\n        public\n        view\n        returns (Types.Par memory);\n\n    function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    ) public;\n\n    function getMarginRatio() public view returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId)\n        public\n        view\n        returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId) public view returns (bool);\n\n    function getRiskParams() public view returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info memory account)\n        public\n        view\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n\n    function renounceOwnership() public;\n\n    function getMinBorrowedValue() public view returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] memory args) public;\n\n    function getMarketPrice(uint256 marketId) public view returns (address);\n\n    function owner() public view returns (address);\n\n    function isOwner() public view returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n        public\n        returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    ) public;\n\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) public;\n\n    function getMarketWithInfo(uint256 marketId)\n        public\n        view\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public;\n\n    function getLiquidationSpread() public view returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info memory account, uint256 marketId)\n        public\n        view\n        returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId)\n        public\n        view\n        returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    ) public view returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId)\n        public\n        view\n        returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId)\n        public\n        view\n        returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info memory account)\n        public\n        view\n        returns (uint8);\n\n    function getEarningsRate() public view returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public;\n\n    function getRiskLimits() public view returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId)\n        public\n        view\n        returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public;\n\n    function ownerSetGlobalOperator(address operator, bool approved) public;\n\n    function transferOwnership(address newOwner) public;\n\n    function getAdjustedAccountValues(Account.Info memory account)\n        public\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId)\n        public\n        view\n        returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId)\n        public\n        view\n        returns (Interest.Rate memory);\n}\n"},"IUniswapV2Router01.sol":{"content":"pragma solidity ^0.5.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"},"IUniswapV2Router02.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \u0027./IUniswapV2Router01.sol\u0027;\n\ncontract IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"IWeth.sol":{"content":"// Copyright (C) 2015, 2016, 2017, 2019 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity ^0.5.0;\n\ninterface IWeth {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n    function balanceOf(address owner) external view returns(uint);\n}"},"MoneyPrinter.sol":{"content":"pragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DydxFlashloanBase.sol\";\nimport \"./ICallee.sol\";\n\nimport \"./IERC20.sol\";\nimport \u0027./IUniswapV2Router02.sol\u0027;\nimport \u0027./IWeth.sol\u0027;\n\ncontract MoneyPrinter is ICallee, DydxFlashloanBase {\n\taddress uni_addr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\t//address solo_addr = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE; // kovan\n\t//address weth_addr = 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // kovan\n\t//address dai_addr = 0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD; // kovan\n\taddress solo_addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n\taddress weth_addr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\taddress dai_addr = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\taddress usdc_addr = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    IUniswapV2Router02 uni = IUniswapV2Router02(uni_addr);\n\tISoloMargin solo = ISoloMargin(solo_addr);\n\n    address owner;\n\n    constructor() public {\n\t\towner = msg.sender;\n    }\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction setOwner(address _o) onlyOwner external {\n\t\towner = _o;\n\t}\n\n\tfunction printMoney(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) onlyOwner external {\n        IERC20 erc20 = IERC20(tokenIn);\n        erc20.transferFrom(msg.sender, address(this), amountIn);\n\t\terc20.approve(uni_addr, amountIn); // usdt -1 six decimal would fail!\n        uni.swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, deadline);\n    }\n\n    // This is the function that will be called postLoan\n    // i.e. Encode the logic to handle your flashloaned funds here\n    function callFunction(\n        address sender,\n        Account.Info memory account,\n        bytes memory data\n    ) public {\n\t\t(address tokenIn, uint amountIn, address[] memory path) = abi.decode(data, (address, uint256, address[]));\n\n\t\tIERC20(tokenIn).approve(uni_addr, amountIn);\n\t\tuni.swapExactTokensForTokens(amountIn, amountIn, path, address(this), now + 5 minutes);\n\n\t\tuint256 repayAmount = amountIn + 2;\n        uint256 balance = IERC20(tokenIn).balanceOf(address(this));\n        require(\n            IERC20(tokenIn).balanceOf(address(this)) \u003e= repayAmount,\n            \"Not enough funds to repay dydx loan!\"\n        );\n\n        uint profit = IERC20(tokenIn).balanceOf(address(this)) - repayAmount; \n        IERC20(tokenIn).transfer(owner, profit);\n    }\n\n    function flashPrintMoney(\n      address tokenIn, \n      uint256 amountIn, \n      address[] calldata path\n\t) onlyOwner external {\n        // Get marketId from token address\n        uint256 marketId = _getMarketIdFromTokenAddress(solo_addr, tokenIn);\n\n        // Calculate repay amount (_amount + (2 wei))\n        // Approve transfer from\n        uint256 repayAmount = _getRepaymentAmountInternal(amountIn);\n        IERC20(tokenIn).approve(solo_addr, repayAmount);\n\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = _getWithdrawAction(marketId, amountIn);\n        operations[1] = _getCallAction(\n            abi.encode(tokenIn, amountIn, path)\n        );\n        operations[2] = _getDepositAction(marketId, repayAmount);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        solo.operate(accountInfos, operations);\n    }\n\n    function() external payable {}\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}