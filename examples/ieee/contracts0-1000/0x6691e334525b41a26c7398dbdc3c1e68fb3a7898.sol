{"ERC20SwapToPay.sol":{"content":"pragma solidity ^0.5.12;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\n\n/******************************************************\n* DO NOT EDIT THIS CODE\n* EDIT src/contracts/ERC20SwapToPay.sol INSTEAD\n* \n* This file is only to keep history of what was used to\n* verify the contract on Etherscan.\n*\n*******************************************************/\n\ninterface IUniswapV2Router02 {\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ninterface IERC20FeeProxy {\n  event TransferWithReferenceAndFee(\n    address tokenAddress,\n    address to,\n    uint256 amount,\n    bytes indexed paymentReference,\n    uint256 feeAmount,\n    address feeAddress\n  );\n\n  function transferFromWithReferenceAndFee(\n    address _tokenAddress,\n    address _to,\n    uint256 _amount,\n    bytes calldata _paymentReference,\n    uint256 _feeAmount,\n    address _feeAddress\n    ) external;\n}\n\n\n/**\n * @title ERC20SwapToPay\n * @notice This contract swaps ERC20 tokens before paying a request thanks to a payment proxy\n  */\ncontract ERC20SwapToPay is Ownable {\n  using SafeERC20 for IERC20;\n\n  IUniswapV2Router02 public swapRouter;\n  IERC20FeeProxy public paymentProxy;\n\n  constructor(address _swapRouterAddress, address _paymentProxyAddress) public {\n    swapRouter = IUniswapV2Router02(_swapRouterAddress);\n    paymentProxy = IERC20FeeProxy(_paymentProxyAddress);\n  }\n\n /**\n  * @notice Authorizes the proxy to spend a new request currency (ERC20).\n  * @param _erc20Address Address of an ERC20 used as a request currency\n  */\n  function approvePaymentProxyToSpend(address _erc20Address) public {\n    IERC20 erc20 = IERC20(_erc20Address);\n    uint256 max = 2**256 - 1;\n    erc20.safeApprove(address(paymentProxy), max);\n  }\n  \n /**\n  * @notice Authorizes the swap router to spend a new payment currency (ERC20).\n  * @param _erc20Address Address of an ERC20 used for payment\n  */\n  function approveRouterToSpend(address _erc20Address) public {\n    IERC20 erc20 = IERC20(_erc20Address);\n    uint256 max = 2**256 - 1;\n    erc20.safeApprove(address(swapRouter), max);\n  }\n  \n  /**\n  * @notice Performs a token swap between a payment currency and a request currency, and then\n  *         calls a payment proxy to pay the request, including fees.\n  * @param _to Transfer recipient = request issuer\n  * @param _amount Amount to transfer in request currency\n  * @param _amountInMax Maximum amount allowed to spend for currency swap, in payment currency.\n            This amount should take into account the fees.\n    @param _path, path of ERC20 tokens to swap from requestedToken to spentToken. The first \n            address of the path should be the payment currency. The last element should be the\n            request currency.\n  * @param _paymentReference Reference of the payment related\n  * @param _feeAmount Amount of the fee in request currency\n  * @param _feeAddress Where to pay the fee\n  * @param _deadline Deadline for the swap to be valid\n  */\n  function swapTransferWithReference(\n    address _to,\n    uint256 _amount,      // requestedToken\n    uint256 _amountInMax, // spentToken\n    address[] calldata _path, // from requestedToken to spentToken\n    bytes calldata _paymentReference,\n    uint256 _feeAmount,   // requestedToken\n    address _feeAddress,\n    uint256 _deadline\n  )\n    external\n  {\n    IERC20 spentToken = IERC20(_path[0]);\n    IERC20 requestedToken = IERC20(_path[_path.length-1]);\n    \n    uint256 requestedTotalAmount = _amount + _feeAmount;\n\n    require(spentToken.allowance(msg.sender, address(this)) \u003e _amountInMax, \"Not sufficient allowance for swap to pay.\");\n    require(spentToken.safeTransferFrom(msg.sender, address(this), _amountInMax), \"Could not transfer payment token from swapper-payer\");\n\n    // Allow the router to spend all this contract\u0027s spentToken\n    if (spentToken.allowance(address(this),address(swapRouter)) \u003c _amountInMax) {\n        approveRouterToSpend(address(spentToken));\n    }\n    \n    swapRouter.swapTokensForExactTokens(\n        requestedTotalAmount,\n        _amountInMax,\n        _path,\n        address(this),\n        _deadline\n    );\n    \n    // Allow the payment network to spend all this contract\u0027s requestedToken\n    if (requestedToken.allowance(address(this),address(paymentProxy)) \u003c requestedTotalAmount) {\n        approvePaymentProxyToSpend(address(requestedToken));\n    }\n    \n    // Pay the request and fees\n    paymentProxy.transferFromWithReferenceAndFee(\n        address(requestedToken),\n        _to,\n        _amount,\n        _paymentReference,\n        _feeAmount,\n        _feeAddress\n    );\n    \n    // Give the change back to the payer, in both currencies (only spent token should remain)\n\n    if (spentToken.balanceOf(address(this)) \u003e 0) {\n      spentToken.transfer(msg.sender, spentToken.balanceOf(address(this)));\n    }    \n    if (requestedToken.balanceOf(address(this)) \u003e 0) {\n      requestedToken.transfer(msg.sender, requestedToken.balanceOf(address(this)));\n    }\n  }\n  \n\n  /*\n  * Admin functions to edit the admin, router address or proxy address\n  */\n  \n  function setPaymentProxy(address _paymentProxyAddress) public onlyOwner {\n    paymentProxy = IERC20FeeProxy(_paymentProxyAddress);\n  }\n  \n  function setRouter(address _newSwapRouterAddress) public onlyOwner {\n    swapRouter = IUniswapV2Router02(_newSwapRouterAddress);\n  }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.5.0;\n\ncontract Context {\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"SafeERC20.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @notice Works around implementations of ERC20 with transferFrom not returning success status.\n */\nlibrary SafeERC20 {\n\n  /**\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\n   * @dev This is necessary because of non-standard ERC20 tokens that don\u0027t have a return value.\n   * @return The return value of the ERC20 call, returning true for non-standard tokens\n   */\n  function safeTransferFrom(IERC20  _token, address _from, address _to, uint256 _amount) internal returns (bool result) {\n    address tokenAddress = address(_token);\n    /* solium-disable security/no-inline-assembly */\n    // check if the address is a contract\n    assembly {\n      if iszero(extcodesize(tokenAddress)) { revert(0, 0) }\n    }\n    \n    // solium-disable-next-line security/no-low-level-calls\n    (bool success, ) = tokenAddress.call(abi.encodeWithSignature(\n      \"transferFrom(address,address,uint256)\",\n      _from,\n      _to,\n      _amount\n    ));\n\n    assembly {\n        switch returndatasize()\n        case 0 { // not a standard erc20\n            result := 1\n        }\n        case 32 { // standard erc20\n            returndatacopy(0, 0, 32)\n            result := mload(0)\n        }\n        default { // anything else, should revert for safety\n            revert(0, 0)\n        }\n    }\n\n    require(success, \"transferFrom() has been reverted\");\n\n    /* solium-enable security/no-inline-assembly */\n    return result;\n  }\n  \n  /**\n    * @dev Deprecated. This function has issues similar to the ones found in\n    * {IERC20-approve}, and its usage is discouraged.\n    *\n    * Whenever possible, use {safeIncreaseAllowance} and\n    * {safeDecreaseAllowance} instead.\n    */\n  function safeApprove(IERC20 _token, address _spender, uint256 _amount) internal returns (bool result) {\n    address tokenAddress = address(_token);\n    /* solium-disable security/no-inline-assembly */\n    // check if the address is a contract\n    assembly {\n      if iszero(extcodesize(tokenAddress)) { revert(0, 0) }\n    }\n    \n    // solium-disable-next-line security/no-low-level-calls\n    (bool success, ) = tokenAddress.call(abi.encodeWithSignature(\n      \"approve(address,uint256)\",\n      _spender,\n      _amount\n    ));\n\n    assembly {\n        switch returndatasize()\n        case 0 { // not a standard erc20\n            result := 1\n        }\n        case 32 { // standard erc20\n            returndatacopy(0, 0, 32)\n            result := mload(0)\n        }\n        default { // anything else, should revert for safety\n            revert(0, 0)\n        }\n    }\n\n    require(success, \"approve() has been reverted\");\n\n    /* solium-enable security/no-inline-assembly */\n    return result;\n  }\n}\n"}}