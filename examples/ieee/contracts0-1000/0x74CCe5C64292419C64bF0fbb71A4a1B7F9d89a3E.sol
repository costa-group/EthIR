{"Committee.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nimport \"./SafeMath.sol\";\nimport \"./ICommittee.sol\";\nimport \"./ManagedContract.sol\";\nimport \"./IStakingRewards.sol\";\nimport \"./IFeesAndBootstrapRewards.sol\";\n\ncontract Committee is ICommittee, ManagedContract {\n\tusing SafeMath for uint256;\n\tusing SafeMath for uint96;\n\n\tuint96 constant CERTIFICATION_MASK = 1 \u003c\u003c 95;\n\tuint96 constant WEIGHT_MASK = ~CERTIFICATION_MASK;\n\n\tstruct CommitteeMember {\n\t\taddress addr;\n\t\tuint96 weightAndCertifiedBit;\n\t}\n\tCommitteeMember[] committee;\n\n\tstruct MemberStatus {\n\t\tuint32 pos;\n\t\tbool inCommittee;\n\t}\n\tmapping(address =\u003e MemberStatus) public membersStatus;\n\n\tstruct CommitteeStats {\n\t\tuint96 totalWeight;\n\t\tuint32 generalCommitteeSize;\n\t\tuint32 certifiedCommitteeSize;\n\t}\n\tCommitteeStats committeeStats;\n\n\tuint8 maxCommitteeSize;\n\n\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin, uint8 _maxCommitteeSize) ManagedContract(_contractRegistry, _registryAdmin) public {\n\t\tsetMaxCommitteeSize(_maxCommitteeSize);\n\t}\n\n\tmodifier onlyElectionsContract() {\n\t\trequire(msg.sender == electionsContract, \"caller is not the elections\");\n\n\t\t_;\n\t}\n\n\t/*\n\t * External functions\n\t */\n\n\tfunction memberWeightChange(address addr, uint256 weight) external override onlyElectionsContract onlyWhenActive {\n\t\tMemberStatus memory status = membersStatus[addr];\n\n\t\tif (!status.inCommittee) {\n\t\t\treturn;\n\t\t}\n\t\tCommitteeMember memory member = committee[status.pos];\n\t\t(uint prevWeight, bool isCertified) = getWeightCertification(member);\n\n\t\tcommitteeStats.totalWeight = uint96(committeeStats.totalWeight.sub(prevWeight).add(weight));\n\n\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\n\t\temit CommitteeChange(addr, weight, isCertified, true);\n\t}\n\n\tfunction memberCertificationChange(address addr, bool isCertified) external override onlyElectionsContract onlyWhenActive {\n\t\tMemberStatus memory status = membersStatus[addr];\n\n\t\tif (!status.inCommittee) {\n\t\t\treturn;\n\t\t}\n\t\tCommitteeMember memory member = committee[status.pos];\n\t\t(uint weight, bool prevCertification) = getWeightCertification(member);\n\n\t\tCommitteeStats memory _committeeStats = committeeStats;\n\n\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, true, prevCertification, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n\n\t\tcommitteeStats.certifiedCommitteeSize = _committeeStats.certifiedCommitteeSize - (prevCertification ? 1 : 0) + (isCertified ? 1 : 0);\n\n\t\tcommittee[status.pos].weightAndCertifiedBit = packWeightCertification(weight, isCertified);\n\t\temit CommitteeChange(addr, weight, isCertified, true);\n\t}\n\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external override onlyElectionsContract onlyWhenActive returns (bool memberAdded) {\n\t\tMemberStatus memory status = membersStatus[addr];\n\n\t\tif (status.inCommittee) {\n\t\t\treturn false;\n\t\t}\n\n\t\t(bool qualified, uint entryPos) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\n\t\tif (!qualified) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmemberAdded = true;\n\n\t\tCommitteeStats memory _committeeStats = committeeStats;\n\n\t\tstakingRewardsContract.committeeMembershipWillChange(addr, weight, _committeeStats.totalWeight, false, true);\n\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(addr, false, isCertified, isCertified, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n\n\t\t_committeeStats.generalCommitteeSize++;\n\t\tif (isCertified) _committeeStats.certifiedCommitteeSize++;\n\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.add(weight));\n\n\t\tCommitteeMember memory newMember = CommitteeMember({\n\t\t\taddr: addr,\n\t\t\tweightAndCertifiedBit: packWeightCertification(weight, isCertified)\n\t\t});\n\n\t\tif (entryPos \u003c committee.length) {\n\t\t\tCommitteeMember memory removed = committee[entryPos];\n\t\t\tunpackWeightCertification(removed.weightAndCertifiedBit);\n\n\t\t\t_committeeStats = removeMemberAtPos(entryPos, false, _committeeStats);\n\t\t\tcommittee[entryPos] = newMember;\n\t\t} else {\n\t\t\tcommittee.push(newMember);\n\t\t}\n\n\t\tstatus.inCommittee = true;\n\t\tstatus.pos = uint32(entryPos);\n\t\tmembersStatus[addr] = status;\n\n\t\tcommitteeStats = _committeeStats;\n\n\t\temit CommitteeChange(addr, weight, isCertified, true);\n\t}\n\n\tfunction checkAddMember(address addr, uint256 weight) external view override returns (bool wouldAddMember) {\n\t\tif (membersStatus[addr].inCommittee) {\n\t\t\treturn false;\n\t\t}\n\n\t\t(bool qualified, ) = qualifiesToEnterCommittee(addr, weight, maxCommitteeSize);\n\t\treturn qualified;\n\t}\n\n\t/// @dev Called by: Elections contract\n\t/// Notifies a a member removal for example due to voteOut / voteUnready\n\tfunction removeMember(address addr) external override onlyElectionsContract onlyWhenActive returns (bool memberRemoved, uint256 memberEffectiveStake, bool isCertified) {\n\t\tMemberStatus memory status = membersStatus[addr];\n\t\tif (!status.inCommittee) {\n\t\t\treturn (false, 0, false);\n\t\t}\n\n\t\tmemberRemoved = true;\n\t\t(memberEffectiveStake, isCertified) = getWeightCertification(committee[status.pos]);\n\n\t\tcommitteeStats = removeMemberAtPos(status.pos, true, committeeStats);\n\t}\n\n\t/// @dev Called by: Elections contract\n\t/// Returns the committee members and their weights\n\tfunction getCommittee() external override view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\n\t\treturn _getCommittee();\n\t}\n\n\tfunction emitCommitteeSnapshot() external override {\n\t\t(address[] memory addrs, uint256[] memory weights, bool[] memory certification) = _getCommittee();\n\t\tfor (uint i = 0; i \u003c addrs.length; i++) {\n\t\t\temit CommitteeChange(addrs[i], weights[i], certification[i], true);\n\t\t}\n\t\temit CommitteeSnapshot(addrs, weights, certification);\n\t}\n\n\t/*\n\t * Governance functions\n\t */\n\n\tfunction setMaxCommitteeSize(uint8 _maxCommitteeSize) public override onlyFunctionalManager {\n\t\tuint8 prevMaxCommitteeSize = maxCommitteeSize;\n\t\tmaxCommitteeSize = _maxCommitteeSize;\n\n\t\twhile (committee.length \u003e _maxCommitteeSize) {\n\t\t\t(, ,uint pos) = _getMinCommitteeMember();\n\t\t\tcommitteeStats = removeMemberAtPos(pos, true, committeeStats);\n\t\t}\n\n\t\temit MaxCommitteeSizeChanged(_maxCommitteeSize, prevMaxCommitteeSize);\n\t}\n\n\tfunction getMaxCommitteeSize() external override view returns (uint8) {\n\t\treturn maxCommitteeSize;\n\t}\n\n\tfunction getCommitteeStats() external override view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight) {\n\t\tCommitteeStats memory _committeeStats = committeeStats;\n\t\treturn (_committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize, _committeeStats.totalWeight);\n\t}\n\n\tfunction getMemberInfo(address addr) external override view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight) {\n\t\tMemberStatus memory status = membersStatus[addr];\n\t\tinCommittee = status.inCommittee;\n\t\tif (inCommittee) {\n\t\t\t(weight, isCertified) = getWeightCertification(committee[status.pos]);\n\t\t}\n\t\ttotalCommitteeWeight = committeeStats.totalWeight;\n\t}\n\n\t/*\n\t * Private\n\t */\n\n\tfunction packWeightCertification(uint256 weight, bool certification) private pure returns (uint96 weightAndCertified) {\n\t\treturn uint96(weight) | (certification ? CERTIFICATION_MASK : 0);\n\t}\n\n\tfunction unpackWeightCertification(uint96 weightAndCertifiedBit) private pure returns (uint256 weight, bool certification) {\n\t\treturn (uint256(weightAndCertifiedBit \u0026 WEIGHT_MASK), weightAndCertifiedBit \u0026 CERTIFICATION_MASK != 0);\n\t}\n\n\tfunction getWeightCertification(CommitteeMember memory member) private pure returns (uint256 weight, bool certification) {\n\t\treturn unpackWeightCertification(member.weightAndCertifiedBit);\n\t}\n\n\tfunction _getCommittee() private view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification) {\n\t\tCommitteeMember[] memory _committee = committee;\n\t\taddrs = new address[](_committee.length);\n\t\tweights = new uint[](_committee.length);\n\t\tcertification = new bool[](_committee.length);\n\n\t\tfor (uint i = 0; i \u003c _committee.length; i++) {\n\t\t\taddrs[i] = _committee[i].addr;\n\t\t\t(weights[i], certification[i]) = getWeightCertification(_committee[i]);\n\t\t}\n\t}\n\n\tfunction _getMinCommitteeMember() private view returns (\n\t\taddress minMemberAddress,\n\t\tuint256 minMemberWeight,\n\t\tuint minMemberPos\n\t){\n\t\tCommitteeMember[] memory _committee = committee;\n\t\tminMemberPos = uint256(-1);\n\t\tminMemberWeight = uint256(-1);\n\t\tuint256 memberWeight;\n\t\taddress memberAddress;\n\t\tfor (uint i = 0; i \u003c _committee.length; i++) {\n\t\t\tmemberAddress = _committee[i].addr;\n\t\t\t(memberWeight,) = getWeightCertification(_committee[i]);\n\t\t\tif (memberWeight \u003c minMemberWeight || memberWeight == minMemberWeight \u0026\u0026 memberAddress \u003c minMemberAddress) {\n\t\t\t\tminMemberPos = i;\n\t\t\t\tminMemberWeight = memberWeight;\n\t\t\t\tminMemberAddress = memberAddress;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction qualifiesToEnterCommittee(address addr, uint256 weight, uint8 _maxCommitteeSize) private view returns (bool qualified, uint entryPos) {\n\t\tuint committeeLength = committee.length;\n\t\tif (committeeLength \u003c _maxCommitteeSize) {\n\t\t\treturn (true, committeeLength);\n\t\t}\n\n\t\t(address minMemberAddress, uint256 minMemberWeight, uint minMemberPos) = _getMinCommitteeMember();\n\n\t\tif (weight \u003e minMemberWeight || weight == minMemberWeight \u0026\u0026 addr \u003e minMemberAddress) {\n\t\t\treturn (true, minMemberPos);\n\t\t}\n\n\t\treturn (false, 0);\n\t}\n\n\tfunction removeMemberAtPos(uint pos, bool clearFromList, CommitteeStats memory _committeeStats) private returns (CommitteeStats memory newCommitteeStats){\n\t\tCommitteeMember memory member = committee[pos];\n\n\t\t(uint weight, bool certification) = getWeightCertification(member);\n\n\t\tstakingRewardsContract.committeeMembershipWillChange(member.addr, weight, _committeeStats.totalWeight, true, false);\n\t\tfeesAndBootstrapRewardsContract.committeeMembershipWillChange(member.addr, true, certification, certification, _committeeStats.generalCommitteeSize, _committeeStats.certifiedCommitteeSize);\n\n\t\tdelete membersStatus[member.addr];\n\n\t\t_committeeStats.generalCommitteeSize--;\n\t\tif (certification) _committeeStats.certifiedCommitteeSize--;\n\t\t_committeeStats.totalWeight = uint96(_committeeStats.totalWeight.sub(weight));\n\n\t\temit CommitteeChange(member.addr, weight, certification, false);\n\n\t\tif (clearFromList) {\n\t\t\tuint committeeLength = committee.length;\n\t\t\tif (pos \u003c committeeLength - 1) {\n\t\t\t\tCommitteeMember memory last = committee[committeeLength - 1];\n\t\t\t\tcommittee[pos] = last;\n\t\t\t\tmembersStatus[last.addr].pos = uint32(pos);\n\t\t\t}\n\t\t\tcommittee.pop();\n\t\t}\n\n\t\treturn _committeeStats;\n\t}\n\n\t/*\n     * Contracts topology / registry interface\n     */\n\n\taddress electionsContract;\n\tIStakingRewards stakingRewardsContract;\n\tIFeesAndBootstrapRewards feesAndBootstrapRewardsContract;\n\tfunction refreshContracts() external override {\n\t\telectionsContract = getElectionsContract();\n\t\tstakingRewardsContract = IStakingRewards(getStakingRewardsContract());\n\t\tfeesAndBootstrapRewardsContract = IFeesAndBootstrapRewards(getFeesAndBootstrapRewardsContract());\n\t}\n\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"ContractRegistryAccessor.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nimport \"./IContractRegistry.sol\";\nimport \"./WithClaimableRegistryManagement.sol\";\nimport \"./Initializable.sol\";\n\ncontract ContractRegistryAccessor is WithClaimableRegistryManagement, Initializable {\n\n    IContractRegistry private contractRegistry;\n\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\n        setContractRegistry(_contractRegistry);\n        _transferRegistryManagement(_registryAdmin);\n    }\n\n    modifier onlyAdmin {\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\n\n        _;\n    }\n\n    function isManager(string memory role) internal view returns (bool) {\n        IContractRegistry _contractRegistry = contractRegistry;\n        return isAdmin() || _contractRegistry != IContractRegistry(0) \u0026\u0026 contractRegistry.getManager(role) == msg.sender;\n    }\n\n    function isAdmin() internal view returns (bool) {\n        return msg.sender == registryAdmin() || msg.sender == initializationAdmin() || msg.sender == address(contractRegistry);\n    }\n\n    function getProtocolContract() internal view returns (address) {\n        return contractRegistry.getContract(\"protocol\");\n    }\n\n    function getStakingRewardsContract() internal view returns (address) {\n        return contractRegistry.getContract(\"stakingRewards\");\n    }\n\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\n    }\n\n    function getCommitteeContract() internal view returns (address) {\n        return contractRegistry.getContract(\"committee\");\n    }\n\n    function getElectionsContract() internal view returns (address) {\n        return contractRegistry.getContract(\"elections\");\n    }\n\n    function getDelegationsContract() internal view returns (address) {\n        return contractRegistry.getContract(\"delegations\");\n    }\n\n    function getGuardiansRegistrationContract() internal view returns (address) {\n        return contractRegistry.getContract(\"guardiansRegistration\");\n    }\n\n    function getCertificationContract() internal view returns (address) {\n        return contractRegistry.getContract(\"certification\");\n    }\n\n    function getStakingContract() internal view returns (address) {\n        return contractRegistry.getContract(\"staking\");\n    }\n\n    function getSubscriptionsContract() internal view returns (address) {\n        return contractRegistry.getContract(\"subscriptions\");\n    }\n\n    function getStakingRewardsWallet() internal view returns (address) {\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\n    }\n\n    function getBootstrapRewardsWallet() internal view returns (address) {\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\n    }\n\n    function getGeneralFeesWallet() internal view returns (address) {\n        return contractRegistry.getContract(\"generalFeesWallet\");\n    }\n\n    function getCertifiedFeesWallet() internal view returns (address) {\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\n    }\n\n    function getStakingContractHandler() internal view returns (address) {\n        return contractRegistry.getContract(\"stakingContractHandler\");\n    }\n\n    /*\n    * Governance functions\n    */\n\n    event ContractRegistryAddressUpdated(address addr);\n\n    function setContractRegistry(IContractRegistry newContractRegistry) public onlyAdmin {\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\n        contractRegistry = newContractRegistry;\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\n    }\n\n    function getContractRegistry() public view returns (IContractRegistry) {\n        return contractRegistry;\n    }\n\n}\n"},"ICommittee.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n/// @title Committee contract interface\ninterface ICommittee {\n\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\n\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\n\n\t// No external functions\n\n\t/*\n     * External functions\n     */\n\n\t/// @dev Called by: Elections contract\n\t/// Notifies a weight change of certification change of a member\n\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\n\n\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\n\n\t/// @dev Called by: Elections contract\n\t/// Notifies a a member removal for example due to voteOut / voteUnready\n\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberEffectiveStake, bool removedMemberCertified)/* onlyElectionContract */;\n\n\t/// @dev Called by: Elections contract\n\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\n\n\t/// @dev Called by: Elections contract\n\t/// Checks if addMember() would add a the member to the committee\n\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\n\n\t/// @dev Called by: Elections contract\n\t/// Returns the committee members and their weights\n\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\n\n\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalStake);\n\n\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\n\n\tfunction emitCommitteeSnapshot() external;\n\n\t/*\n\t * Governance functions\n\t */\n\n\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\n\n\tfunction setMaxCommitteeSize(uint8 maxCommitteeSize) external /* onlyFunctionalManager onlyWhenActive */;\n\n\tfunction getMaxCommitteeSize() external view returns (uint8);\n}\n"},"IContractRegistry.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ninterface IContractRegistry {\n\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\n\tevent ManagerChanged(string role, address newManager);\n\tevent ContractRegistryUpdated(address newContractRegistry);\n\n\t/*\n\t* External functions\n\t*/\n\n\t/// @dev updates the contracts address and emits a corresponding event\n\t/// managedContract indicates whether the contract is managed by the registry and notified on changes\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdmin */;\n\n\t/// @dev returns the current address of the given contracts\n\tfunction getContract(string calldata contractName) external view returns (address);\n\n\t/// @dev returns the list of contract addresses managed by the registry\n\tfunction getManagedContracts() external view returns (address[] memory);\n\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\n\n\tfunction getManager(string calldata role) external view returns (address);\n\n\tfunction lockContracts() external /* onlyAdmin */;\n\n\tfunction unlockContracts() external /* onlyAdmin */;\n\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\n\n\tfunction getPreviousContractRegistry() external view returns (address);\n\n}\n"},"IFeesAndBootstrapRewards.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n/// @title Rewards contract interface\ninterface IFeesAndBootstrapRewards {\n    event FeesAssigned(address indexed guardian, uint256 amount);\n    event FeesWithdrawn(address indexed guardian, uint256 amount);\n    event BootstrapRewardsAssigned(address indexed guardian, uint256 amount);\n    event BootstrapRewardsWithdrawn(address indexed guardian, uint256 amount);\n\n    /*\n    * External functions\n    */\n\n    /// @dev called by the Committee contract upon expected change in the committee membership of the guardian\n    /// Triggers update of the member rewards\n    function committeeMembershipWillChange(address guardian, bool inCommittee, bool isCertified, bool nextCertification, uint generalCommitteeSize, uint certifiedCommitteeSize) external /* onlyCommitteeContract */;\n\n    function getFeesAndBootstrapBalance(address guardian) external view returns (\n        uint256 feeBalance,\n        uint256 bootstrapBalance\n    );\n\n    /// @dev Transfer all of msg.sender\u0027s outstanding balance to their account\n    function withdrawFees(address guardian) external;\n\n    /// @dev Transfer all of msg.sender\u0027s outstanding balance to their account\n    function withdrawBootstrapFunds(address guardian) external;\n\n    /// @dev Returns the global Fees and Bootstrap rewards state \n    function getFeesAndBootstrapState() external view returns (\n        uint256 certifiedFeesPerMember,\n        uint256 generalFeesPerMember,\n        uint256 certifiedBootstrapPerMember,\n        uint256 generalBootstrapPerMember,\n        uint256 lastAssigned\n    );\n\n    function getFeesAndBootstrapData(address guardian) external view returns (\n        uint256 feeBalance,\n        uint256 lastFeesPerMember,\n        uint256 bootstrapBalance,\n        uint256 lastBootstrapPerMember\n    );\n\n    /*\n     * Governance\n     */\n\n    event GeneralCommitteeAnnualBootstrapChanged(uint256 generalCommitteeAnnualBootstrap);\n    event CertifiedCommitteeAnnualBootstrapChanged(uint256 certifiedCommitteeAnnualBootstrap);\n    event RewardDistributionActivated(uint256 startTime);\n    event RewardDistributionDeactivated();\n    event FeesAndBootstrapRewardsBalanceMigrated(address indexed guardian, uint256 fees, uint256 bootstrapRewards, address toRewardsContract);\n    event FeesAndBootstrapRewardsBalanceMigrationAccepted(address from, address indexed guardian, uint256 fees, uint256 bootstrapRewards);\n    event EmergencyWithdrawal(address addr);\n\n    /// @dev deactivates reward distribution, all rewards will be distributed up\n    /// deactivate moment.\n    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n\n    /// @dev activates reward distribution, all rewards will be distributed up\n    /// assuming the last assignment was on startTime (the time the old contarct was deactivated)\n    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n\n    /// @dev Returns the contract\u0027s settings\n    function getSettings() external view returns (\n        uint generalCommitteeAnnualBootstrap,\n        uint certifiedCommitteeAnnualBootstrap,\n        bool rewardAllocationActive\n    );\n\n    function getGeneralCommitteeAnnualBootstrap() external view returns (uint256);\n\n    /// @dev Assigns rewards and sets a new monthly rate for the geenral commitee bootstrap.\n    function setGeneralCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalManager */;\n\n    function getCertifiedCommitteeAnnualBootstrap() external view returns (uint256);\n\n    /// @dev Assigns rewards and sets a new monthly rate for the certification commitee bootstrap.\n    function setCertifiedCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalManager */;\n\n    function isRewardAllocationActive() external view returns (bool);\n\n    /// @dev migrates the staking rewards balance of the guardian to the rewards contract as set in the registry.\n    function migrateRewardsBalance(address guardian) external;\n\n    /// @dev accepts guardian\u0027s balance migration from a previous rewards contarct.\n    function acceptRewardsBalanceMigration(address guardian, uint256 fees, uint256 bootstrapRewards) external;\n\n    /// @dev emergency withdrawal of the rewards contract balances, may eb called only by the EmergencyManager. \n    function emergencyWithdraw() external; /* onlyMigrationManager */\n}\n\n"},"ILockable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ninterface ILockable {\n\n    event Locked();\n    event Unlocked();\n\n    function lock() external /* onlyLockOwner */;\n    function unlock() external /* onlyLockOwner */;\n    function isLocked() view external returns (bool);\n\n}\n"},"Initializable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ncontract Initializable {\n\n    address private _initializationAdmin;\n\n    event InitializationComplete();\n\n    constructor() public{\n        _initializationAdmin = msg.sender;\n    }\n\n    modifier onlyInitializationAdmin() {\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\n\n        _;\n    }\n\n    /*\n    * External functions\n    */\n\n    function initializationAdmin() public view returns (address) {\n        return _initializationAdmin;\n    }\n\n    function initializationComplete() external onlyInitializationAdmin {\n        _initializationAdmin = address(0);\n        emit InitializationComplete();\n    }\n\n    function isInitializationComplete() public view returns (bool) {\n        return _initializationAdmin == address(0);\n    }\n\n}"},"IStakingRewards.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n/// @title Staking rewards contract interface\ninterface IStakingRewards {\n\n    event DelegatorStakingRewardsAssigned(address indexed delegator, uint256 amount, uint256 totalAwarded, address guardian, uint256 delegatorRewardsPerToken);\n    event GuardianStakingRewardsAssigned(address indexed guardian, uint256 amount, uint256 totalAwarded, uint256 delegatorRewardsPerToken, uint256 stakingRewardsPerWeight);\n    event StakingRewardsClaimed(address indexed addr, uint256 claimedDelegatorRewards, uint256 claimedGuardianRewards, uint256 totalClaimedDelegatorRewards, uint256 totalClaimedGuardianRewards);\n    event StakingRewardsAllocated(uint256 allocatedRewards, uint256 stakingRewardsPerWeight);\n    event GuardianDelegatorsStakingRewardsPercentMilleUpdated(address indexed guardian, uint256 delegatorsStakingRewardsPercentMille);\n\n    /*\n     * External functions\n     */\n\n    /// @dev Returns the currently unclaimed orbs token reward balance of the given address.\n    function getStakingRewardsBalance(address addr) external view returns (uint256 balance);\n\n    /// @dev Allows Guardian to set a different delegator staking reward cut than the default\n    /// delegatorRewardsPercentMille accepts values between 0 - maxDelegatorsStakingRewardsPercentMille\n    function setGuardianDelegatorsStakingRewardsPercentMille(uint32 delegatorRewardsPercentMille) external;\n\n    /// @dev Returns the guardian\u0027s delegatorRewardsPercentMille\n    function getGuardianDelegatorsStakingRewardsPercentMille(address guardian) external view returns (uint256 delegatorRewardsRatioPercentMille);\n\n    /// @dev Claims the staking rewards balance of addr by staking\n    function claimStakingRewards(address addr) external;\n\n    /// @dev Returns the amount of ORBS tokens in the staking wallet that were allocated\n    /// but not yet claimed. The staking wallet balance must always larger than the allocated value.\n    function getStakingRewardsWalletAllocatedTokens() external view returns (uint256 allocated);\n\n    function getGuardianStakingRewardsData(address guardian) external view returns (\n        uint256 balance,\n        uint256 claimed,\n        uint256 delegatorRewardsPerToken,\n        uint256 lastStakingRewardsPerWeight\n    );\n\n    function getDelegatorStakingRewardsData(address delegator) external view returns (\n        uint256 balance,\n        uint256 claimed,\n        uint256 lastDelegatorRewardsPerToken\n    );\n\n    function getStakingRewardsState() external view returns (\n        uint96 stakingRewardsPerWeight,\n        uint96 unclaimedStakingRewards\n    );\n\n    function getCurrentStakingRewardsRatePercentMille() external returns (uint256);\n\n    /// @dev called by the Committee contract upon expected change in the committee membership of the guardian\n    /// Triggers update of the member rewards\n    function committeeMembershipWillChange(address guardian, uint256 weight, uint256 totalCommitteeWeight, bool inCommittee, bool inCommitteeAfter) external /* onlyCommitteeContract */;\n\n    /// @dev called by the Delegation contract upon expected change in a committee member delegator stake\n    /// Triggers update of the delegator and guardian staking rewards\n    function delegationWillChange(address guardian, uint256 delegatedStake, address delegator, uint256 delegatorStake, address nextGuardian, uint256 nextGuardianDelegatedStake) external /* onlyDelegationsContract */;\n\n    /*\n     * Governance functions\n     */\n\n    event AnnualStakingRewardsRateChanged(uint256 annualRateInPercentMille, uint256 annualCap);\n    event DefaultDelegatorsStakingRewardsChanged(uint32 defaultDelegatorsStakingRewardsPercentMille);\n    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\n    event RewardDistributionActivated(uint256 startTime);\n    event RewardDistributionDeactivated();\n    event StakingRewardsBalanceMigrated(address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards, address toRewardsContract);\n    event StakingRewardsBalanceMigrationAccepted(address from, address indexed addr, uint256 guardianStakingRewards, uint256 delegatorStakingRewards);\n    event EmergencyWithdrawal(address addr);\n\n    /// @dev activates reward distribution, all rewards will be distributed up\n    /// assuming the last assignment was on startTime (the time the old contarct was deactivated)\n    function activateRewardDistribution(uint startTime) external /* onlyInitializationAdmin */;\n\n    /// @dev deactivates reward distribution, all rewards will be distributed up\n    /// deactivate moment.\n    function deactivateRewardDistribution() external /* onlyMigrationManager */;\n\n    /// @dev Sets the default cut of the delegators staking reward.\n    function setDefaultDelegatorsStakingRewardsPercentMille(uint32 defaultDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager onlyWhenActive */;\n\n    function getDefaultDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n\n    /// @dev Sets the maximum cut of the delegators staking reward.\n    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external /* onlyFunctionalManager onlyWhenActive */;\n\n    function getMaxDelegatorsStakingRewardsPercentMille() external view returns (uint32);\n\n    /// @dev Sets a new annual rate and cap for the staking reward.\n    function setAnnualStakingRewardsRate(uint256 annualRateInPercentMille, uint256 annualCap) external /* onlyFunctionalManager */;\n\n    function getAnnualStakingRewardsRatePercentMille() external view returns (uint32);\n\n    function getAnnualStakingRewardsCap() external view returns (uint256);\n\n    function isRewardAllocationActive() external view returns (bool);\n\n    /// @dev Returns the contract\u0027s settings\n    function getSettings() external view returns (\n        uint annualStakingRewardsCap,\n        uint32 annualStakingRewardsRatePercentMille,\n        uint32 defaultDelegatorsStakingRewardsPercentMille,\n        uint32 maxDelegatorsStakingRewardsPercentMille,\n        bool rewardAllocationActive\n    );\n\n    /// @dev migrates the staking rewards balance of the guardian to the rewards contract as set in the registry.\n    function migrateRewardsBalance(address guardian) external;\n\n    /// @dev accepts guardian\u0027s balance migration from a previous rewards contarct.\n    function acceptRewardsBalanceMigration(address guardian, uint256 guardianStakingRewards, uint256 delegatorStakingRewards) external;\n\n    /// @dev emergency withdrawal of the rewards contract balances, may eb called only by the EmergencyManager. \n    function emergencyWithdraw() external /* onlyMigrationManager */;\n}\n\n"},"Lockable.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nimport \"./ContractRegistryAccessor.sol\";\nimport \"./ILockable.sol\";\n\ncontract Lockable is ILockable, ContractRegistryAccessor {\n\n    bool public locked;\n\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\n\n    modifier onlyLockOwner() {\n        require(msg.sender == registryAdmin() || msg.sender == address(getContractRegistry()), \"caller is not a lock owner\");\n\n        _;\n    }\n\n    function lock() external override onlyLockOwner {\n        locked = true;\n        emit Locked();\n    }\n\n    function unlock() external override onlyLockOwner {\n        locked = false;\n        emit Unlocked();\n    }\n\n    function isLocked() external override view returns (bool) {\n        return locked;\n    }\n\n    modifier onlyWhenActive() {\n        require(!locked, \"contract is locked for this operation\");\n\n        _;\n    }\n}\n"},"ManagedContract.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nimport \"./Lockable.sol\";\n\ncontract ManagedContract is Lockable {\n\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\n\n    modifier onlyMigrationManager {\n        require(isManager(\"migrationManager\"), \"sender is not the migration manager\");\n\n        _;\n    }\n\n    modifier onlyFunctionalManager {\n        require(isManager(\"functionalManager\"), \"sender is not the functional manager\");\n\n        _;\n    }\n\n    function refreshContracts() virtual external {}\n\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"WithClaimableRegistryManagement.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nimport \"./Context.sol\";\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract WithClaimableRegistryManagement is Context {\n    address private _registryAdmin;\n    address private _pendingRegistryAdmin;\n\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _registryAdmin = msgSender;\n        emit RegistryManagementTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current registryAdmin.\n     */\n    function registryAdmin() public view returns (address) {\n        return _registryAdmin;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the registryAdmin.\n     */\n    modifier onlyRegistryAdmin() {\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current registryAdmin.\n     */\n    function isRegistryAdmin() public view returns (bool) {\n        return _msgSender() == _registryAdmin;\n    }\n\n    /**\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\n     *\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\n     * thereby removing any functionality that is only available to the registryAdmin.\n     */\n    function renounceRegistryManagement() public onlyRegistryAdmin {\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\n        _registryAdmin = address(0);\n    }\n\n    /**\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\n     */\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\n        _registryAdmin = newRegistryAdmin;\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingManager.\n     */\n    modifier onlyPendingRegistryAdmin() {\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\n        _;\n    }\n    /**\n     * @dev Allows the current registryAdmin to set the pendingManager address.\n     * @param newRegistryAdmin The address to transfer registryManagement to.\n     */\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\n        _pendingRegistryAdmin = newRegistryAdmin;\n    }\n\n    /**\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\n     */\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\n        _transferRegistryManagement(_pendingRegistryAdmin);\n        _pendingRegistryAdmin = address(0);\n    }\n\n    /**\n     * @dev Returns the current pendingRegistryAdmin\n    */\n    function pendingRegistryAdmin() public view returns (address) {\n       return _pendingRegistryAdmin;  \n    }\n}\n"}}