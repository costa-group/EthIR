{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"ICryptoPunksMarket.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\ninterface ICryptoPunksMarket {\n    struct Offer {\n        bool isForSale;\n        uint256 punkIndex;\n        address seller;\n        uint256 minValue;\n        address onlySellTo;\n    }\n\n    struct Bid {\n        bool hasBid;\n        uint256 punkIndex;\n        address bidder;\n        uint256 value;\n    }\n\n    event Assign(address indexed to, uint256 punkIndex);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event PunkTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 punkIndex\n    );\n    event PunkOffered(\n        uint256 indexed punkIndex,\n        uint256 minValue,\n        address indexed toAddress\n    );\n    event PunkBidEntered(\n        uint256 indexed punkIndex,\n        uint256 value,\n        address indexed fromAddress\n    );\n    event PunkBidWithdrawn(\n        uint256 indexed punkIndex,\n        uint256 value,\n        address indexed fromAddress\n    );\n    event PunkBought(\n        uint256 indexed punkIndex,\n        uint256 value,\n        address indexed fromAddress,\n        address indexed toAddress\n    );\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\n\n    function setInitialOwner(address to, uint256 punkIndex) external;\n\n    function setInitialOwners(\n        address[] calldata addresses,\n        uint256[] calldata indices\n    ) external;\n\n    function allInitialOwnersAssigned() external;\n\n    function getPunk(uint256 punkIndex) external;\n\n    function transferPunk(address to, uint256 punkIndex) external;\n\n    function punkNoLongerForSale(uint256 punkIndex) external;\n\n    function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei)\n        external;\n\n    function offerPunkForSaleToAddress(\n        uint256 punkIndex,\n        uint256 minSalePriceInWei,\n        address toAddress\n    ) external;\n\n    function buyPunk(uint256 punkIndex) external;\n\n    function withdraw() external;\n\n    function enterBidForPunk(uint256 punkIndex) external;\n\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\n\n    function withdrawBidForPunk(uint256 punkIndex) external;\n\n    function punkIndexToAddress(uint256 punkIndex) external returns (address);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\nimport \"./Timelocked.sol\";\n\ncontract Pausable is Timelocked {\n    bool private isPaused = false;\n\n    event Paused();\n    event Unpaused();\n\n    function pause() public onlyOwner whenNotLocked {\n        isPaused = true;\n    }\n\n    function unpause() public onlyOwner whenNotLocked {\n        isPaused = false;\n    }\n\n    modifier whenNotPaused {\n        require(!isPaused, \"Contract is paused\");\n        _;\n    }\n}\n"},"PunkFund.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\nimport \"./SafeMath.sol\";\nimport \"./EnumerableSet.sol\";\nimport \"./IERC20.sol\";\n\nimport \"./ICryptoPunksMarket.sol\";\nimport \"./Pausable.sol\";\n\ncontract PunkFund is Pausable {\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    ICryptoPunksMarket private cpm;\n    IERC20 private pt;\n    mapping(uint256 =\u003e address) private whoStaged;\n    EnumerableSet.UintSet private cryptoPunksDeposited;\n    uint256 private randNonce = 0;\n\n    event CryptoPunkStaged(uint256 punkId, address indexed from);\n    event CryptoPunkDeposited(uint256 punkId, address indexed from);\n    event CryptoPunkRedeemed(uint256 punkId, address indexed to);\n\n    constructor(address cryptoPunksAddress, address punkTokenAddress) public {\n        cpm = ICryptoPunksMarket(cryptoPunksAddress);\n        pt = IERC20(punkTokenAddress);\n    }\n\n    function getWhoStaged(uint256 cryptoPunkId) public view returns (address) {\n        return whoStaged[cryptoPunkId];\n    }\n\n    function getCryptoPunkAtIndex(uint256 index) public view returns (uint256) {\n        return cryptoPunksDeposited.at(index);\n    }\n\n    function getNumCryptoPunksDeposited() public view returns (uint256) {\n        return cryptoPunksDeposited.length();\n    }\n\n    function genPseudoRand(uint256 modulus) internal returns (uint256) {\n        randNonce = randNonce.add(1);\n        return\n            uint256(keccak256(abi.encodePacked(now, msg.sender, randNonce))) %\n            modulus;\n    }\n\n    function isCryptoPunkDeposited(uint256 punkId) public view returns (bool) {\n        uint256 numCryptoPunks = cryptoPunksDeposited.length();\n        for (uint256 i = 0; i \u003c numCryptoPunks; i++) {\n            uint256 cryptoPunkId = cryptoPunksDeposited.at(i);\n            if (cryptoPunkId == punkId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function stageCryptoPunk(uint256 punkId) public whenNotPaused {\n        require(cpm.punkIndexToAddress(punkId) == msg.sender);\n        whoStaged[punkId] = msg.sender;\n        emit CryptoPunkStaged(punkId, msg.sender);\n    }\n\n    function withdrawPunkToken(uint256 punkId) public whenNotPaused {\n        require(whoStaged[punkId] == msg.sender);\n        require(cpm.punkIndexToAddress(punkId) == address(this));\n        cryptoPunksDeposited.add(punkId);\n        emit CryptoPunkDeposited(punkId, msg.sender);\n        pt.transfer(msg.sender, 10**18);\n    }\n\n    function redeemCryptoPunk() public whenNotPaused {\n        uint256 cpLength = cryptoPunksDeposited.length();\n        uint256 randomIndex = genPseudoRand(cpLength);\n        uint256 selectedPunk = cryptoPunksDeposited.at(randomIndex);\n        require(pt.transferFrom(msg.sender, address(this), 10**18));\n        cryptoPunksDeposited.remove(selectedPunk);\n        cpm.transferPunk(msg.sender, selectedPunk);\n        emit CryptoPunkRedeemed(selectedPunk, msg.sender);\n    }\n\n    function migrate(address to) public onlyOwner whenNotLocked {\n        uint256 punkBalance = pt.balanceOf(address(this));\n        pt.transfer(to, punkBalance);\n        uint256 numCryptoPunks = cryptoPunksDeposited.length();\n        for (uint256 i = 0; i \u003c numCryptoPunks; i++) {\n            uint256 cryptoPunkId = cryptoPunksDeposited.at(i);\n            cpm.transferPunk(to, cryptoPunkId);\n        }\n    }\n\n    function stageRetroactively(uint256 punkId, address prevHolder)\n        public\n        onlyOwner\n    {\n        require(cpm.punkIndexToAddress(punkId) == address(this));\n        require(!isCryptoPunkDeposited(punkId));\n        whoStaged[punkId] = prevHolder;\n        emit CryptoPunkStaged(punkId, prevHolder);\n    }\n\n    function redeemRetroactively(address newHolder) public onlyOwner {\n        uint256 circulatingPunkSupply = pt.totalSupply() -\n            pt.balanceOf(address(this));\n        uint256 expectedCryptoPunksDeposited = circulatingPunkSupply.div(\n            10 ^ 18\n        );\n        if (cryptoPunksDeposited.length() \u003e expectedCryptoPunksDeposited) {\n            uint256 randomIndex = genPseudoRand(cryptoPunksDeposited.length());\n            uint256 selectedPunk = cryptoPunksDeposited.at(randomIndex);\n            cryptoPunksDeposited.remove(selectedPunk);\n            cpm.transferPunk(newHolder, selectedPunk);\n            emit CryptoPunkRedeemed(selectedPunk, newHolder);\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"Timelocked.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.7.0;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\ncontract Timelocked is Ownable {\n    using SafeMath for uint256;\n\n    uint256 releaseTime = 0;\n\n    event Locked();\n    event UnlockInitiated(uint256 releaseTime);\n\n    function initiateUnlock() public onlyOwner {\n        releaseTime = now.add(60 * 60 * 24 * 10);\n        emit UnlockInitiated(releaseTime);\n    }\n\n    function Lock() public onlyOwner {\n        releaseTime = 0;\n        emit Locked();\n    }\n\n    modifier whenNotLocked {\n        require(releaseTime != 0 \u0026\u0026 now \u003e releaseTime, \"Contract is locked\");\n        _;\n    }\n}\n"}}