{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/interactiveAdapters/curve/CurveAssetInteractiveAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../shared/ERC20.sol\";\nimport { SafeERC20 } from \"../../shared/SafeERC20.sol\";\nimport { TokenAmount } from \"../../shared/Structs.sol\";\nimport { ERC20ProtocolAdapter } from \"../../adapters/ERC20ProtocolAdapter.sol\";\nimport { CurveRegistry, PoolInfo } from \"../../adapters/curve/CurveRegistry.sol\";\nimport { CurveInteractiveAdapter } from \"./CurveInteractiveAdapter.sol\";\nimport { Stableswap } from \"../../interfaces/Stableswap.sol\";\n\n\n/**\n * @dev Deposit contract interface.\n * Only the functions required for CurveAssetInteractiveAdapter contract are added.\n * The Deposit contract is available here\n * github.com/curvefi/curve-contract/blob/compounded/vyper/deposit.vy.\n */\n/* solhint-disable func-name-mixedcase */\ninterface Deposit {\n    function add_liquidity(uint256[2] calldata, uint256) external;\n    function add_liquidity(uint256[3] calldata, uint256) external;\n    function add_liquidity(uint256[4] calldata, uint256) external;\n    function remove_liquidity_one_coin(uint256, int128, uint256, bool) external;\n}\n/* solhint-enable func-name-mixedcase */\n\n\n/**\n * @title Interactive adapter for Curve protocol (liquidity).\n * @dev Implementation of CurveInteractiveAdapter abstract contract.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract CurveAssetInteractiveAdapter is CurveInteractiveAdapter, ERC20ProtocolAdapter {\n    using SafeERC20 for ERC20;\n\n    address internal constant REGISTRY = 0x86A1755BA805ecc8B0608d56c22716bd1d4B68A8;\n\n    /**\n     * @notice Deposits tokens to the Curve pool (pair).\n     * @param tokenAmounts Array with one element - TokenAmount struct with\n     * underlying token address, underlying token amount to be deposited, and amount type.\n     * @param data ABI-encoded additional parameters:\n     *     - crvToken - curve token address.\n     * @return tokensToBeWithdrawn Array with tokens sent back.\n     * @dev Implementation of InteractiveAdapter function.\n     */\n    function deposit(\n        TokenAmount[] calldata tokenAmounts,\n        bytes calldata data\n    )\n        external\n        payable\n        override\n        returns (address[] memory tokensToBeWithdrawn)\n    {\n        require(tokenAmounts.length == 1, \"CLIA: should be 1 tokenAmount[1]\");\n\n        address token = tokenAmounts[0].token;\n        uint256 amount = getAbsoluteAmountDeposit(tokenAmounts[0]);\n\n        address crvToken = abi.decode(data, (address));\n        tokensToBeWithdrawn = new address[](1);\n        tokensToBeWithdrawn[0] = crvToken;\n\n        PoolInfo memory poolInfo = CurveRegistry(REGISTRY).getPoolInfo(crvToken);\n        uint256 totalCoins = poolInfo.totalCoins;\n        address callee = poolInfo.deposit;\n\n        int128 tokenIndex = getTokenIndex(token);\n        require(\n            Stableswap(poolInfo.swap).underlying_coins(tokenIndex) == token,\n            \"CLIA: bad crvToken/token\"\n        );\n\n        uint256[] memory inputAmounts = new uint256[](totalCoins);\n        for (uint256 i = 0; i < totalCoins; i++) {\n            inputAmounts[i] = i == uint256(tokenIndex) ? amount : 0;\n        }\n\n        ERC20(token).safeApprove(\n            callee,\n            amount,\n            \"CLIA[1]\"\n        );\n\n        if (totalCoins == 2) {\n            try Deposit(callee).add_liquidity(\n                [inputAmounts[0], inputAmounts[1]],\n                0\n            ) { // solhint-disable-line no-empty-blocks\n            } catch {\n                revert(\"CLIA: deposit fail[1]\");\n            }\n        } else if (totalCoins == 3) {\n            try Deposit(callee).add_liquidity(\n                [inputAmounts[0], inputAmounts[1], inputAmounts[2]],\n                0\n            ) { // solhint-disable-line no-empty-blocks\n            } catch {\n                revert(\"CLIA: deposit fail[2]\");\n            }\n        } else if (totalCoins == 4) {\n            try Deposit(callee).add_liquidity(\n                [inputAmounts[0], inputAmounts[1], inputAmounts[2], inputAmounts[3]],\n                0\n            ) { // solhint-disable-line no-empty-blocks\n            } catch {\n                revert(\"CLIA: deposit fail[3]\");\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraws tokens from the Curve pool.\n     * @param tokenAmounts Array with one element - TokenAmount struct with\n     * Curve token address, Curve token amount to be redeemed, and amount type.\n     * @param data ABI-encoded additional parameters:\n     *     - toToken - destination token address (one of those used in pool).\n     * @return tokensToBeWithdrawn Array with one element - destination token address.\n     * @dev Implementation of InteractiveAdapter function.\n     */\n    function withdraw(\n        TokenAmount[] calldata tokenAmounts,\n        bytes calldata data\n    )\n        external\n        payable\n        override\n        returns (address[] memory tokensToBeWithdrawn)\n    {\n        require(tokenAmounts.length == 1, \"CLIA: should be 1 tokenAmount[2]\");\n        \n        address token = tokenAmounts[0].token;\n        uint256 amount = getAbsoluteAmountWithdraw(tokenAmounts[0]);\n        address toToken = abi.decode(data, (address));\n\n        tokensToBeWithdrawn = new address[](1);\n        tokensToBeWithdrawn[0] = toToken;\n\n        PoolInfo memory poolInfo = CurveRegistry(REGISTRY).getPoolInfo(token);\n        address swap = poolInfo.swap;\n        address callee = poolInfo.deposit;\n\n        int128 tokenIndex = getTokenIndex(toToken);\n        require(\n            Stableswap(swap).underlying_coins(tokenIndex) == toToken,\n            \"CLIA: bad toToken/token\"\n        );\n\n        ERC20(token).safeApprove(\n            callee,\n            amount,\n            \"CLIA[2]\"\n        );\n\n        try Deposit(callee).remove_liquidity_one_coin(\n            amount,\n            tokenIndex,\n            0,\n            true\n        ) { // solhint-disable-line no-empty-blocks\n        } catch {\n            revert(\"CLIA: withdraw fail\");\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/shared/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/shared/SafeERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\n\nimport \"./ERC20.sol\";\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token contract\n * returns false). Tokens that return no value (and instead revert or throw on failure)\n * are also supported, non-reverting calls are assumed to be successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 value,\n        string memory location\n    )\n        internal\n    {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.transfer.selector,\n                to,\n                value\n            ),\n            \"transfer\",\n            location\n        );\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value,\n        string memory location\n    )\n        internal\n    {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.transferFrom.selector,\n                from,\n                to,\n                value\n            ),\n            \"transferFrom\",\n            location\n        );\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address spender,\n        uint256 value,\n        string memory location\n    )\n        internal\n    {\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: bad approve call\"\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                value\n            ),\n            \"approve\",\n            location\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\n     * relaxing the requirement on the return value: the return value is optional\n     * (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     * @param location Location of the call (for debug).\n     */\n    function callOptionalReturn(\n        ERC20 token,\n        bytes memory data,\n        string memory functionName,\n        string memory location\n    )\n        private\n    {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking\n        // mechanism, since we're implementing it ourselves.\n\n        // We implement two-steps call as callee is a contract is a responsibility of a caller.\n        //  1. The call itself is made, and success asserted\n        //  2. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(\n            success,\n            string(\n                abi.encodePacked(\n                    \"SafeERC20: \",\n                    functionName,\n                    \" failed in \",\n                    location\n                )\n            )\n        );\n\n        if (returndata.length > 0) { // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                string(\n                    abi.encodePacked(\n                        \"SafeERC20: \",\n                        functionName,\n                        \" returned false in \",\n                        location\n                    )\n                )\n            );\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/shared/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\n\n// The struct consists of AbsoluteTokenAmount structs for\n// (base) token and its underlying tokens (if any).\nstruct FullAbsoluteTokenAmount {\n    AbsoluteTokenAmountMeta base;\n    AbsoluteTokenAmountMeta[] underlying;\n}\n\n\n// The struct consists of AbsoluteTokenAmount struct\n// with token address and absolute amount\n// and ERC20Metadata struct with ERC20-style metadata.\n// NOTE: 0xEeee...EEeE address is used for ETH.\nstruct AbsoluteTokenAmountMeta {\n    AbsoluteTokenAmount absoluteTokenAmount;\n    ERC20Metadata erc20metadata;\n}\n\n\n// The struct consists of ERC20-style token metadata.\nstruct ERC20Metadata {\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\n// The struct consists of protocol adapter's name\n// and array of AbsoluteTokenAmount structs\n// with token addresses and absolute amounts.\nstruct AdapterBalance {\n    bytes32 protocolAdapterName;\n    AbsoluteTokenAmount[] absoluteTokenAmounts;\n}\n\n\n// The struct consists of token address\n// and its absolute amount.\nstruct AbsoluteTokenAmount {\n    address token;\n    uint256 amount;\n}\n\n\n// The struct consists of token address,\n// and price per full share (1e18).\nstruct Component {\n    address token;\n    uint256 rate;\n}\n\n\n//=============================== Interactive Adapters Structs ====================================\n\n\nstruct TransactionData {\n    Action[] actions;\n    TokenAmount[] inputs;\n    Fee fee;\n    AbsoluteTokenAmount[] requiredOutputs;\n    uint256 nonce;\n}\n\n\nstruct Action {\n    bytes32 protocolAdapterName;\n    ActionType actionType;\n    TokenAmount[] tokenAmounts;\n    bytes data;\n}\n\n\nstruct TokenAmount {\n    address token;\n    uint256 amount;\n    AmountType amountType;\n}\n\n\nstruct Fee {\n    uint256 share;\n    address beneficiary;\n}\n\n\nenum ActionType { None, Deposit, Withdraw }\n\n\nenum AmountType { None, Relative, Absolute }\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ERC20ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../shared/ERC20.sol\";\nimport { ProtocolAdapter } from \"./ProtocolAdapter.sol\";\n\n\n/**\n * @title Adapter for any protocol with ERC20 interface.\n * @dev Implementation of ProtocolAdapter abstract contract.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract ERC20ProtocolAdapter is ProtocolAdapter {\n\n    /**\n     * @return Amount of tokens held by the given account.\n     * @dev Implementation of ProtocolAdapter abstract contract function.\n     */\n    function getBalance(\n        address token,\n        address account\n    )\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return ERC20(token).balanceOf(account);\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter abstract contract.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\nabstract contract ProtocolAdapter {\n\n    /**\n     * @dev MUST return amount and type of the given token\n     * locked on the protocol by the given account.\n     */\n    function getBalance(\n        address token,\n        address account\n    )\n        public\n        view\n        virtual\n        returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/curve/CurveRegistry.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport { Ownable } from \"../../core/Ownable.sol\";\n\n\nstruct PoolInfo {\n    address swap;       // stableswap contract address.\n    address deposit;    // deposit contract address.\n    uint256 totalCoins; // Number of coins used in stableswap contract.\n    string name;        // Pool name (\"... Pool\").\n}\n\n\n/**\n * @title Registry for Curve contracts.\n * @dev Implements two getters - getSwapAndTotalCoins(address) and getName(address).\n * @notice Call getSwapAndTotalCoins(token) and getName(address) function and get address,\n * coins number, and name of stableswap contract for the given token address.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract CurveRegistry is Ownable {\n\n    mapping (address => PoolInfo) internal poolInfo_;\n\n    function setPoolsInfo(\n        address[] memory tokens,\n        PoolInfo[] memory poolsInfo\n    )\n        external\n        onlyOwner\n    {\n        uint256 length = tokens.length;\n        for (uint256 i = 0; i < length; i++) {\n            setPoolInfo(tokens[i], poolsInfo[i]);\n        }\n    }\n\n    function setPoolInfo(\n        address token,\n        PoolInfo memory poolInfo\n    )\n        internal\n    {\n        poolInfo_[token] = poolInfo;\n    }\n\n    function getPoolInfo(address token) external view returns (PoolInfo memory) {\n        return poolInfo_[token];\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/core/Ownable.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\n\nabstract contract Ownable {\n\n    modifier onlyOwner {\n        require(msg.sender == owner_, \"O: only owner\");\n        _;\n    }\n\n    modifier onlyPendingOwner {\n        require(msg.sender == pendingOwner_, \"O: only pending owner\");\n        _;\n    }\n\n    address private owner_;\n    address private pendingOwner_;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @notice Initializes owner variable with msg.sender address.\n     */\n    constructor() {\n        owner_ = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @notice Sets pending owner to the desired address.\n     * The function is callable only by the owner.\n     */\n    function proposeOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"O: empty newOwner\");\n        require(newOwner != owner_, \"O: equal to owner_\");\n        require(newOwner != pendingOwner_, \"O: equal to pendingOwner_\");\n        pendingOwner_ = newOwner;\n    }\n\n    /**\n     * @notice Transfers ownership to the pending owner.\n     * The function is callable only by the pending owner.\n     */\n    function acceptOwnership() external onlyPendingOwner {\n        emit OwnershipTransferred(owner_, msg.sender);\n        owner_ = msg.sender;\n        delete pendingOwner_;\n    }\n\n    /**\n     * @return Owner of the contract.\n     */\n    function owner() external view returns (address) {\n        return owner_;\n    }\n\n    /**\n     * @return Pending owner of the contract.\n     */\n    function pendingOwner() external view returns (address) {\n        return pendingOwner_;\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/interactiveAdapters/curve/CurveInteractiveAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport { InteractiveAdapter } from \"../InteractiveAdapter.sol\";\n\n\n/**\n * @title Interactive adapter for Curve protocol (base contract).\n * @dev Implementation of InteractiveAdapter abstract contract.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\nabstract contract CurveInteractiveAdapter is InteractiveAdapter {\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address internal constant TUSD = 0x0000000000085d4780B73119b644AE5ecd22b376;\n    address internal constant BUSD = 0x4Fabb145d64652a948d72533023f6E7A623C7C53;\n    address internal constant SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\n    address internal constant PAX = 0x8E870D67F660D95d5be530380D0eC0bd388289E1;\n    address internal constant RENBTC = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant SBTC = 0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6;\n    address internal constant HBTC = 0x0316EB71485b0Ab14103307bf65a021042c6d380;\n\n    function getTokenIndex(address token) internal pure returns (int128) {\n        if (token == DAI || token == RENBTC || token == HBTC) {\n            return int128(0);\n        } else if (token == USDC || token == WBTC) {\n            return int128(1);\n        } else if (token == USDT || token == SBTC) {\n            return int128(2);\n        } else if (token == TUSD || token == BUSD || token == SUSD || token == PAX) {\n            return int128(3);\n        } else {\n            revert(\"CIA: bad token\");\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/interactiveAdapters/InteractiveAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\npragma experimental ABIEncoderV2;\n\nimport { ProtocolAdapter } from \"../adapters/ProtocolAdapter.sol\";\nimport { TokenAmount, AmountType } from \"../shared/Structs.sol\";\nimport { ERC20 } from \"../shared/ERC20.sol\";\n\n\n/**\n * @title Base contract for interactive protocol adapters.\n * @dev deposit() and withdraw() functions MUST be implemented\n * as well as all the functions from ProtocolAdapter abstract contract.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\nabstract contract InteractiveAdapter is ProtocolAdapter {\n\n    uint256 internal constant DELIMITER = 1e18;\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /**\n     * @dev The function must deposit assets to the protocol.\n     * @return MUST return assets to be sent back to the `msg.sender`.\n     */\n    function deposit(\n        TokenAmount[] calldata tokenAmounts,\n        bytes calldata data\n    )\n        external\n        payable\n        virtual\n        returns (address[] memory);\n\n    /**\n     * @dev The function must withdraw assets from the protocol.\n     * @return MUST return assets to be sent back to the `msg.sender`.\n     */\n    function withdraw(\n        TokenAmount[] calldata tokenAmounts,\n        bytes calldata data\n    )\n        external\n        payable\n        virtual\n        returns (address[] memory);\n\n    function getAbsoluteAmountDeposit(\n        TokenAmount calldata tokenAmount\n    )\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        address token = tokenAmount.token;\n        uint256 amount = tokenAmount.amount;\n        AmountType amountType = tokenAmount.amountType;\n\n        require(\n            amountType == AmountType.Relative || amountType == AmountType.Absolute,\n            \"IA: bad amount type\"\n        );\n        if (amountType == AmountType.Relative) {\n            require(amount <= DELIMITER, \"IA: bad amount\");\n\n            uint256 balance;\n            if (token == ETH) {\n                balance = address(this).balance;\n            } else {\n                balance = ERC20(token).balanceOf(address(this));\n            }\n\n            if (amount == DELIMITER) {\n                return balance;\n            } else {\n                return mul(balance, amount) / DELIMITER;\n            }\n        } else {\n            return amount;\n        }\n    }\n\n    function getAbsoluteAmountWithdraw(\n        TokenAmount calldata tokenAmount\n    )\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        address token = tokenAmount.token;\n        uint256 amount = tokenAmount.amount;\n        AmountType amountType = tokenAmount.amountType;\n\n        require(\n            amountType == AmountType.Relative || amountType == AmountType.Absolute,\n            \"IA: bad amount type\"\n        );\n        if (amountType == AmountType.Relative) {\n            require(amount <= DELIMITER, \"IA: bad amount\");\n\n            uint256 balance = getBalance(token, address(this));\n            if (amount == DELIMITER) {\n                return balance;\n            } else {\n                return mul(balance, amount) / DELIMITER;\n            }\n        } else {\n            return amount;\n        }\n    }\n\n    function mul(\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"IA: mul overflow\");\n\n        return c;\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/interfaces/Stableswap.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.7.1;\n\n\n/**\n * @dev Stableswap contract interface.\n * The Stableswap contract is available here\n * github.com/curvefi/curve-contract/blob/compounded/vyper/stableswap.vy.\n */\ninterface Stableswap {\n    /* solhint-disable-next-line func-name-mixedcase */\n    function underlying_coins(int128) external view returns (address);\n    function exchange_underlying(int128, int128, uint256, uint256) external;\n    function get_dy_underlying(int128, int128, uint256) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}