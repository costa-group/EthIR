{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/curve/CurveTokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { TokenMetadata, Component } from \"../../Structs.sol\";\nimport { TokenAdapter } from \"../TokenAdapter.sol\";\n\n/**\n * @dev CurveRegistry contract interface.\n * Only the functions required for CurveTokenAdapter contract are added.\n * The CurveRegistry contract is available here\n * github.com/zeriontech/defi-sdk/blob/master/contracts/adapters/curve/CurveRegistry.sol.\n */\ninterface CurveRegistry {\n    function getSwapAndTotalCoins(address) external view returns (address, uint256);\n    function getName(address) external view returns (string memory);\n}\n\n\n/**\n * @dev stableswap contract interface.\n * Only the functions required for CurveTokenAdapter contract are added.\n * The stableswap contract is available here\n * github.com/curvefi/curve-contract/blob/compounded/vyper/stableswap.vy.\n */\n// solhint-disable-next-line contract-name-camelcase\ninterface stableswap {\n    function coins(int128) external view returns (address);\n    function coins(uint256) external view returns (address);\n    function balances(int128) external view returns (uint256);\n    function balances(uint256) external view returns (uint256);\n}\n\n\n/**\n * @title Token adapter for Curve pool tokens.\n * @dev Implementation of TokenAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract CurveTokenAdapter is TokenAdapter {\n\n    address internal constant REGISTRY = 0x86A1755BA805ecc8B0608d56c22716bd1d4B68A8;\n\n    address internal constant CDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n    address internal constant CUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\n    address internal constant YDAIV2 = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01;\n    address internal constant YUSDCV2 = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e;\n    address internal constant YUSDTV2 = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D;\n    address internal constant YTUSDV2 = 0x73a052500105205d34Daf004eAb301916DA8190f;\n    address internal constant YDAIV3 = 0xC2cB1040220768554cf699b0d863A3cd4324ce32;\n    address internal constant YUSDCV3 = 0x26EA744E5B887E5205727f55dFBE8685e3b21951;\n    address internal constant YUSDTV3 = 0xE6354ed5bC4b393a5Aad09f21c46E101e692d447;\n    address internal constant YBUSDV3 = 0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE;\n    address internal constant YCDAI = 0x99d1Fa417f94dcD62BfE781a1213c092a47041Bc;\n    address internal constant YCUSDC = 0x9777d7E2b60bB01759D0E2f8be2095df444cb07E;\n    address internal constant YCUSDT = 0x1bE5d71F2dA660BFdee8012dDc58D024448A0A59;\n\n    address internal constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address internal constant HBTC_CRV = 0xb19059ebb43466C323583928285a49f558E572Fd;\n\n    /**\n     * @return TokenMetadata struct with ERC20-style token info.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n        return TokenMetadata({\n            token: token,\n            name: getPoolName(token),\n            symbol: ERC20(token).symbol(),\n            decimals: ERC20(token).decimals()\n        });\n    }\n\n    /**\n     * @return Array of Component structs with underlying tokens rates for the given token.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getComponents(address token) external view override returns (Component[] memory) {\n        (address swap, uint256 totalCoins) = CurveRegistry(REGISTRY).getSwapAndTotalCoins(token);\n        Component[] memory underlyingComponents= new Component[](totalCoins);\n\n        address underlyingToken;\n        if (token == THREE_CRV || token == HBTC_CRV) {\n            for (uint256 i = 0; i < totalCoins; i++) {\n                underlyingToken = stableswap(swap).coins(i);\n                underlyingComponents[i] = Component({\n                    token: underlyingToken,\n                    tokenType: getTokenType(underlyingToken),\n                    rate: stableswap(swap).balances(i) * 1e18 / ERC20(token).totalSupply()\n                });\n            }\n        } else {\n            for (uint256 i = 0; i < totalCoins; i++) {\n                underlyingToken = stableswap(swap).coins(int128(i));\n                underlyingComponents[i] = Component({\n                    token: underlyingToken,\n                    tokenType: getTokenType(underlyingToken),\n                    rate: stableswap(swap).balances(int128(i)) * 1e18 / ERC20(token).totalSupply()\n                });\n            }\n        }\n\n        return underlyingComponents;\n    }\n\n    /**\n     * @return Pool name.\n     */\n    function getPoolName(address token) internal view returns (string memory) {\n        return CurveRegistry(REGISTRY).getName(token);\n    }\n\n    function getTokenType(address token) internal pure returns (string memory) {\n        if (token == CDAI || token == CUSDC) {\n            return \"CToken\";\n        } else if (\n            token == YDAIV2 ||\n            token == YUSDCV2 ||\n            token == YUSDTV2 ||\n            token == YTUSDV2 ||\n            token == YDAIV3 ||\n            token == YUSDCV3 ||\n            token == YUSDTV3 ||\n            token == YBUSDV3 ||\n            token == YCDAI ||\n            token == YCUSDC ||\n            token == YCUSDT\n        ) {\n            return \"YToken\";\n        } else {\n            return \"ERC20\";\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\nstruct ProtocolBalance {\n    ProtocolMetadata metadata;\n    AdapterBalance[] adapterBalances;\n}\n\n\nstruct ProtocolMetadata {\n    string name;\n    string description;\n    string websiteURL;\n    string iconURL;\n    uint256 version;\n}\n\n\nstruct AdapterBalance {\n    AdapterMetadata metadata;\n    FullTokenBalance[] balances;\n}\n\n\nstruct AdapterMetadata {\n    address adapterAddress;\n    string adapterType; // \"Asset\", \"Debt\"\n}\n\n\n// token and its underlying tokens (if exist) balances\nstruct FullTokenBalance {\n    TokenBalance base;\n    TokenBalance[] underlying;\n}\n\n\nstruct TokenBalance {\n    TokenMetadata metadata;\n    uint256 amount;\n}\n\n\n// ERC20-style token metadata\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\nstruct TokenMetadata {\n    address token;\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\nstruct Component {\n    address token;\n    string tokenType;  // \"ERC20\" by default\n    uint256 rate;  // price per full share (1e18)\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/TokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { TokenMetadata, Component } from \"../Structs.sol\";\n\n\n/**\n * @title Token adapter interface.\n * @dev getMetadata() and getComponents() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface TokenAdapter {\n\n    /**\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n     * struct TokenMetadata {\n     *     address token;\n     *     string name;\n     *     string symbol;\n     *     uint8 decimals;\n     * }\n     */\n    function getMetadata(address token) external view returns (TokenMetadata memory);\n\n    /**\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n     * struct Component {\n     *     address token;    // Address of token contract\n     *     string tokenType; // Token type (\"ERC20\" by default)\n     *     uint256 rate;     // Price per share (1e18)\n     * }\n     */\n    function getComponents(address token) external view returns (Component[] memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}