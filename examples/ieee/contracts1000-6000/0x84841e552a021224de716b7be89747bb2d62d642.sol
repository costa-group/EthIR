{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IStableCoin.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\nabstract contract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n     function init(string memory name, string memory symbol) internal {\n        require(\n            keccak256(bytes(_symbol)) == keccak256(\"\"),\n            \"Init already Called!\"\n        );\n         _name = name;\n         _symbol = symbol;\n         _decimals = 18;\n     }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IStableCoin.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\ninterface IStableCoin {\n    function init(\n        string calldata name,\n        string calldata symbol,\n        address doubleProxy,\n        address[] calldata allowedPairs,\n        uint256[] calldata rebalanceRewardMultiplier,\n        uint256[] calldata timeWindows,\n        uint256[] calldata mintables\n    ) external;\n\n    function tierData() external view returns(uint256[] memory, uint256[] memory);\n\n    function availableToMint() external view returns(uint256);\n\n    function doubleProxy() external view returns (address);\n\n    function setDoubleProxy(address newDoubleProxy) external;\n\n    function allowedPairs() external view returns (address[] memory);\n\n    function setAllowedPairs(address[] calldata newAllowedPairs) external;\n\n    function rebalanceRewardMultiplier()\n        external\n        view\n        returns (uint256[] memory);\n\n    function differences() external view returns (uint256, uint256);\n\n    function calculateRebalanceByDebtReward(uint256 burnt)\n        external\n        view\n        returns (uint256);\n\n    function fromTokenToStable(address tokenAddress, uint256 amount)\n        external\n        view\n        returns (uint256);\n\n    function mint(\n        uint256 pairIndex,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) external returns (uint256);\n\n    function burn(\n        uint256 pairIndex,\n        uint256 pairAmount,\n        uint256 amount0,\n        uint256 amount1\n    ) external returns (uint256, uint256);\n\n    function rebalanceByCredit(\n        uint256 pairIndex,\n        uint256 pairAmount,\n        uint256 amount0,\n        uint256 amount1\n    ) external returns (uint256);\n\n    function rebalanceByDebt(uint256 amount) external returns(uint256);\n}\n\ninterface IDoubleProxy {\n    function proxy() external view returns (address);\n}\n\ninterface IMVDProxy {\n    function getToken() external view returns (address);\n\n    function getMVDFunctionalitiesManagerAddress()\n        external\n        view\n        returns (address);\n\n    function getMVDWalletAddress() external view returns (address);\n\n    function getStateHolderAddress() external view returns (address);\n\n    function submit(string calldata codeName, bytes calldata data)\n        external\n        payable\n        returns (bytes memory returnData);\n}\n\ninterface IMVDFunctionalitiesManager {\n    function isAuthorizedFunctionality(address functionality)\n        external\n        view\n        returns (bool);\n}\n\ninterface IStateHolder {\n    function getBool(string calldata varName) external view returns (bool);\n    function getUint256(string calldata varName) external view returns (uint256);\n}\n\ninterface IUniswapV2Router {\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n}\n\ninterface IUniswapV2Pair {\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"},"StableCoin.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./ERC20.sol\";\nimport \"./IStableCoin.sol\";\n\ncontract StableCoin is ERC20, IStableCoin {\n    address\n        private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    address private _doubleProxy;\n\n    address[] private _allowedPairs;\n\n    uint256[] private _rebalanceRewardMultiplier;\n\n    uint256[] private _timeWindows;\n\n    uint256[] private _mintables;\n\n    uint256 private _lastRedeemBlock;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address doubleProxy,\n        address[] memory allowedPairs,\n        uint256[] memory rebalanceRewardMultiplier,\n        uint256[] memory timeWindows,\n        uint256[] memory mintables\n    ) {\n        if (doubleProxy == address(0)) {\n            return;\n        }\n        init(\n            name,\n            symbol,\n            doubleProxy,\n            allowedPairs,\n            rebalanceRewardMultiplier,\n            timeWindows,\n            mintables\n        );\n    }\n\n    function init(\n        string memory name,\n        string memory symbol,\n        address doubleProxy,\n        address[] memory allowedPairs,\n        uint256[] memory rebalanceRewardMultiplier,\n        uint256[] memory timeWindows,\n        uint256[] memory mintables\n    ) public override {\n        super.init(name, symbol);\n        _doubleProxy = doubleProxy;\n        _allowedPairs = allowedPairs;\n        assert(rebalanceRewardMultiplier.length == 2);\n        _rebalanceRewardMultiplier = rebalanceRewardMultiplier;\n        assert(timeWindows.length == mintables.length);\n        _timeWindows = timeWindows;\n        _mintables = mintables;\n    }\n\n    function tierData()\n        public\n        override\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        return (_timeWindows, _mintables);\n    }\n\n    function availableToMint() public override view returns (uint256) {\n\n        uint256 mintable\n         = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        if(_timeWindows.length \u003e 0 \u0026\u0026 block.number \u003c _timeWindows[_timeWindows.length - 1]) {\n            for (uint256 i = 0; i \u003c _timeWindows.length; i++) {\n                if (block.number \u003c _timeWindows[i]) {\n                    mintable = _mintables[i];\n                    break;\n                }\n            }\n        }\n        uint256 minted = totalSupply();\n        return minted \u003e= mintable ? 0 : mintable - minted;\n    }\n\n    function doubleProxy() public override view returns (address) {\n        return _doubleProxy;\n    }\n\n    function setDoubleProxy(address newDoubleProxy)\n        public\n        override\n        _byCommunity\n    {\n        _doubleProxy = newDoubleProxy;\n    }\n\n    function allowedPairs() public override view returns (address[] memory) {\n        return _allowedPairs;\n    }\n\n    function setAllowedPairs(address[] memory newAllowedPairs)\n        public\n        override\n        _byCommunity\n    {\n        _allowedPairs = newAllowedPairs;\n    }\n\n    function rebalanceRewardMultiplier()\n        public\n        override\n        view\n        returns (uint256[] memory)\n    {\n        return _rebalanceRewardMultiplier;\n    }\n\n    function differences()\n        public\n        override\n        view\n        returns (uint256 credit, uint256 debt)\n    {\n        uint256 totalSupply = totalSupply();\n        uint256 effectiveAmount = 0;\n        for (uint256 i = 0; i \u003c _allowedPairs.length; i++) {\n            (uint256 amount0, uint256 amount1) = _getPairAmount(i);\n            effectiveAmount += (amount0 + amount1);\n        }\n        credit = effectiveAmount \u003e totalSupply\n            ? effectiveAmount - totalSupply\n            : 0;\n        debt = totalSupply \u003e effectiveAmount\n            ? totalSupply - effectiveAmount\n            : 0;\n    }\n\n    function calculateRebalanceByDebtReward(uint256 burnt)\n        public\n        override\n        view\n        returns (uint256 reward)\n    {\n        if(burnt == 0) {\n            return 0;\n        }\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getToken();\n        reward = IUniswapV2Router(UNISWAP_V2_ROUTER).getAmountsOut(\n            burnt,\n            path\n        )[1];\n        reward =\n            (reward * _rebalanceRewardMultiplier[0]) /\n            _rebalanceRewardMultiplier[1];\n    }\n\n    function fromTokenToStable(address tokenAddress, uint256 amount)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        StableCoin token = StableCoin(tokenAddress);\n        uint256 remainingDecimals = decimals() - token.decimals();\n        uint256 result = amount == 0 ? token.balanceOf(address(this)) : amount;\n        if (remainingDecimals == 0) {\n            return result;\n        }\n        return result * 10**remainingDecimals;\n    }\n\n    function mint(\n        uint256 pairIndex,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 amount0Min,\n        uint256 amount1Min\n    ) public override _forAllowedPair(pairIndex) returns (uint256 minted) {\n        require(\n            IStateHolder(\n                IMVDProxy(IDoubleProxy(_doubleProxy).proxy())\n                    .getStateHolderAddress()\n            )\n                .getBool(\n                _toStateHolderKey(\n                    \"stablecoin.authorized\",\n                    _toString(address(this))\n                )\n            ),\n            \"Unauthorized action!\"\n        );\n        (address token0, address token1, ) = _getPairData(pairIndex);\n        _transferTokensAndCheckAllowance(token0, amount0);\n        _transferTokensAndCheckAllowance(token1, amount1);\n        (uint256 firstAmount, uint256 secondAmount, ) = _createPoolToken(\n            token0,\n            token1,\n            amount0,\n            amount1,\n            amount0Min,\n            amount1Min\n        );\n        minted =\n            fromTokenToStable(token0, firstAmount) +\n            fromTokenToStable(token1, secondAmount);\n        require(minted \u003c= availableToMint(), \"Minting amount is greater than availability\");\n        _mint(msg.sender, minted);\n    }\n\n    function burn(\n        uint256 pairIndex,\n        uint256 pairAmount,\n        uint256 amount0,\n        uint256 amount1\n    )\n        public\n        override\n        _forAllowedPair(pairIndex)\n        returns (uint256 removed0, uint256 removed1)\n    {\n        (address token0, address token1, address pairAddress) = _getPairData(pairIndex);\n        _checkAllowance(pairAddress, pairAmount);\n        (removed0, removed1) = IUniswapV2Router(UNISWAP_V2_ROUTER)\n            .removeLiquidity(\n            token0,\n            token1,\n            pairAmount,\n            amount0,\n            amount1,\n            msg.sender,\n            block.timestamp + 1000\n        );\n        _burn(\n            msg.sender,\n            fromTokenToStable(token0, removed0) +\n                fromTokenToStable(token1, removed1)\n        );\n    }\n\n    function rebalanceByCredit(\n        uint256 pairIndex,\n        uint256 pairAmount,\n        uint256 amount0,\n        uint256 amount1\n    ) public override _forAllowedPair(pairIndex) returns (uint256 redeemed) {\n        require(\n            block.number \u003e=\n            _lastRedeemBlock + \n            IStateHolder(\n                IMVDProxy(IDoubleProxy(_doubleProxy).proxy())\n                    .getStateHolderAddress()\n            )\n                .getUint256(\"stablecoin.rebalancebycredit.block.interval\"),\n            \"Unauthorized action!\"\n        );\n        _lastRedeemBlock = block.number;\n        (uint256 credit, ) = differences();\n        (address token0, address token1, address pairAddress) = _getPairData(pairIndex);\n        _checkAllowance(pairAddress, pairAmount);\n        (uint256 removed0, uint256 removed1) = IUniswapV2Router(\n            UNISWAP_V2_ROUTER\n        )\n            .removeLiquidity(\n            token0,\n            token1,\n            pairAmount,\n            amount0,\n            amount1,\n            IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress(),\n            block.timestamp + 1000\n        );\n        redeemed =\n            fromTokenToStable(token0, removed0) +\n            fromTokenToStable(token1, removed1);\n        require(redeemed \u003c= credit, \"Cannot redeem given pair amount\");\n    }\n\n    function rebalanceByDebt(uint256 amount) public override returns(uint256 reward) {\n        require(amount \u003e 0, \"You must insert a positive value\");\n        (, uint256 debt) = differences();\n        require(amount \u003c= debt, \"Cannot Burn this amount\");\n        _burn(msg.sender, amount);\n        IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).submit(\n            \"mintNewVotingTokensForStableCoin\",\n            abi.encode(\n                address(0),\n                0,\n                reward = calculateRebalanceByDebtReward(amount),\n                msg.sender\n            )\n        );\n    }\n\n    modifier _byCommunity() {\n        require(\n            IMVDFunctionalitiesManager(\n                IMVDProxy(IDoubleProxy(_doubleProxy).proxy())\n                    .getMVDFunctionalitiesManagerAddress()\n            )\n                .isAuthorizedFunctionality(msg.sender),\n            \"Unauthorized Action!\"\n        );\n        _;\n    }\n\n    modifier _forAllowedPair(uint256 pairIndex) {\n        require(\n            pairIndex \u003e= 0 \u0026\u0026 pairIndex \u003c _allowedPairs.length,\n            \"Unknown pair!\"\n        );\n        _;\n    }\n\n    function _getPairData(uint256 pairIndex)\n        private\n        view\n        returns (\n            address token0,\n            address token1,\n            address pairAddress\n        )\n    {\n        IUniswapV2Pair pair = IUniswapV2Pair(\n            pairAddress = _allowedPairs[pairIndex]\n        );\n        token0 = pair.token0();\n        token1 = pair.token1();\n    }\n\n    function _transferTokensAndCheckAllowance(\n        address tokenAddress,\n        uint256 value\n    ) private {\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), value);\n        _checkAllowance(tokenAddress, value);\n    }\n\n    function _checkAllowance(address tokenAddress, uint256 value) private {\n        IERC20 token = IERC20(tokenAddress);\n        if (token.allowance(address(this), UNISWAP_V2_ROUTER) \u003c= value) {\n            token.approve(\n                UNISWAP_V2_ROUTER,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            );\n        }\n    }\n\n    function _createPoolToken(\n        address firstToken,\n        address secondToken,\n        uint256 originalFirstAmount,\n        uint256 originalSecondAmount,\n        uint256 firstAmountMin,\n        uint256 secondAmountMin\n    )\n        private\n        returns (\n            uint256 firstAmount,\n            uint256 secondAmount,\n            uint256 poolAmount\n        )\n    {\n        (firstAmount, secondAmount, poolAmount) = IUniswapV2Router(\n            UNISWAP_V2_ROUTER\n        )\n            .addLiquidity(\n            firstToken,\n            secondToken,\n            originalFirstAmount,\n            originalSecondAmount,\n            firstAmountMin,\n            secondAmountMin,\n            address(this),\n            block.timestamp + 1000\n        );\n        if (firstAmount \u003c originalFirstAmount) {\n            IERC20(firstToken).transfer(\n                msg.sender,\n                originalFirstAmount - firstAmount\n            );\n        }\n        if (secondAmount \u003c originalSecondAmount) {\n            IERC20(secondToken).transfer(\n                msg.sender,\n                originalSecondAmount - secondAmount\n            );\n        }\n    }\n\n    function _getPairAmount(uint256 i)\n        private\n        view\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (address token0, address token1, address pairAddress) = _getPairData(i);\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\n        uint256 pairAmount = pair.balanceOf(address(this));\n        uint256 pairTotalSupply = pair.totalSupply();\n        (amount0, amount1, ) = pair.getReserves();\n        amount0 = fromTokenToStable(\n            token0,\n            (pairAmount * amount0) / pairTotalSupply\n        );\n        amount1 = fromTokenToStable(\n            token1,\n            (pairAmount * amount1) / pairTotalSupply\n        );\n    }\n\n    function _toStateHolderKey(string memory a, string memory b)\n        private\n        pure\n        returns (string memory)\n    {\n        return _toLowerCase(string(abi.encodePacked(a, \"_\", b)));\n    }\n\n    function _toString(address _addr) private pure returns (string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(42);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i \u003c 20; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] \u003e\u003e 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] \u0026 0x0f))];\n        }\n        return string(str);\n    }\n\n    function _toLowerCase(string memory str)\n        private\n        pure\n        returns (string memory)\n    {\n        bytes memory bStr = bytes(str);\n        for (uint256 i = 0; i \u003c bStr.length; i++) {\n            bStr[i] = bStr[i] \u003e= 0x41 \u0026\u0026 bStr[i] \u003c= 0x5A\n                ? bytes1(uint8(bStr[i]) + 0x20)\n                : bStr[i];\n        }\n        return string(bStr);\n    }\n}"}}