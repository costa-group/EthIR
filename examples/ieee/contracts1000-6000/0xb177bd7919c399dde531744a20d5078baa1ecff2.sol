{"Context.sol":{"content":"\r\npragma solidity \u003e0.6.0;\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n} // File: @openzeppelin/contracts/GSN/Context.sol"},"ERC20.sol":{"content":"\r\npragma solidity \u003e0.6.0;\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\ncontract ERC20 is Context {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) public _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public _allowances;\r\n    //need to go public\r\n    uint256 public _totalSupply;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) virtual internal  {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n} //_mint passed as virtual bc overriden in ERC20Capped.\r\n//======================================================================================================\r\n"},"IERC20.sol":{"content":"\r\npragma solidity \u003e0.6.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n} // File: @openzeppelin/contracts/token/ERC20/IERC20.sol"},"SafeMath.sol":{"content":"\r\npragma solidity \u003e0.6.0;\r\nlibrary SafeMath{\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n        /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n} // File: @openzeppelin/contracts/math/SafeMath.sol"},"YUGE.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e0.7.1;\r\n\r\nimport \u0027ERC20.sol\u0027;\r\n\r\ncontract $YUGE is ERC20 {\r\n\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address private _uniswap;\r\n    bool private _burning;\r\n    bool private _minting;\r\n    uint256 private _minted = 0;\r\n    uint256 private _burned = 0;\r\n    \r\n    address private owner;\r\n    address private holdings;\r\n    mapping(address =\u003e bool) private owners;\r\n    mapping(address =\u003e bool) private ownersVote;\r\n    mapping(address =\u003e bool) private stakingAddress;\r\n    uint256 private ownersCount = 0;\r\n    bool private openHoldings = false;\r\n    uint256 private yesToOpenHoldings = 10;\r\n    uint256 private _maxSupply;\r\n    mapping(address =\u003e uint256) private lastTransfer;\r\n    uint256 private votePercent;\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function uniswap() public view returns (address) {\r\n        return _uniswap;\r\n    }\r\n    function burning() public view returns (bool) {\r\n        return _burning;\r\n    }\r\n    function minting() public view returns (bool) {\r\n        return _minting;\r\n    }\r\n    function minted() public view returns (uint256) {\r\n        return _minted;\r\n    }\r\n    function burned() public view returns (uint256) {\r\n        return _burned;\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function maxSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n    function freeTransfer() public view returns (bool) {\r\n        if (block.timestamp \u003c (lastTransfer[_msgSender()] + 3 days) ){\r\n            return false;\r\n        } else{\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function howLongTillFreeTransfer() public view returns (uint256) {\r\n        if (block.timestamp \u003c (lastTransfer[_msgSender()] + 3 days)) {\r\n            return (lastTransfer[_msgSender()] + 3 days).sub(block.timestamp);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getHoldingsAddress() public view returns (address) {\r\n        return holdings;\r\n    }\r\n\r\n    function getOwnersCount() public view returns (uint256) {\r\n        return ownersCount;\r\n    }\r\n    \r\n    function getOpenHoldings() public view returns (bool) {\r\n        return openHoldings;\r\n    }\r\n    \r\n    function getOpenHoldingsVotes() public view returns (uint256) {\r\n        return yesToOpenHoldings;\r\n    }\r\n    \r\n    function getLastTransfer(address _address) public view returns (uint256) {\r\n        return lastTransfer[_address];\r\n    }\r\n    \r\n    function getVotePercent() public view returns (uint256) {\r\n        return votePercent; // IF GREATER THAN OR EQUAL TO 10, VOTE IS SUCCESSFUL\r\n    }\r\n    \r\n    constructor(uint256 _supply)\r\n    public {\r\n        _name = \"YUGE.WORKS\"; \r\n        _symbol = \"$YUGE\";\r\n        _decimals = 18;\r\n        _minting = true;\r\n        owner = _msgSender();\r\n        _maxSupply = _supply.mul(1e18);\r\n        _burning = false;\r\n        _mint(_msgSender(), (_supply.mul(1e18)).div(20)); // initial circ supply\r\n        _minted = _minted.add(_supply.mul(1e18).div(20));\r\n        holdings = _msgSender();\r\n        setOwners(_msgSender(), true);\r\n    }\r\n\r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool){\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount != 0, \"$YUGE: amount must be greater than 0\");\r\n        \r\n    if (_msgSender() == _uniswap || recipient == _uniswap || stakingAddress[_msgSender()]) {\r\n        \r\n        lastTransfer[_msgSender()] = block.timestamp;\r\n        lastTransfer[recipient] = block.timestamp;\r\n        \r\n        _transfer(_msgSender(), recipient, amount);\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    if(_msgSender() == holdings) {\r\n        require(openHoldings);\r\n    }\r\n    if (lastTransfer[_msgSender()] == 0) {\r\n        lastTransfer[_msgSender()] = block.timestamp;\r\n    }\r\n    if ((block.timestamp \u003c (lastTransfer[_msgSender()] + 3 days)) \u0026\u0026 _burning) {\r\n        lastTransfer[_msgSender()] = block.timestamp;\r\n        lastTransfer[recipient] = block.timestamp;\r\n        \r\n        _burn(_msgSender(), amount.mul(10).div(100));\r\n        _burned = _burned.add(amount.mul(10).div(100));\r\n        \r\n        _transfer(_msgSender(), holdings, amount.mul(10).div(100));\r\n        \r\n        _transfer(_msgSender(), recipient, amount.mul(80).div(100));\r\n        \r\n        emit Transfer(_msgSender(), address(0), amount.mul(10).div(100));\r\n        emit Transfer(_msgSender(), holdings, amount.mul(10).div(100));\r\n        emit Transfer(_msgSender(), recipient, amount.mul(80).div(100));\r\n        return true;\r\n    } else {\r\n        lastTransfer[_msgSender()] = block.timestamp;\r\n        lastTransfer[recipient] = block.timestamp;\r\n        \r\n        _transfer(_msgSender(), recipient, amount);\r\n        \r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n    function setStakingAddress(address _address, bool _bool) public virtual onlyOwner {\r\n        stakingAddress[_address] = _bool;\r\n    }\r\n\r\n    function setUniswap(address _address) public virtual onlyOwner {\r\n        _uniswap = _address;\r\n    }\r\n    \r\n    function mint(uint256 amount) public virtual onlyOwner {\r\n        require(openHoldings, \"$YUGE: openHoldings must be true\");\r\n        require(_minting == true, \"$YUGE: minting is finished\");\r\n        require(_msgSender() == owner, \"$YUGE: does not mint from owner address\");\r\n        require(_totalSupply + amount.mul(1e18) \u003c= maxSupply(), \"$YUGE: _totalSupply may not exceed maxSupply\");\r\n        require(_minted + amount.mul(1e18) \u003c= maxSupply(), \"$YUGE: _totalSupply may not exceed maxSupply\");\r\n        _mint(holdings, amount.mul(1e18));\r\n        _minted = _minted.add(amount.mul(1e18));\r\n    }\r\n    \r\n    function finishMinting() public onlyOwner() {\r\n        _minting = false;\r\n    }\r\n    function setBurning(bool _bool) public onlyOwner() {\r\n        _burning = _bool;\r\n    }\r\n    function revokeOwnership() public onlyOwner {\r\n        // ONLY TO BE USED IF MULTI-SIG WALLET NEVER IMPLEMENTED\r\n        owner = address(0);\r\n    }\r\n    modifier onlyOwners() {\r\n        require(owners[_msgSender()], \"onlyOwners\");\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"onlyOwner\");\r\n        _;\r\n    }\r\n    \r\n    function setOwners(address _address, bool _bool) public onlyOwner {\r\n        require(owners[_address] != _bool, \"$YUGE: Already set\");\r\n        if (owners[_address]) {\r\n            ownersCount = ownersCount.sub(10);\r\n            if(ownersVote[_address] == true) {\r\n                yesToOpenHoldings = yesToOpenHoldings.sub(10);\r\n                ownersVote[_address] = false;\r\n            }\r\n        } else {\r\n            ownersCount = ownersCount.add(10);\r\n            if(ownersVote[_address] == false) {\r\n                yesToOpenHoldings = yesToOpenHoldings.add(10);\r\n                ownersVote[_address] = true;\r\n            }\r\n            \r\n        }\r\n        if (yesToOpenHoldings.sub(ownersCount.mul(50).div(100)) \u003e 10) {\r\n            openHoldings = true;\r\n        } else {\r\n            openHoldings = false;\r\n        }\r\n        votePercent = yesToOpenHoldings.sub(ownersCount.mul(50).div(100));\r\n        owners[_address] = _bool;\r\n    }\r\n    \r\n    function setOwner(address _address) public onlyOwner {\r\n        newOwner( _address);\r\n        setOwners(_address, true);\r\n    }\r\n    \r\n    function newOwner(address _address) internal virtual {\r\n        owner = _address;\r\n    }\r\n    \r\n    function setHoldings(address _address) public onlyOwner {\r\n        holdings = _address;\r\n    }\r\n\r\n    function withdrawFromHoldings(address _address) public onlyOwner {\r\n        require(openHoldings, \"$YUGE: Holdings need to be enabled by the owners\");\r\n        transfer(_address, _balances[holdings]);\r\n    }\r\n    \r\n  function vote(bool _bool) public onlyOwners returns(bool) {\r\n    require(ownersVote[_msgSender()] != _bool, \"$YUGE: Already voted this way\");\r\n    ownersVote[_msgSender()] = _bool;\r\n    if (_bool == true) {\r\n        yesToOpenHoldings = yesToOpenHoldings.add(10);\r\n    } else {\r\n        yesToOpenHoldings = yesToOpenHoldings.sub(10);\r\n    }\r\n        if (yesToOpenHoldings.sub(ownersCount.mul(50).div(100)) \u003e 10) {\r\n        openHoldings = true;\r\n    } else {\r\n        openHoldings = false;\r\n    }\r\n    votePercent = yesToOpenHoldings.sub(ownersCount.mul(50).div(100));\r\n    return true;\r\n  }\r\n\r\n\r\n}"}}