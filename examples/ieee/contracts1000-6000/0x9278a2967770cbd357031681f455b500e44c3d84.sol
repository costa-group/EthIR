{"Dparam.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.5.0 \u003c=0.7.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Owned.sol\";\nimport \"./IDparam.sol\";\nimport \"./WhiteList.sol\";\n\ncontract Dparam is Owned, WhiteList, IDparam {\n    using SafeMath for uint256;\n\n    /// @notice Subscription ratio token -\u003e coin\n    uint256 public stakeRate = 35;\n    /// @notice The collateral rate of liquidation\n    uint256 public liquidationLine = 110;\n    /// @notice Redemption rate 0.3%\n    uint256 public feeRate = 3;\n\n    /// @notice Minimum number of COINS for the first time\n    uint256 public minMint = 100 * ONE;\n    uint256 constant ONE = 1e8;\n\n    /// @notice Reset fee event\n    event FeeRateEvent(uint256 feeRate);\n    /// @notice Reset liquidationLine event\n    event LiquidationLineEvent(uint256 liquidationRate);\n    /// @notice Reset minMint event\n    event MinMintEvent(uint256 minMint);\n\n    /**\n     * @notice Construct a new Dparam, owner by msg.sender\n     */\n    constructor() public Owned(msg.sender) {}\n\n    /**\n     * @notice Reset feeRate\n     * @param _feeRate New number of feeRate\n     */\n    function setFeeRate(uint256 _feeRate) external onlyWhiter {\n        feeRate = _feeRate;\n        emit FeeRateEvent(feeRate);\n    }\n\n    /**\n     * @notice Reset liquidationLine\n     * @param _liquidationLine New number of liquidationLine\n     */\n    function setLiquidationLine(uint256 _liquidationLine) external onlyWhiter {\n        liquidationLine = _liquidationLine;\n        emit LiquidationLineEvent(liquidationLine);\n    }\n\n    /**\n     * @notice Reset minMint\n     * @param _minMint New number of minMint\n     */\n    function setMinMint(uint256 _minMint) external onlyWhiter {\n        minMint = _minMint;\n        emit MinMintEvent(minMint);\n    }\n\n    /**\n     * @notice Check Is it below the clearing line\n     * @param price The token/usdt price\n     * @return Whether the clearing line has been no exceeded\n     */\n    function isLiquidation(uint256 price) external view returns (bool) {\n        return price.mul(stakeRate).mul(100) \u003c= liquidationLine.mul(ONE);\n    }\n\n    /**\n     * @notice Determine if the exchange value at the current rate is less than $7\n     * @param price The token/usdt price\n     * @return The value of Checking\n     */\n    function isNormal(uint256 price) external view returns (bool) {\n        return price.mul(stakeRate) \u003e= ONE.mul(7);\n    }\n}\n"},"IDparam.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.5.0 \u003c0.8.0;\n\ninterface IDparam {\n    event FeeRateEvent(uint256 feeRate);\n    event LiquidationLineEvent(uint256 liquidationRate);\n    event MinMintEvent(uint256 minMint);\n\n    function stakeRate() external view returns (uint256);\n\n    function liquidationLine() external view returns (uint256);\n\n    function feeRate() external view returns (uint256);\n\n    function minMint() external view returns (uint256);\n\n    function setFeeRate(uint256 _feeRate) external;\n\n    function setLiquidationLine(uint256 _liquidationLine) external;\n\n    function setMinMint(uint256 _minMint) external;\n\n    function isLiquidation(uint256 price) external view returns (bool);\n\n    function isNormal(uint256 price) external view returns (bool);\n}\n"},"Owned.sol":{"content":"pragma solidity ^0.5.16;\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(\n            msg.sender == nominatedOwner,\n            \"You must be nominated before you can accept ownership\"\n        );\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only the contract owner may perform this action\"\n        );\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"WhiteList.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.5.0 \u003c0.8.0;\n\nimport \"./Owned.sol\";\n\ncontract WhiteList is Owned {\n    /// @notice Users with permissions\n    mapping(address =\u003e uint256) public whiter;\n\n    /// @notice Append address into whiteList successevent\n    event AppendWhiter(address adder);\n\n    /// @notice Remove address into whiteList successevent\n    event RemoveWhiter(address remover);\n\n    /**\n     * @notice Construct a new WhiteList, default owner in whiteList\n     */\n    constructor() internal {\n        appendWhiter(owner);\n    }\n\n    modifier onlyWhiter() {\n        require(isWhiter(), \"WhiteList: msg.sender not in whilteList.\");\n        _;\n    }\n\n    /**\n     * @notice Only onwer can append address into whitelist\n     * @param account The address not added, can added to the whitelist\n     */\n    function appendWhiter(address account) public onlyOwner {\n        require(account != address(0), \"WhiteList: address not zero\");\n        require(\n            !isWhiter(account),\n            \"WhiteListe: the account exsit whilteList yet\"\n        );\n        whiter[account] = 1;\n        emit AppendWhiter(account);\n    }\n\n    /**\n     * @notice Only onwer can remove address into whitelist\n     * @param account The address in whitelist yet\n     */\n    function removeWhiter(address account) public onlyOwner {\n        require(\n            isWhiter(account),\n            \"WhiteListe: the account not exist whilteList\"\n        );\n        delete whiter[account];\n        emit RemoveWhiter(account);\n    }\n\n    /**\n     * @notice Check whether acccount in whitelist\n     * @param account Any address\n     */\n    function isWhiter(address account) public view returns (bool) {\n        return whiter[account] == 1;\n    }\n\n    /**\n     * @notice Check whether msg.sender in whitelist overrides.\n     */\n    function isWhiter() public view returns (bool) {\n        return isWhiter(msg.sender);\n    }\n}\n"}}