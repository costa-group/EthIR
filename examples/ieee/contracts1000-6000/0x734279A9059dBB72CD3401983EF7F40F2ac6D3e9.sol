{"normalizer.sol":{"content":"pragma solidity 0.5.17;\n\nimport \u0027./safeMath.sol\u0027;\n\ninterface Curve {\n    function get_virtual_price() external view returns (uint);\n}\n\ninterface Yearn {\n    function getPricePerFullShare() external view returns (uint);\n}\n\ninterface UnderlyingToken {\n    function decimals() external view returns (uint8);\n}\n\ninterface Compound {\n    function exchangeRateStored() external view returns (uint);\n    function underlying() external view returns (address);\n}\n\ninterface Cream {\n    function exchangeRateStored() external view returns (uint);\n    function underlying() external view returns (address);\n}\n\ncontract Normalizer {\n    using SafeMath for uint;\n\n    address public governance;\n    address public creamY;\n    mapping(address =\u003e bool) public native;\n    mapping(address =\u003e bool) public yearn;\n    mapping(address =\u003e bool) public curve;\n    mapping(address =\u003e address) public curveSwap;\n    mapping(address =\u003e bool) public vaults;\n    mapping(address =\u003e bool) public compound;\n    mapping(address =\u003e bool) public cream;\n    mapping(address =\u003e uint) public underlyingDecimals;\n\n    constructor() public {\n        governance = msg.sender;\n\n        native[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true; // USDT\n        native[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = true; // USDC\n        native[0x4Fabb145d64652a948d72533023f6E7A623C7C53] = true; // BUSD\n        native[0x0000000000085d4780B73119b644AE5ecd22b376] = true; // TUSD\n\n        yearn[0xACd43E627e64355f1861cEC6d3a6688B31a6F952] = true; // vault yDAI\n        yearn[0x37d19d1c4E1fa9DC47bD1eA12f742a0887eDa74a] = true; // vault yTUSD\n        yearn[0x597aD1e0c13Bfe8025993D9e79C69E1c0233522e] = true; // vault yUSDC\n        yearn[0x2f08119C6f07c006695E079AAFc638b8789FAf18] = true; // vault yUSDT\n\n        yearn[0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01] = true; // yDAI\n        yearn[0xd6aD7a6750A7593E092a9B218d66C0A814a3436e] = true; // yUSDC\n        yearn[0x83f798e925BcD4017Eb265844FDDAbb448f1707D] = true; // yUSDT\n        yearn[0x73a052500105205d34Daf004eAb301916DA8190f] = true; // yTUSD\n        yearn[0xF61718057901F84C4eEC4339EF8f0D86D2B45600] = true; // ySUSD\n\n        yearn[0xC2cB1040220768554cf699b0d863A3cd4324ce32] = true; // bDAI\n        yearn[0x26EA744E5B887E5205727f55dFBE8685e3b21951] = true; // bUSDC\n        yearn[0xE6354ed5bC4b393a5Aad09f21c46E101e692d447] = true; // bUSDT\n        yearn[0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE] = true; // bBUSD\n\n        curve[0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2] = true; // cCompound\n        curveSwap[0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2] = 0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56;\n        curve[0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8] = true; // cYearn\n        curveSwap[0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8] = 0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51;\n        curve[0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B] = true; // cBUSD\n        curveSwap[0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B] = 0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27;\n        curve[0xC25a3A3b969415c80451098fa907EC722572917F] = true; // cSUSD\n        curveSwap[0xC25a3A3b969415c80451098fa907EC722572917F] = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\n        curve[0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8] = true; // cPAX\n        curveSwap[0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8] = 0x06364f10B501e868329afBc005b3492902d6C763;\n\n        compound[0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643] = true; // cDAI\n        underlyingDecimals[0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643] = 1e18;\n        compound[0x39AA39c021dfbaE8faC545936693aC917d5E7563] = true; // cUSDC\n        underlyingDecimals[0x39AA39c021dfbaE8faC545936693aC917d5E7563] = 1e6;\n        compound[0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9] = true; // cUSDT\n        underlyingDecimals[0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9] = 1e6;\n\n        cream[0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322] = true; // crUSDC\n        underlyingDecimals[0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322] = 1e6;\n        cream[0x797AAB1ce7c01eB727ab980762bA88e7133d2157] = true; // crUSDT\n        underlyingDecimals[0x797AAB1ce7c01eB727ab980762bA88e7133d2157] = 1e6;\n        cream[0x1FF8CDB51219a8838b52E9cAc09b71e591BC998e] = true; // crBUSD\n        underlyingDecimals[0x1FF8CDB51219a8838b52E9cAc09b71e591BC998e] = 1e18;\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setCreamY(address _creamY) external {\n        require(msg.sender == governance, \"!governance\");\n        creamY = _creamY;\n    }\n\n    function getPrice(address token) external view returns (uint) {\n        if (native[token] || token == creamY) {\n            return 1e18;\n        } else if (yearn[token]) {\n            return Yearn(token).getPricePerFullShare();\n        } else if (curve[token]) {\n            return Curve(curveSwap[token]).get_virtual_price();\n        } else if (compound[token]) {\n            return getCompoundPrice(token);\n        } else if (cream[token]) {\n            return getCreamPrice(token);\n        } else {\n            return uint(0);\n        }\n    }\n\n    function getCompoundPrice(address token) public view returns (uint) {\n        address underlying = Compound(token).underlying();\n        uint8 decimals = UnderlyingToken(underlying).decimals();\n        return Compound(token).exchangeRateStored().mul(1e8).div(uint(10) ** decimals);\n    }\n\n    function getCreamPrice(address token) public view returns (uint) {\n        address underlying = Cream(token).underlying();\n        uint8 decimals = UnderlyingToken(underlying).decimals();\n        return Cream(token).exchangeRateStored().mul(1e8).div(uint(10) ** decimals);\n    }\n}\n"},"safeMath.sol":{"content":"pragma solidity 0.5.17;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint a, uint b) internal pure returns (uint) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        require(b \u003c= a, errorMessage);\n        uint c = a - b;\n\n        return c;\n    }\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint a, uint b) internal pure returns (uint) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint c = a / b;\n\n        return c;\n    }\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0);\n        uint256 c = a / b;\n        if(a % b != 0)\n            c = c + 1;\n        return c;\n    }\n}\n"}}