{"BerezkaTokenAdapterGovernance.sol":{"content":"// Copyright (C) 2020 Easy Chain. \u003chttps://easychain.tech\u003e\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { EnumerableSet } from \"./EnumerableSet.sol\";\nimport { Ownable } from \"./Ownable.sol\";\n\n/**\n * @dev BerezkaTokenAdapterGovernance contract.\n * Main function of this contract is to maintains a Structure of BerezkaDAO\n * @author Vasin Denis \u003cdenis.vasin@easychain.tech\u003e\n */\ncontract BerezkaTokenAdapterGovernance is Ownable() {\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev This is a set of plain assets (ERC20) used by DAO. \n    /// This list also include addresses of Uniswap/Balancer tokenized pools.\n    EnumerableSet.AddressSet private tokens;\n\n    /// @dev This is a set of debt protocol adapters that return debt in ETH\n    EnumerableSet.AddressSet private ethProtocols;\n\n    /// @dev This is a set of debt protocol adapters that return debt for ERC20 tokens\n    EnumerableSet.AddressSet private protocols;\n\n    /// @dev This is a mapping from Berezka DAO product to corresponding Vault addresses\n    mapping(address =\u003e address[]) private productVaults;\n\n    constructor(address[] memory _tokens, address[] memory _protocols, address[] memory _ethProtocols) public {\n        _add(protocols, _protocols);\n        _add(tokens, _tokens);\n        _add(ethProtocols, _ethProtocols);\n    }\n\n    // Modification functions (all only by owner)\n\n    function setProductVaults(address _product, address[] memory _vaults) public onlyOwner() {\n        require(_product != address(0), \"_product is 0\");\n        require(_vaults.length \u003e 0, \"_vaults.length should be \u003e 0\");\n\n        productVaults[_product] = _vaults;\n    }\n\n    function removeProduct(address _product) public onlyOwner() {\n        require(_product != address(0), \"_product is 0\");\n\n        delete productVaults[_product];\n    }\n\n    function addTokens(address[] memory _tokens) public onlyOwner() {\n        _add(tokens, _tokens);\n    }\n\n    function addProtocols(address[] memory _protocols) public onlyOwner() {\n        _add(protocols, _protocols);\n    }\n\n    function removeTokens(address[] memory _tokens) public onlyOwner() {\n        _remove(tokens, _tokens);\n    }\n\n    function removeProtocols(address[] memory _protocols) public onlyOwner() {\n        _remove(protocols, _protocols);\n    }\n\n    function removeEthProtocols(address[] memory _ethProtocols) public onlyOwner() {\n        _remove(ethProtocols, _ethProtocols);\n    }\n\n    // View functions\n\n    function listTokens() external view returns (address[] memory) {\n        return _list(tokens);\n    }\n\n    function listProtocols() external view returns (address[] memory) {\n        return _list(protocols);\n    }\n\n    function listEthProtocols() external view returns (address[] memory) {\n        return _list(ethProtocols);\n    }\n\n    function getVaults(address _token) external view returns (address[] memory) {\n        return productVaults[_token];\n    }\n\n    // Internal functions\n\n    function _add(EnumerableSet.AddressSet storage _set, address[] memory _addresses) internal {\n        for (uint i = 0; i \u003c _addresses.length; i++) {\n            _set.add(_addresses[i]);\n        }\n    }\n\n    function _remove(EnumerableSet.AddressSet storage _set, address[] memory _addresses) internal {\n        for (uint i = 0; i \u003c _addresses.length; i++) {\n            _set.remove(_addresses[i]);\n        }\n    }\n\n    function _list(EnumerableSet.AddressSet storage _set) internal view returns(address[] memory) {\n        address[] memory result = new address[](_set.length());\n        for (uint i = 0; i \u003c _set.length(); i++) {\n            result[i] = _set.at(i);\n        }\n        return result;\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.5;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}"},"Ownable.sol":{"content":"// Copyright (C) 2020 Zerion Inc. \u003chttps://zerion.io\u003e\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\nabstract contract Ownable {\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"O: onlyOwner function!\");\n        _;\n    }\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @notice Initializes owner variable with msg.sender address.\n     */\n    constructor() internal {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @notice Transfers ownership to the desired address.\n     * The function is callable only by the owner.\n     */\n    function transferOwnership(address _owner) external onlyOwner {\n        require(_owner != address(0), \"O: new owner is the zero address!\");\n        emit OwnershipTransferred(owner, _owner);\n        owner = _owner;\n    }\n}\n"}}