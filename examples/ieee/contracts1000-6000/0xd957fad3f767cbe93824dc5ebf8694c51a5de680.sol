{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/kimchi/KimchiStakingAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\n\n\n/**\n * @dev UserInfo struct from KimchiChef contract.\n * The KimchiChef contract is available here\n * github.com/sushiswap/sushiswap/blob/master/contracts/KimchiChef.sol.\n */\nstruct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n}\n\n\n/**\n * @dev PoolInfo struct from KimchiChef contract.\n * The KimchiChef contract is available here\n * github.com/sushiswap/sushiswap/blob/master/contracts/KimchiChef.sol.\n */\nstruct PoolInfo {\n    address lpToken;\n    uint256 allocPoint;\n    uint256 lastRewardBlock;\n    uint256 accSushiPerShare;\n}\n\n\n/**\n * @dev KimchiChef (forked KimchiChef) contract interface.\n * Only the functions required for SushiStakingAdapter contract are added.\n * The KimchiChef contract is available here\n * github.com/sushiswap/sushiswap/blob/master/contracts/KimchiChef.sol.\n */\ninterface KimchiChef {\n    function poolLength() external view returns (uint256);\n    function poolInfo(uint256) external view returns (PoolInfo memory);\n    function userInfo(uint256, address) external view returns (UserInfo memory);\n    function pendingKimchi(uint256, address) external view returns (uint256);\n}\n\n\n/**\n * @title Adapter for KIMCHI protocol.\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract KimchiStakingAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant SUSHI = 0x1E18821E69B9FAA8e6e75DFFe54E7E25754beDa0;\n    address internal constant KIMCHI_CHEF = 0x9Dd5b5c71842a4fD51533532E5470298BFA398fd;\n\n    /**\n     * @return Amount of SUSHI rewards / staked tokens for a given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        uint256 length = KimchiChef(KIMCHI_CHEF).poolLength();\n\n        if (token == SUSHI) {\n            uint256 totalRewards = 0;\n\n            for(uint256 i = 0; i < length; i++) {\n                totalRewards += KimchiChef(KIMCHI_CHEF).pendingKimchi(i, account);\n            }\n\n            return totalRewards;\n        } else {\n            for(uint256 i = 0; i < length; i++) {\n                UserInfo memory user = KimchiChef(KIMCHI_CHEF).userInfo(i, account);\n                PoolInfo memory pool = KimchiChef(KIMCHI_CHEF).poolInfo(i);\n\n                if (pool.lpToken == token) {\n                    return user.amount;\n                }\n            }\n\n            return 0;\n        }\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}