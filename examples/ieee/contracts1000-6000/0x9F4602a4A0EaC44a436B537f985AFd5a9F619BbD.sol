{"DocumentStore.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./Ownable.sol\";\n\ncontract DocumentStore is Ownable {\n  string public name;\n  string public version = \"2.3.0\";\n\n  /// A mapping of the document hash to the block number that was issued\n  mapping(bytes32 =\u003e uint256) public documentIssued;\n  /// A mapping of the hash of the claim being revoked to the revocation block number\n  mapping(bytes32 =\u003e uint256) public documentRevoked;\n\n  event DocumentIssued(bytes32 indexed document);\n  event DocumentRevoked(bytes32 indexed document);\n\n  constructor(string memory _name) public {\n    name = _name;\n  }\n\n  function issue(bytes32 document) public onlyOwner onlyNotIssued(document) {\n    documentIssued[document] = block.number;\n    emit DocumentIssued(document);\n  }\n\n  function bulkIssue(bytes32[] memory documents) public {\n    for (uint256 i = 0; i \u003c documents.length; i++) {\n      issue(documents[i]);\n    }\n  }\n\n  function getIssuedBlock(bytes32 document) public view onlyIssued(document) returns (uint256) {\n    return documentIssued[document];\n  }\n\n  function isIssued(bytes32 document) public view returns (bool) {\n    return (documentIssued[document] != 0);\n  }\n\n  function isIssuedBefore(bytes32 document, uint256 blockNumber) public view returns (bool) {\n    return documentIssued[document] != 0 \u0026\u0026 documentIssued[document] \u003c= blockNumber;\n  }\n\n  function revoke(bytes32 document) public onlyOwner onlyNotRevoked(document) returns (bool) {\n    documentRevoked[document] = block.number;\n    emit DocumentRevoked(document);\n  }\n\n  function bulkRevoke(bytes32[] memory documents) public {\n    for (uint256 i = 0; i \u003c documents.length; i++) {\n      revoke(documents[i]);\n    }\n  }\n\n  function isRevoked(bytes32 document) public view returns (bool) {\n    return documentRevoked[document] != 0;\n  }\n\n  function isRevokedBefore(bytes32 document, uint256 blockNumber) public view returns (bool) {\n    return documentRevoked[document] \u003c= blockNumber \u0026\u0026 documentRevoked[document] != 0;\n  }\n\n  modifier onlyIssued(bytes32 document) {\n    require(isIssued(document), \"Error: Only issued document hashes can be revoked\");\n    _;\n  }\n\n  modifier onlyNotIssued(bytes32 document) {\n    require(!isIssued(document), \"Error: Only hashes that have not been issued can be issued\");\n    _;\n  }\n\n  modifier onlyNotRevoked(bytes32 claim) {\n    require(!isRevoked(claim), \"Error: Hash has been revoked previously\");\n    _;\n  }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Returns true if the caller is the current owner.\n   */\n  function isOwner() public view returns (bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n"}}