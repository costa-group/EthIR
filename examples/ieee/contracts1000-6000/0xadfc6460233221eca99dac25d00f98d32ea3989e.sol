{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/core/ProtocolAdapterRegistry.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport { AdapterBalance, AbsoluteTokenAmount } from \"../shared/Structs.sol\";\nimport { ERC20 } from \"../shared/ERC20.sol\";\nimport { Ownable } from \"./Ownable.sol\";\nimport { ProtocolAdapterManager } from \"./ProtocolAdapterManager.sol\";\nimport { ProtocolAdapter } from \"../adapters/ProtocolAdapter.sol\";\n\n\n/**\n * @title Registry for protocol adapters.\n * @notice getBalances() function implements the main functionality.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract ProtocolAdapterRegistry is Ownable, ProtocolAdapterManager {\n\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /**\n     * @param account Address of the account.\n     * @return AdapterBalance array by the given account.\n     * @notice Zero values are filtered out!\n     */\n    function getBalances(\n        address account\n    )\n        external\n        view\n        returns (AdapterBalance[] memory)\n    {\n        // Get balances for all the adapters\n        AdapterBalance[] memory adapterBalances = getAdapterBalances(\n            _protocolAdapterNames,\n            account\n        );\n\n        // Declare temp variable and counters\n        AbsoluteTokenAmount[] memory currentAbsoluteTokenAmounts;\n        AbsoluteTokenAmount[] memory nonZeroAbsoluteTokenAmounts;\n        uint256 nonZeroAdaptersCounter;\n        uint256[] memory nonZeroTokensCounters;\n        uint256 adapterBalancesLength;\n        uint256 currentAbsoluteTokenAmountsLength;\n\n        // Reset counters\n        nonZeroTokensCounters = new uint256[](adapterBalances.length);\n        nonZeroAdaptersCounter = 0;\n        adapterBalancesLength = adapterBalances.length;\n\n        // Iterate over all the adapters' balances\n        for (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset counter\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            // Increment if token balance is positive\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                if (currentAbsoluteTokenAmounts[j].amount > 0) {\n                    nonZeroTokensCounters[i]++;\n                }\n            }\n\n            // Increment if at least one positive token balance\n            if (nonZeroTokensCounters[i] > 0) {\n                nonZeroAdaptersCounter++;\n            }\n        }\n\n        // Declare resulting variable\n        AdapterBalance[] memory nonZeroAdapterBalances;\n\n        // Reset resulting variable and counter\n        nonZeroAdapterBalances = new AdapterBalance[](nonZeroAdaptersCounter);\n        nonZeroAdaptersCounter = 0;\n\n        // Iterate over all the adapters' balances\n        for (uint256 i = 0; i < adapterBalancesLength; i++) {\n            // Skip if no positive token balances\n            if (nonZeroTokensCounters[i] == 0) {\n                continue;\n            }\n\n            // Fill temp variable\n            currentAbsoluteTokenAmounts = adapterBalances[i].absoluteTokenAmounts;\n\n            // Reset temp variable and counter\n            nonZeroAbsoluteTokenAmounts = new AbsoluteTokenAmount[](nonZeroTokensCounters[i]);\n            nonZeroTokensCounters[i] = 0;\n            currentAbsoluteTokenAmountsLength = currentAbsoluteTokenAmounts.length;\n\n            for (uint256 j = 0; j < currentAbsoluteTokenAmountsLength; j++) {\n                // Skip if balance is not positive\n                if (currentAbsoluteTokenAmounts[j].amount == 0) {\n                    continue;\n                }\n\n                // Else fill temp variable\n                nonZeroAbsoluteTokenAmounts[nonZeroTokensCounters[i]] = currentAbsoluteTokenAmounts[j];\n\n                // Increment counter\n                nonZeroTokensCounters[i]++;\n            }\n\n            // Fill resulting variable\n            nonZeroAdapterBalances[nonZeroAdaptersCounter] = AdapterBalance({\n                protocolAdapterName: adapterBalances[i].protocolAdapterName,\n                absoluteTokenAmounts: nonZeroAbsoluteTokenAmounts\n            });\n\n            // Increment counter\n            nonZeroAdaptersCounter++;\n        }\n\n        return nonZeroAdapterBalances;\n    }\n\n    /**\n     * @param protocolAdapterNames Array of the protocol adapters' names.\n     * @param account Address of the account.\n     * @return AdapterBalance array by the given parameters.\n     */\n    function getAdapterBalances(\n        bytes32[] memory protocolAdapterNames,\n        address account\n    )\n        public\n        view\n        returns (AdapterBalance[] memory)\n    {\n        uint256 length = protocolAdapterNames.length;\n        AdapterBalance[] memory adapterBalances = new AdapterBalance[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            adapterBalances[i] = getAdapterBalance(\n                protocolAdapterNames[i],\n                _protocolAdapterSupportedTokens[protocolAdapterNames[i]],\n                account\n            );\n        }\n\n        return adapterBalances;\n    }\n\n    /**\n     * @param protocolAdapterName Protocol adapter's Name.\n     * @param tokens Array of tokens' addresses.\n     * @param account Address of the account.\n     * @return AdapterBalance array by the given parameters.\n     */\n    function getAdapterBalance(\n        bytes32 protocolAdapterName,\n        address[] memory tokens,\n        address account\n    )\n        public\n        view\n        returns (AdapterBalance memory)\n    {\n        address adapter = _protocolAdapterAddress[protocolAdapterName];\n        require(adapter != address(0), \"AR: bad protocolAdapterName\");\n\n        uint256 length = tokens.length;\n        AbsoluteTokenAmount[] memory absoluteTokenAmounts = new AbsoluteTokenAmount[](tokens.length);\n\n        for (uint256 i = 0; i < length; i++) {\n            try ProtocolAdapter(adapter).getBalance(\n                tokens[i],\n                account\n            ) returns (uint256 amount) {\n                absoluteTokenAmounts[i] = AbsoluteTokenAmount({\n                    token: tokens[i],\n                    amount: amount\n                });\n            } catch {\n                absoluteTokenAmounts[i] = AbsoluteTokenAmount({\n                    token: tokens[i],\n                    amount: 0\n                });\n            }\n        }\n\n        return AdapterBalance({\n            protocolAdapterName: protocolAdapterName,\n            absoluteTokenAmounts: absoluteTokenAmounts\n        });\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/shared/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n\n// The struct consists of AbsoluteTokenAmount structs for\n// (base) token and its underlying tokens (if any).\nstruct FullAbsoluteTokenAmount {\n    AbsoluteTokenAmountMeta base;\n    AbsoluteTokenAmountMeta[] underlying;\n}\n\n\n// The struct consists of AbsoluteTokenAmount struct\n// with token address and absolute amount\n// and ERC20Metadata struct with ERC20-style metadata.\n// NOTE: 0xEeee...EEeE address is used for ETH.\nstruct AbsoluteTokenAmountMeta {\n    AbsoluteTokenAmount absoluteTokenAmount;\n    ERC20Metadata erc20metadata;\n}\n\n\n// The struct consists of ERC20-style token metadata.\nstruct ERC20Metadata {\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\n// The struct consists of protocol adapter's name\n// and array of AbsoluteTokenAmount structs\n// with token addresses and absolute amounts.\nstruct AdapterBalance {\n    bytes32 protocolAdapterName;\n    AbsoluteTokenAmount[] absoluteTokenAmounts;\n}\n\n\n// The struct consists of token address\n// and its absolute amount.\nstruct AbsoluteTokenAmount {\n    address token;\n    uint256 amount;\n}\n\n\n// The struct consists of token address,\n// and price per full share (1e18).\nstruct Component {\n    address token;\n    uint256 rate;\n}\n\n\n//=============================== Interactive Adapters Structs ====================================\n\n\nstruct TransactionData {\n    Action[] actions;\n    TokenAmount[] inputs;\n    Fee fee;\n    AbsoluteTokenAmount[] requiredOutputs;\n    uint256 nonce;\n}\n\n\nstruct Action {\n    bytes32 protocolAdapterName;\n    ActionType actionType;\n    TokenAmount[] tokenAmounts;\n    bytes data;\n}\n\n\nstruct TokenAmount {\n    address token;\n    uint256 amount;\n    AmountType amountType;\n}\n\n\nstruct Fee {\n    uint256 share;\n    address beneficiary;\n}\n\n\nenum ActionType { None, Deposit, Withdraw }\n\n\nenum AmountType { None, Relative, Absolute }\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/shared/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/core/Ownable.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n\nabstract contract Ownable {\n\n    modifier onlyOwner {\n        require(msg.sender == owner_, \"O: only owner\");\n        _;\n    }\n\n    modifier onlyPendingOwner {\n        require(msg.sender == pendingOwner_, \"O: only pending owner\");\n        _;\n    }\n\n    address private owner_;\n    address private pendingOwner_;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @notice Initializes owner variable with msg.sender address.\n     */\n    constructor() internal {\n        owner_ = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @notice Sets pending owner to the desired address.\n     * The function is callable only by the owner.\n     */\n    function proposeOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"O: empty newOwner\");\n        require(newOwner != owner_, \"O: equal to owner_\");\n        require(newOwner != pendingOwner_, \"O: equal to pendingOwner_\");\n        pendingOwner_ = newOwner;\n    }\n\n    /**\n     * @notice Transfers ownership to the pending owner.\n     * The function is callable only by the pending owner.\n     */\n    function acceptOwnership() external onlyPendingOwner {\n        emit OwnershipTransferred(owner_, msg.sender);\n        owner_ = msg.sender;\n        delete pendingOwner_;\n    }\n\n    /**\n     * @return Owner of the contract.\n     */\n    function owner() external view returns (address) {\n        return owner_;\n    }\n\n    /**\n     * @return Pending owner of the contract.\n     */\n    function pendingOwner() external view returns (address) {\n        return pendingOwner_;\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/core/ProtocolAdapterManager.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport { Ownable } from \"./Ownable.sol\";\n\n\n/**\n * @title ProtocolAdapterRegistry part responsible for protocol adapters management.\n * @dev Base contract for ProtocolAdapterRegistry.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\nabstract contract ProtocolAdapterManager is Ownable {\n\n    // Protocol adapters' names\n    bytes32[] internal _protocolAdapterNames;\n    // Protocol adapter's name => protocol adapter's address\n    mapping (bytes32 => address) internal _protocolAdapterAddress;\n    // protocol adapter's name => protocol adapter's supported tokens\n    mapping (bytes32 => address[]) internal _protocolAdapterSupportedTokens;\n\n    /**\n     * @notice Adds protocol adapters.\n     * The function is callable only by the owner.\n     * @param newProtocolAdapterNames Array of the new protocol adapters' names.\n     * @param newProtocolAdapterAddresses Array of the new protocol adapters' addresses.\n     * @param newSupportedTokens Array of the new protocol adapters' supported tokens.\n     */\n    function addProtocolAdapters(\n        bytes32[] calldata newProtocolAdapterNames,\n        address[] calldata newProtocolAdapterAddresses,\n        address[][] calldata newSupportedTokens\n    )\n        external\n        onlyOwner\n    {\n        uint256 length = newProtocolAdapterNames.length;\n        require(length != 0, \"PAM: empty[1]\");\n        require(length == newProtocolAdapterAddresses.length, \"PAM: lengths differ[1]\");\n        require(length == newSupportedTokens.length, \"PAM: lengths differ[2]\");\n\n        for (uint256 i = 0; i < length; i++) {\n            addProtocolAdapter(\n                newProtocolAdapterNames[i],\n                newProtocolAdapterAddresses[i],\n                newSupportedTokens[i]\n            );\n        }\n    }\n\n    /**\n     * @notice Removes protocol adapters.\n     * The function is callable only by the owner.\n     * @param protocolAdapterNames Array of the protocol adapters' names.\n     */\n    function removeProtocolAdapters(\n        bytes32[] calldata protocolAdapterNames\n    )\n        external\n        onlyOwner\n    {\n        uint256 length = protocolAdapterNames.length;\n        require(length != 0, \"PAM: empty[2]\");\n\n        for (uint256 i = 0; i < length; i++) {\n            removeProtocolAdapter(protocolAdapterNames[i]);\n        }\n    }\n\n    /**\n     * @notice Updates protocol adapters.\n     * The function is callable only by the owner.\n     * @param protocolAdapterNames Array of the protocol adapters' names.\n     * @param newProtocolAdapterAddresses Array of the protocol adapters' new addresses.\n     * @param newSupportedTokens Array of the protocol adapters' new supported tokens.\n     */\n    function updateProtocolAdapters(\n        bytes32[] calldata protocolAdapterNames,\n        address[] calldata newProtocolAdapterAddresses,\n        address[][] calldata newSupportedTokens\n    )\n        external\n        onlyOwner\n    {\n        uint256 length = protocolAdapterNames.length;\n        require(length != 0, \"PAM: empty[3]\");\n        require(length == newProtocolAdapterAddresses.length, \"PAM: lengths differ[3]\");\n        require(length == newSupportedTokens.length, \"PAM: lengths differ[4]\");\n\n        for (uint256 i = 0; i < length; i++) {\n            updateProtocolAdapter(\n                protocolAdapterNames[i],\n                newProtocolAdapterAddresses[i],\n                newSupportedTokens[i]\n            );\n        }\n    }\n\n    /**\n     * @return Array of protocol adapters' names.\n     */\n    function getProtocolAdapterNames()\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        return _protocolAdapterNames;\n    }\n\n    /**\n     * @param protocolAdapterName Name of the protocol adapter.\n     * @return Address of protocol adapter.\n     */\n    function getProtocolAdapterAddress(\n        bytes32 protocolAdapterName\n    )\n        external\n        view\n        returns (address)\n    {\n        return _protocolAdapterAddress[protocolAdapterName];\n    }\n\n    /**\n     * @param protocolAdapterName Name of the protocol adapter.\n     * @return Array of protocol adapter's supported tokens.\n     */\n    function getSupportedTokens(\n        bytes32 protocolAdapterName\n    )\n        external\n        view\n        returns (address[] memory)\n    {\n        return _protocolAdapterSupportedTokens[protocolAdapterName];\n    }\n\n    /**\n     * @notice Adds a protocol adapter.\n     * @param newProtocolAdapterName New protocol adapter's protocolAdapterName.\n     * @param newAddress New protocol adapter's address.\n     * @param newSupportedTokens Array of the new protocol adapter's supported tokens.\n     * Empty array is always allowed.\n     */\n    function addProtocolAdapter(\n        bytes32 newProtocolAdapterName,\n        address newAddress,\n        address[] calldata newSupportedTokens\n    )\n        internal\n    {\n        require(newProtocolAdapterName != bytes32(0), \"PAM: zero[1]\");\n        require(newAddress != address(0), \"PAM: zero[2]\");\n        require(_protocolAdapterAddress[newProtocolAdapterName] == address(0), \"PAM: exists\");\n\n        _protocolAdapterNames.push(newProtocolAdapterName);\n        _protocolAdapterAddress[newProtocolAdapterName] = newAddress;\n        _protocolAdapterSupportedTokens[newProtocolAdapterName] = newSupportedTokens;\n    }\n\n    /**\n     * @notice Removes a protocol adapter.\n     * @param protocolAdapterName Protocol adapter's protocolAdapterName.\n     */\n    function removeProtocolAdapter(\n        bytes32 protocolAdapterName\n    )\n        internal\n    {\n        require(_protocolAdapterAddress[protocolAdapterName] != address(0), \"PAM: does not exist[1]\");\n\n        uint256 length = _protocolAdapterNames.length;\n        uint256 index = 0;\n        while (_protocolAdapterNames[index] != protocolAdapterName) {\n            index++;\n        }\n\n        if (index != length - 1) {\n            _protocolAdapterNames[index] = _protocolAdapterNames[length - 1];\n        }\n\n        _protocolAdapterNames.pop();\n\n        delete _protocolAdapterAddress[protocolAdapterName];\n        delete _protocolAdapterSupportedTokens[protocolAdapterName];\n    }\n\n    /**\n     * @notice Updates a protocol adapter.\n     * @param protocolAdapterName Protocol adapter's protocolAdapterName.\n     * @param newProtocolAdapterAddress Protocol adapter's new address.\n     * @param newSupportedTokens Array of the protocol adapter's new supported tokens.\n     * Empty array is always allowed.\n     */\n    function updateProtocolAdapter(\n        bytes32 protocolAdapterName,\n        address newProtocolAdapterAddress,\n        address[] calldata newSupportedTokens\n    )\n        internal\n    {\n        address oldProtocolAdapterAddress = _protocolAdapterAddress[protocolAdapterName];\n        require(oldProtocolAdapterAddress != address(0), \"PAM: does not exist[2]\");\n        require(newProtocolAdapterAddress != address(0), \"PAM: zero[3]\");\n\n        if (oldProtocolAdapterAddress == newProtocolAdapterAddress) {\n            _protocolAdapterSupportedTokens[protocolAdapterName] = newSupportedTokens;\n        } else {\n            _protocolAdapterAddress[protocolAdapterName] = newProtocolAdapterAddress;\n            _protocolAdapterSupportedTokens[protocolAdapterName] = newSupportedTokens;\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n//\n// SPDX-License-Identifier: LGPL-3.0-only\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter abstract contract.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\nabstract contract ProtocolAdapter {\n\n    /**\n     * @dev MUST return amount and type of the given token\n     * locked on the protocol by the given account.\n     */\n    function getBalance(\n        address token,\n        address account\n    )\n        public\n        view\n        virtual\n        returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}