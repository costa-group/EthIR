{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"MXXERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract MXXERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address. // Commented for MXX\r\n     * - `recipient` cannot be the zero address. // Commented for MXX\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        //require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        //require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"},"YieldContract.sol":{"content":"// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity 0.6.2;\n\n// Importing libraries\nimport \"./Ownable.sol\";\nimport \"./ERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./ReentrancyGuard.sol\";\n\n/**\n * @title Yield Contract\n * @notice Contract to create yield contracts for users\n */\n\n/**\n * TO NOTE\n * @notice Store collateral and provide interest MXX or burn MXX\n * @notice Interest (contractFee, penaltyFee etc) is always represented 10 power 6 times the actual value\n * @notice Note that only 4 decimal precision is allowed for interest\n * @notice If interest is 5%, then value to input is 0.05 * 10 pow 6 = 5000\n * @notice mFactor or mintFactor is represented 10 power 18 times the actual value.\n * @notice If value of 1 ETH is 380 USD, then mFactor of ETH is (380 * (10 power 18))\n * @notice Collateral should always be in its lowest denomination (based on the coin or Token)\n * @notice If collateral is 6 USDT, then value is 6 * (10 power 6) as USDT supports 6 decimals\n * @notice startTime and endTime are represented in Unix time\n * @notice tenure for contract is represented in days (90, 180, 270) etc\n * @notice mxxToBeMinted or mxxToBeMinted is always in its lowest denomination (8 decimals)\n * @notice For e.g if mxxToBeMinted = 6 MXX, then actual value is 6 * (10 power 8)\n */\n\ncontract YieldContract is Ownable, ReentrancyGuard {\n    // Using SafeERC20 for ERC20\n    using SafeERC20 for ERC20;\n\n    // Using SafeMath Library to prevent integer overflow\n    using SafeMath for uint256;\n\n    // Using Address library for ERC20 contract checks\n    using Address for address;\n\n    /**\n     * DEFINING VARIABLES\n     */\n\n    /**\n     * @dev - Array to store valid ERC20 addresses\n     */\n    address[] public erc20List;\n\n    /**\n     * @dev - A struct to store ERC20 details\n     * @notice symbol - The symbol/ ticker symbol of ERC20 contract\n     * @notice isValid - Boolean variable indicating if the ERC20 is valid to be used for yield contracts\n     * @notice noContracts - Integer indicating the number of contracts associated with it\n     * @notice mFactor - Value of a coin/token in USD * 10 power 18\n     */\n    struct Erc20Details {\n        string symbol;\n        bool isValid;\n        uint64 noContracts;\n        uint256 mFactor;\n    }\n\n    /**\n     * @dev - A mapping to map ERC20 addresses to its details\n     */\n    mapping(address =\u003e Erc20Details) public erc20Map;\n\n    /**\n     * @dev - Array to store user created yield contract IDs\n     */\n    bytes32[] public allContracts;\n\n    /**\n     * @dev - A enum to store yield contract status\n     */\n    enum Status {\n        Inactive, \n        Active, \n        OpenMarket, \n        Claimed, \n        Destroyed\n    }\n\n    /**\n     * @dev - A enum to switch set value case\n     */\n    enum ParamType {\n        ContractFee,\n        MinEarlyRedeemFee,\n        MaxEarlyRedeemFee,\n        TotalAllocatedMxx\n    }\n\n    /**\n     * @dev - A struct to store yield contract details\n     * @notice contractOwner - The owner of the yield contract\n     * @notice tokenAddress - ERC20 contract address (if ETH then ZERO_ADDRESS)\n     * @notice startTime - Start time of the yield contract (in unix timestamp)\n     * @notice endTime - End time of the yield contract (in unix timestamp)\n     * @notice tenure - The agreement tenure in days\n     * @notice contractStatus - The status of a contract (can be Inactive/Active/OpenMarket/Claimed/Destroyed)\n     * @notice collateral - Value of collateral (multiplied by 10 power 18 to handle decimals)\n     * @notice mxxToBeMinted - The final MXX token value to be returned to the contract owner\n     * @notice interest - APY or Annual Percentage Yield (returned from tenureApyMap)\n     */\n    struct ContractDetails {\n        address contractOwner;\n        uint48 startTime;\n        uint48 endTime;\n        address tokenAddress;\n        uint16 tenure;\n        uint64 interest;\n        Status contractStatus;\n        uint256 collateral;\n        uint256 mxxToBeMinted;\n    }\n\n    /**\n     * @dev - A mapping to map contract IDs to their details\n     */\n    mapping(bytes32 =\u003e ContractDetails) public contractMap;\n\n    /**\n     * @dev - A mapping to map tenure in days to apy (Annual Percentage Yield aka interest rate)\n     * Percent rate is multiplied by 10 power 6. (For e.g. if 5% then value is 0.05 * 10 power 6)\n     */\n    mapping(uint256 =\u003e uint64) public tenureApyMap;\n\n    /**\n     * @dev - Variable to store contract fee\n     * If 10% then value is 0.1 * 10 power 6\n     */\n    uint64 public contractFee;\n\n    /**\n     * @dev - Constant variable to store Official MXX ERC20 token address\n     */\n    address public constant MXX_ADDRESS = 0x8a6f3BF52A26a21531514E23016eEAe8Ba7e7018;\n\n    /**\n     * @dev - Constant address to store the Official MXX Burn Address\n     */\n    address public constant BURN_ADDRESS = 0x19B292c1a84379Aab41564283e7f75bF20e45f91;\n\n    /**\n     * @dev - Constant variable to store ETH address\n     */\n    address internal constant ZERO_ADDRESS = address(0);\n\n    /**\n     * @dev - Constant variable to store 10 power of 6\n     */\n    uint64 internal constant POW6 = 1000000;\n\n    /**\n     * @dev - Variable to store total allocated MXX for yield contracts\n     */\n    uint256 public totalAllocatedMxx;\n\n    /**\n     * @dev - Variable to total MXX minted from yield contracts\n     */\n    uint256 public mxxMintedFromContract;\n\n    /**\n     * @dev - Variables to store % of penalty / redeem fee fees\n     * If min penalty / redeem fee is 5% then value is 0.05 * 10 power 6\n     * If max penalty / redeem fee is 50% then value is 0.5 * 10 power 6\n     */\n    uint64 public minEarlyRedeemFee;\n    uint64 public maxEarlyRedeemFee;\n\n    /**\n     * CONSTRUCTOR FUNCTION\n     */\n\n    constructor(uint256 _mxxmFactor) public Ownable() {\n        // Setting default variables\n        tenureApyMap[90] = 2 * POW6;\n        tenureApyMap[180] = 4 * POW6;\n        tenureApyMap[270] = 10 * POW6;\n        contractFee = (8 * POW6) / 100;\n        totalAllocatedMxx = 1000000000 * (10**8); // 1 billion initial Mxx allocated //\n        minEarlyRedeemFee = (5 * POW6) / 100;\n        maxEarlyRedeemFee = (5 * POW6) / 10;\n\n        addErc20(MXX_ADDRESS, _mxxmFactor);\n    }\n\n    /**\n     * DEFINE MODIFIER\n     */\n\n    /**\n     * @dev Throws if address is a user address (except ZERO_ADDRESS)\n     * @param _erc20Address - Address to be checked\n     */\n\n    modifier onlyErc20OrEth(address _erc20Address) {\n        require(\n            _erc20Address == ZERO_ADDRESS || Address.isContract(_erc20Address),\n            \"Not contract address\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Throws if address in not in ERC20 list (check for mFactor and symbol)\n     * @param _erc20Address - Address to be checked\n     */\n\n    modifier inErc20List(address _erc20Address) {\n        require(\n            erc20Map[_erc20Address].mFactor != 0 ||\n                bytes(erc20Map[_erc20Address].symbol).length != 0,\n            \"Not in ERC20 list\"\n        );\n        _;\n    }\n\n    /**\n     * INTERNAL FUNCTIONS\n     */\n\n    /**\n     * @dev This function will check the array for an element and retun the index\n     * @param _inputAddress - Address for which the index has to be found\n     * @param _inputAddressList - The address list to be checked\n     * @return index - Index element indicating the position of the inputAddress inside the array\n     * @return isFound - Boolean indicating if the element is present in the array or not\n     * Access Control: This contract or derived contract\n     */\n\n    function getIndex(address _inputAddress, address[] memory _inputAddressList)\n        internal\n        pure\n        returns (uint256 index, bool isFound)\n    {\n        // Enter loop\n        for (uint256 i = 0; i \u003c _inputAddressList.length; i++) {\n            // If value matches, return index\n            if (_inputAddress == _inputAddressList[i]) {\n                return (i, true);\n            }\n        }\n\n        // If no value matches, return false\n        return (0, false);\n    }\n\n    /**\n     * GENERAL FUNCTIONS\n     */\n\n    /**\n     * @dev This function will set interest rate for the tenure in days\n     * @param _tenure - Tenure of the agreement in days\n     * @param _interestRate - Interest rate in 10 power 6 (If 5%, then value is 0.05 * 10 power 6)\n     * @return - Boolean status - True indicating successful completion\n     * Access Control: Only Owner\n     */\n\n    function setInterest(uint256 _tenure, uint64 _interestRate)\n        public\n        onlyOwner()\n        returns (bool)\n    {\n        tenureApyMap[_tenure] = _interestRate;\n        return true;\n    }\n\n    /**\n     * @dev This function will set value based on ParamType\n     * @param _parameter - Enum value indicating ParamType (0,1,2,3)\n     * @param _value - Value to be set\n     * @return - Boolean status - True indicating successful completion\n     * Access Control: Only Owner\n     */\n\n    function setParamType(ParamType _parameter, uint256 _value)\n        public\n        onlyOwner()\n        returns (bool)\n    {\n        if (_parameter == ParamType.ContractFee) {\n            contractFee = uint64(_value);\n        } else if (_parameter == ParamType.MinEarlyRedeemFee) {\n            require(\n                uint64(_value) \u003c= maxEarlyRedeemFee,\n                \"Greater than max redeem fee\"\n            );\n            minEarlyRedeemFee = uint64(_value);\n        } else if (_parameter == ParamType.MaxEarlyRedeemFee) {\n            require(\n                uint64(_value) \u003e= minEarlyRedeemFee,\n                \"Less than min redeem fee\"\n            );\n            maxEarlyRedeemFee = uint64(_value);\n        } else if (_parameter == ParamType.TotalAllocatedMxx) {\n            require(\n                _value \u003e= mxxMintedFromContract,\n                \"Less than total mxx minted\"\n            );\n            totalAllocatedMxx = _value;\n        }\n    }\n\n    /**\n     * SUPPORTED ERC20 ADDRESS FUNCTIONS\n     */\n\n    /**\n     * @dev Adds a supported ERC20 address into the contract\n     * @param _erc20Address - Address of the ERC20 contract\n     * @param _mFactor - Mint Factor of the token (value of 1 token in USD * 10 power 18)\n     * @return - Boolean status - True indicating successful completion\n     * @notice - Access control: Only Owner\n     */\n    function addErc20(address _erc20Address, uint256 _mFactor)\n        public\n        onlyOwner()\n        onlyErc20OrEth(_erc20Address)\n        returns (bool)\n    {\n        // Check for existing contracts and validity. If condition fails, revert\n        require(\n            erc20Map[_erc20Address].noContracts == 0,\n            \"Token has existing contracts\"\n        );\n        require(!erc20Map[_erc20Address].isValid, \"Token already available\");\n\n        // Add token details and return true\n        // If _erc20Address = ZERO_ADDRESS then it is ETH else ERC20\n        erc20Map[_erc20Address] = Erc20Details(\n            (_erc20Address == ZERO_ADDRESS)\n                ? \"ETH\"\n                : ERC20(_erc20Address).symbol(),\n            true,\n            0,\n            _mFactor\n        );\n\n        erc20List.push(_erc20Address);\n        return true;\n    }\n\n    /**\n     * @dev Adds a list of supported ERC20 addresses into the contract\n     * @param _erc20AddressList - List of addresses of the ERC20 contract\n     * @param _mFactorList - List of mint factors of the token\n     * @return - Boolean status - True indicating successful completion\n     * @notice - The length of _erc20AddressList and _mFactorList must be the same\n     * @notice - Access control: Only Owner\n     */\n    function addErc20List(\n        address[] memory _erc20AddressList,\n        uint256[] memory _mFactorList\n    ) public onlyOwner() returns (bool) {\n        // Check if the length of 2 input arrays are the same else throw\n        require(\n            _erc20AddressList.length == _mFactorList.length,\n            \"Inconsistent Inputs\"\n        );\n\n        // Enter loop and token details\n        for (uint256 i = 0; i \u003c _erc20AddressList.length; i++) {\n            addErc20(_erc20AddressList[i], _mFactorList[i]);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Removes a valid ERC20 addresses from the contract\n     * @param _erc20Address - Address of the ERC20 contract to be removed\n     * @return - Boolean status - True indicating successful completion\n     * @notice - Access control: Only Owner\n     */\n    function removeErc20(address _erc20Address)\n        public\n        onlyOwner()\n        returns (bool)\n    {\n        // Check if Valid ERC20 not equals MXX_ADDRESS\n        require(_erc20Address != MXX_ADDRESS, \"Cannot remove MXX\");\n\n        // Check if _erc20Address has existing yield contracts\n        require(\n            erc20Map[_erc20Address].noContracts == 0,\n            \"Token has existing contracts\"\n        );\n\n        // Get array index and isFound flag\n        uint256 index;\n        bool isFound;\n        (index, isFound) = getIndex(_erc20Address, erc20List);\n\n        // Require address to be in list\n        require(isFound, \"Address not found\");\n\n        // Get last valid ERC20 address in the array\n        address lastErc20Address = erc20List[erc20List.length - 1];\n\n        // Assign last address to the index position\n        erc20List[index] = lastErc20Address;\n\n        // Delete last address from the array\n        erc20List.pop();\n\n        // Delete ERC20 details for the input address\n        delete erc20Map[_erc20Address];\n        return true;\n    }\n\n    /**\n     * @dev Enlists/Delists ERC20 address to prevent adding new yield contracts with this ERC20 collateral\n     * @param _erc20Address - Address of the ERC20 contract\n     * @param _isValid - New validity boolean of the ERC20 contract\n     * @return - Boolean status - True indicating successful completion\n     * @notice - Access control: Only Owner\n     */\n    function setErc20Validity(address _erc20Address, bool _isValid)\n        public\n        onlyOwner()\n        inErc20List(_erc20Address)\n        returns (bool)\n    {\n        // Set valid ERC20 validity\n        erc20Map[_erc20Address].isValid = _isValid;\n        return true;\n    }\n\n    /**\n     * @dev Updates the mint factor of a coin/token\n     * @param _erc20Address - Address of the ERC20 contract or ETH address (ZERO_ADDRESS)\n     * @return - Boolean status - True indicating successful completion\n     * @notice - Access control: Only Owner\n     */\n    function updateMFactor(address _erc20Address, uint256 _mFactor)\n        public\n        onlyOwner()\n        inErc20List(_erc20Address)\n        onlyErc20OrEth(_erc20Address)\n        returns (bool)\n    {\n        // Update mint factor\n        erc20Map[_erc20Address].mFactor = _mFactor;\n        return true;\n    }\n\n    /**\n     * @dev Updates the mint factor for list of coin(s)/token(s)\n     * @param _erc20AddressList - List of ERC20 addresses\n     * @param _mFactorList - List of mint factors for ERC20 addresses\n     * @return - Boolean status - True indicating successful completion\n     * @notice - Length of the 2 input arrays must be the same\n     * @notice - Access control: Only Owner\n     */\n    function updateMFactorList(\n        address[] memory _erc20AddressList,\n        uint256[] memory _mFactorList\n    ) public onlyOwner() returns (bool) {\n        // Length of the 2 input arrays must be the same. If condition fails, revert\n        require(\n            _erc20AddressList.length == _mFactorList.length,\n            \"Inconsistent Inputs\"\n        );\n\n        // Enter the loop, update and return true\n        for (uint256 i = 0; i \u003c _erc20AddressList.length; i++) {\n            updateMFactor(_erc20AddressList[i], _mFactorList[i]);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns number of valid Tokens/Coins supported\n     * @return - Number of valid tokens/coins\n     * @notice - Access control: Public\n     */\n    function getNoOfErc20s() public view returns (uint256) {\n        return (erc20List.length);\n    }\n\n    /**\n     * @dev Returns subset list of valid ERC20 contracts\n     * @param _start - Start index to search in the list\n     * @param _end - End index to search in the list\n     * @return - List of valid ERC20 addresses subset\n     * @notice - Access control: Public\n     */\n    function getSubsetErc20List(uint256 _start, uint256 _end)\n        public\n        view\n        returns (address[] memory)\n    {\n        // If _end higher than length of array, set end index to last element of the array\n        if (_end \u003e= erc20List.length) {\n            _end = erc20List.length - 1;\n        }\n\n        // Check conditions else fail\n        require(_start \u003c= _end, \"Invalid limits\");\n\n        // Define return array\n        uint256 noOfElements = _end - _start + 1;\n        address[] memory subsetErc20List = new address[](noOfElements);\n\n        // Loop in and add elements from erc20List array\n        for (uint256 i = _start; i \u003c= _end; i++) {\n            subsetErc20List[i - _start] = erc20List[i];\n        }\n        return subsetErc20List;\n    }\n\n    /**\n     * YIELD CONTRACT FUNCTIONS\n     */\n\n    /**\n     * @dev Creates a yield contract\n     * @param _erc20Address - The address of the ERC20 token (ZERO_ADDRESS if ETH)\n     * @param _collateral - The collateral value of the ERC20 token or ETH\n     * @param _tenure - The number of days of the agreement\n     * @notice - Collateral to be input - Actual value * (10 power decimals)\n     * @notice - For e.g If collateral is 5 USDT (Tether) and decimal is 6, then _collateral is (5 * (10 power 6))\n     * Non Reentrant modifier is used to prevent re-entrancy attack\n     * @notice - Access control: External\n     */\n\n    function createYieldContract(\n        address _erc20Address,\n        uint256 _collateral,\n        uint16 _tenure\n    ) external payable nonReentrant() {\n        // Check if token/ETH is approved to create contracts\n        require(erc20Map[_erc20Address].isValid, \"Token/Coin not approved\");\n\n        // Create contractId and check if status Inactive (enum state 0)\n        bytes32 contractId = keccak256(\n            abi.encode(msg.sender, _erc20Address, now, allContracts.length)\n        );\n        require(\n            contractMap[contractId].contractStatus == Status.Inactive,\n            \"Contract already exists\"\n        );\n\n        // Check if APY (interest rate is not zero for the tenure)\n        require(tenureApyMap[_tenure] != 0, \"No interest rate is set\");\n\n        // Get decimal value for collaterals\n        uint256 collateralDecimals;\n\n        // Check id collateral is not 0\n        require(_collateral != 0, \"Collateral is 0\");\n\n        if (_erc20Address == ZERO_ADDRESS) {\n            // In case of ETH, check to ensure if collateral value match ETH sent\n            require(msg.value == _collateral, \"Incorrect funds\");\n\n            // ETH decimals is 18\n            collateralDecimals = 10**18;\n        } else {\n            // In case of non ETH, check to ensure if msg.value is 0\n            require(msg.value == 0, \"Incorrect funds\");\n\n            collateralDecimals = 10**uint256(ERC20(_erc20Address).decimals());\n\n            // Transfer collateral\n            ERC20(_erc20Address).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _collateral\n            );\n        }\n\n        // Calculate MXX to be Minted\n        uint256 numerator = _collateral\n            .mul(erc20Map[_erc20Address].mFactor)\n            .mul(tenureApyMap[_tenure])\n            .mul(10**uint256(ERC20(MXX_ADDRESS).decimals()))\n            .mul(_tenure);\n        uint256 denominator = collateralDecimals\n            .mul(erc20Map[MXX_ADDRESS].mFactor)\n            .mul(365 * POW6);\n        uint256 valueToBeMinted = numerator.div(denominator);\n\n        // Update total MXX minted from yield contracts\n        mxxMintedFromContract = mxxMintedFromContract.add(valueToBeMinted);\n\n        // Check the MXX to be minted will result in total MXX allocated for creating yield contracts\n        require(\n            totalAllocatedMxx \u003e= mxxMintedFromContract,\n            \"Total allocated MXX exceeded\"\n        );\n\n        // Calculate MXX to be burnt\n        numerator = valueToBeMinted.mul(contractFee);\n        denominator = POW6;\n        uint256 valueToBeBurnt = numerator.div(denominator);\n\n        // Send valueToBeBurnt to contract fee destination\n        ERC20(MXX_ADDRESS).safeTransferFrom(\n            msg.sender,\n            BURN_ADDRESS,\n            valueToBeBurnt\n        );\n\n        // Create contract\n        contractMap[contractId] = ContractDetails(\n            msg.sender,\n            uint48(now),\n            uint48(now.add(uint256(_tenure).mul(1 days))),\n            _erc20Address,\n            _tenure,\n            tenureApyMap[_tenure],\n            Status.Active,\n            _collateral,\n            valueToBeMinted\n        );\n\n        // Push to all contracts and user contracts\n        allContracts.push(contractId);\n\n        // Increase number of contracts ERC20 details\n        erc20Map[_erc20Address].noContracts += 1;\n    }\n\n    /**\n     * @dev Early Redeem a yield contract\n     * @param _contractId - The Id of the contract\n     * Non Reentrant modifier is used to prevent re-entrancy attack\n     * @notice - Access control: External\n     */\n\n    function earlyRedeemContract(bytes32 _contractId) external nonReentrant() {\n        // Check if contract is Active\n        require(\n            contractMap[_contractId].contractStatus == Status.Active,\n            \"Contract is not active\"\n        );\n\n        // Check if redeemer is the owner\n        require(\n            contractMap[_contractId].contractOwner == msg.sender,\n            \"Redeemer is not owner\"\n        );\n\n        // Check if current time is less than end time\n        require(\n            now \u003c contractMap[_contractId].endTime,\n            \"Contract is beyond its end time\"\n        );\n\n        // Calculate mxxMintedTillDate\n        uint256 numerator = now.sub(contractMap[_contractId].startTime).mul(\n            contractMap[_contractId].mxxToBeMinted\n        );\n        uint256 denominator = uint256(contractMap[_contractId].endTime).sub(\n            contractMap[_contractId].startTime\n        );\n        uint256 mxxMintedTillDate = numerator.div(denominator);\n\n        // Calculate penaltyPercent\n        numerator = uint256(maxEarlyRedeemFee).sub(minEarlyRedeemFee).mul(\n            now.sub(contractMap[_contractId].startTime)\n        );\n        uint256 penaltyPercent = uint256(maxEarlyRedeemFee).sub(\n            numerator.div(denominator)\n        );\n\n        // Calculate penaltyMXXToBurn\n        numerator = penaltyPercent.mul(mxxMintedTillDate);\n        uint256 penaltyMXXToBurn = numerator.div(POW6);\n\n        // Check if penalty MXX to burn is not 0\n        require(penaltyMXXToBurn != 0, \"No penalty MXX\");\n\n        // Calculate mxxToBeSent\n        uint256 mxxToBeSent = mxxMintedTillDate.sub(penaltyMXXToBurn);\n\n        // Return collateral\n        if (contractMap[_contractId].tokenAddress == ZERO_ADDRESS) {\n            // Send back ETH\n            (bool success, ) = contractMap[_contractId].contractOwner.call{\n                value: contractMap[_contractId].collateral\n            }(\"\");\n            require(success, \"Transfer failed\");\n        } else {\n            // Send back ERC20 collateral\n            ERC20(contractMap[_contractId].tokenAddress).safeTransfer(\n                contractMap[_contractId].contractOwner,\n                contractMap[_contractId].collateral\n            );\n        }\n\n        // Return MXX\n        ERC20(MXX_ADDRESS).safeTransfer(\n            contractMap[_contractId].contractOwner,\n            mxxToBeSent\n        );\n\n        // Burn penalty fee\n        ERC20(MXX_ADDRESS).safeTransfer(BURN_ADDRESS, penaltyMXXToBurn);\n\n        // Updating contract\n        contractMap[_contractId].startTime = uint48(now);\n        contractMap[_contractId].mxxToBeMinted = contractMap[_contractId]\n            .mxxToBeMinted\n            .sub(mxxMintedTillDate);\n        contractMap[_contractId].contractOwner = ZERO_ADDRESS;\n        contractMap[_contractId].contractStatus = Status.OpenMarket;\n    }\n\n    /**\n     * @dev Acquire a yield contract in the open market\n     * @param _contractId - The Id of the contract\n     * Non Reentrant modifier is used to prevent re-entrancy attack\n     * @notice - Access control: External\n     */\n\n    function acquireYieldContract(bytes32 _contractId)\n        external\n        payable\n        nonReentrant()\n    {\n        // Check if contract is open\n        require(\n            contractMap[_contractId].contractStatus == Status.OpenMarket,\n            \"Contract not in open market\"\n        );\n\n        // Get collateral in case of ERC20 tokens, for ETH it is already received via msg.value\n        if (contractMap[_contractId].tokenAddress != ZERO_ADDRESS) {\n            // In case of ERC20, ensure no ETH is sent\n            require(msg.value == 0, \"ETH should not be sent\");\n            ERC20(contractMap[_contractId].tokenAddress).safeTransferFrom(\n                msg.sender,\n                address(this),\n                contractMap[_contractId].collateral\n            );\n        } else {\n            // In case of ETH check if money received equals the collateral else revert\n            require(\n                msg.value == contractMap[_contractId].collateral,\n                \"Incorrect funds\"\n            );\n        }\n\n        // Updating contract\n        contractMap[_contractId].contractOwner = msg.sender;\n        contractMap[_contractId].contractStatus = Status.Active;\n    }\n\n    /**\n     * @dev Destroy an open market yield contract\n     * @param _contractId - The Id of the contract\n     * Non Reentrant modifier is used to prevent re-entrancy attack\n     * @notice - Access control: External\n     */\n\n    function destroyOMContract(bytes32 _contractId)\n        external\n        onlyOwner()\n        nonReentrant()\n    {\n        // Check if contract is open\n        require(\n            contractMap[_contractId].contractStatus == Status.OpenMarket,\n            \"Contract not in open market\"\n        );\n\n        // Reduced MXX minted from contract and update status as destroyed\n        mxxMintedFromContract -= contractMap[_contractId].mxxToBeMinted;\n        contractMap[_contractId].contractStatus = Status.Destroyed;\n    }\n\n    /**\n     * @dev Claim a yield contract in the active market\n     * @param _contractId - The Id of the contract\n     * Non Reentrant modifier is used to prevent re-entrancy attack\n     * @notice - Access control: External\n     */\n\n    function claimYieldContract(bytes32 _contractId) external nonReentrant() {\n        // Check if contract is active\n        require(\n            contractMap[_contractId].contractStatus == Status.Active,\n            \"Contract is not active\"\n        );\n\n        // Check if owner and msg.sender are the same\n        require(\n            contractMap[_contractId].contractOwner == msg.sender,\n            \"Contract owned by someone else\"\n        );\n\n        // Check if current time is greater than contract end time\n        require(now \u003e= contractMap[_contractId].endTime, \"Too early to claim\");\n\n        // Return collateral\n        if (contractMap[_contractId].tokenAddress == ZERO_ADDRESS) {\n            // Send back ETH\n            (bool success, ) = contractMap[_contractId].contractOwner.call{\n                value: contractMap[_contractId].collateral\n            }(\"\");\n            require(success, \"Transfer failed\");\n        } else {\n            // Send back ERC20 collateral\n            ERC20(contractMap[_contractId].tokenAddress).safeTransfer(\n                contractMap[_contractId].contractOwner,\n                contractMap[_contractId].collateral\n            );\n        }\n\n        // Return minted MXX\n        ERC20(MXX_ADDRESS).safeTransfer(\n            contractMap[_contractId].contractOwner,\n            contractMap[_contractId].mxxToBeMinted\n        );\n\n        // Updating contract\n        contractMap[_contractId].contractStatus = Status.Claimed;\n\n        // Reduce no of contracts in ERC20 details\n        erc20Map[contractMap[_contractId].tokenAddress].noContracts -= 1;\n    }\n\n    /**\n     * @dev This function will subset of yield contract\n     * @param _start - Start of the list\n     * @param _end - End of the list\n     * @return - List of subset yield contract\n     * Access Control: Public\n     */\n\n    function getSubsetYieldContracts(uint256 _start, uint256 _end)\n        public\n        view\n        returns (bytes32[] memory)\n    {\n        // If _end higher than length of array, set end index to last element of the array\n        if (_end \u003e= allContracts.length) {\n            _end = allContracts.length.sub(1);\n        }\n\n        // Check conditions else fail\n        require(_start \u003c= _end, \"Invalid limits\");\n\n        // Define return array\n        uint256 noOfElements = _end.sub(_start).add(1);\n        bytes32[] memory subsetYieldContracts = new bytes32[](noOfElements);\n\n        // Loop in and add elements from allContracts array\n        for (uint256 i = _start; i \u003c= _end; i++) {\n            subsetYieldContracts[i - _start] = allContracts[i];\n        }\n\n        return subsetYieldContracts;\n    }\n\n    /**\n     * @dev This function will withdraw MXX back to the owner\n     * @param _amount - Amount of MXX need to withdraw\n     * @return - Boolean status indicating successful completion\n     * Access Control: Only Owner\n     */\n\n    function withdrawMXX(uint256 _amount)\n        public\n        onlyOwner()\n        nonReentrant()\n        returns (bool)\n    {\n        ERC20(MXX_ADDRESS).safeTransfer(msg.sender, _amount);\n        return true;\n    }\n}\n"}}