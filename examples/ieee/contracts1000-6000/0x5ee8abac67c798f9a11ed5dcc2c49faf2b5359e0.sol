{"ERC20.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n \r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n   /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n"},"thisisfine.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n//  /$$$$$$$$ /$$       /$$                 /$$                 /$$$$$$$$ /$$                    \r\n// |__  $$__/| $$      |__/                |__/                | $$_____/|__/                    \r\n//    | $$   | $$$$$$$  /$$  /$$$$$$$       /$$  /$$$$$$$      | $$       /$$ /$$$$$$$   /$$$$$$ \r\n//    | $$   | $$__  $$| $$ /$$_____/      | $$ /$$_____/      | $$$$$   | $$| $$__  $$ /$$__  $$\r\n//    | $$   | $$  \\ $$| $$|  $$$$$$       | $$|  $$$$$$       | $$__/   | $$| $$  \\ $$| $$$$$$$$\r\n//    | $$   | $$  | $$| $$ \\____  $$      | $$ \\____  $$      | $$      | $$| $$  | $$| $$_____/\r\n//    | $$   | $$  | $$| $$ /$$$$$$$/      | $$ /$$$$$$$/      | $$      | $$| $$  | $$|  $$$$$$$\r\n//    |__/   |__/  |__/|__/|_______/       |__/|_______/       |__/      |__/|__/  |__/ \\_______/\r\n//\r\n// \r\n//    Official Telegram: t.me/thisisfinetoken\r\n//    Only 100 TIF. 2% Burn. \"THINGS ARE GOING TO BE OKAY\"\r\n// \r\n// \r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@#####@@@@@@@@@@@@@#@@@@@@@@@@@@@@@###@@@@@@@@@@@@@@@@@#######@\r\n// ###@@@@@@@@@@#############################@@@@@@###########@@@@@@@@@############\r\n// ###@#######@###############@@##########@################@@@@@@@###@####@#####@@@\r\n// ############@###@@@@@@@#####@..+@@@+`    @@########@@@#####@##@@###@@@##########\r\n// #######@#####@@@#######@@@;                      ;;;;;;\u0027;\u0027\u0027;;;;@@@######@+  ;@@@\r\n// @####@:                                          \u0027\u0027;#########+;;    ``          \r\n//                              `,:\u0027\u0027               ;;;#########+;@                \r\n//             @@@@@@@@@@@@@@@@@@@@@@               ;;;##@######\u0027;#                \r\n//             @                  @@@               \u0027;;####@####;;@                \r\n//       @`    @        `      `  @@@               ;;;######@##\u0027\u0027@                \r\n//      @@@    @     #@@       @;::@@               ;;;#########;\u0027@          @     \r\n//     @@@@@   @   #@@@.   @  @:::;+@@:\u0027`           ;;;#####@##@;;@          @@:   \r\n//    @@@@@@   @  @@@@@    @@  ;@@@@;::;`           ;\u0027;\u0027\u0027\u0027\u0027\u0027\u0027+#;;;.          .@@`  \r\n//   @@@@@@#   @ @@@@@@   @@@@::::::::#+;;;@        #;;;;;;;;;;;;@            @@@  \r\n//   @@@@@@@   @@@@,@@@  ;@@@@@:::;+@;;::::@\u0027#.                              ,@@@  \r\n// @.@@@,@@@   @@@,,:@@@ @@:,@@ @;;:+#;;:+  @@@@                   \u0027         @@@@`@\r\n// @@@@@,@@@ \u0027 @@@,,,@@@@@@,,,@@@;+ .. @;@ @@@@+                 @@         @@@@@@@\r\n// @@@@@,@@  @+\u0027@,,,,,@@@@,,@@@@@: \u0027@@@ @+` @@@@#@@@@@@+       ;@@#        @@@:@@@@\r\n// @@@@@,@@  @@#,,,,,,,:@,,@@@@@@: @@@@ #:;+::::;@@@@@@@      @@#@@       @@@,,@@@@\r\n// ,@@@@,@@  @@@:,,,,,,,,,@@@@@@@;+   `@;;:;::::;;@@@@@     `@@,\u0027@@+     #@@#,,+@@,\r\n// ,,@@,,@@ ,@@@@,,,,,,,,:@@@@@@:::::::::;+##:;;;;::++ ,   @@@,@++++++#@ @@@:,,,@,,\r\n// ,,,,,@@+ @@@@@,,,,,,,+\u0027\u0027@@@#;;:::::;:;:::;@  ..`   @@  @@@,,@,;@@@+,@.,@@,,,,,,,\r\n// ,,,,,@@@ @@@@@,,,,,,:+\u0027\u0027@\u0027@;::;;:;;:::::::@       @@@ @#@,,,#,......@,,         \r\n// ,,,,,@@@#@@@@@,,,,,,,\u0027\u0027\u0027@\u0027@;;;@;@;::::::;;\u0027@     .@@@@#@,,  @,......@\u0027          \r\n// ,,,,,\u0027@@@@@,@@,,,,,::+\u0027\u0027@\u0027@;;;+;@;:::::::;;\u0027     \u0027@@:@@;    @:....,.@           \r\n// ,,,,,,@@@@@,@@::::::,@\u0027\u0027@\u0027\u0027\u0027;;:+;#:::;:::;+:,    :@@,,@,,                       \r\n// ,,,,,,:@@@,,@@:::::::@\u0027\u0027\u0027\u0027+@\u0027;;;#;\u0027@@@@@\u0027#:#@#   `@@:,,,,,,,,,,.,,,,,,,,,,,,,,,,\r\n// ,,,,,,,+@,,,@@;;;;\u0027\u0027,:@\u0027\u0027\u0027\u0027\u0027\u0027@#;;;;;#@;;@\u0027\u0027#:; , `@@+,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n// ,,,,@,,,:,,:@@::::,,::::@\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027\u0027@;::#@@;:;;@.@@#,,,,,,,,,,,.,,@@,,,,,,,,,,@\r\n// ,,,,;,,,,,,:@@::::@@,:::,@@@####@@@@@@;:;;#@#@@  @@@,,,,,,,,@@@@##@@@########@@@\r\n// ,,,,:,,,,,,,@@\u0027::@@@:::::::#\u0027\u0027+++++@@@##@@@@@@@#@@@@,,,@@,,,@@@@@@@@@#######@@@@\r\n// ,,,,,,,,,,,,@@@,@@@@@:,::::+\u0027\u0027+::,,@@@\u0027\u0027:+@@@:::@@,,;@:@,,,,@@@@@@@@@######@@@@:\r\n// ,,;,,+,,,,,,,@@@@@\u0027@@,:,@,,,\u0027\u0027+::::@@@\u0027\u0027:\u0027@@@::,:::::,@#+:,#@@@@@@@@#####@@@@@+,\r\n// ,,+,,@,,#,@,,,@@@@,@@@,@@:::\u0027\u0027+:::,@@@\u0027\u0027::@@@::::::::::::@@@#@+,@@@@####@@@@@@,,\r\n// ,,,,,;,,:,,,,,,@@@,,@@@@@:::\u0027\u0027\u0027::::@@@\u0027\u0027,:@@@:::::::,::#@@@@@,,,@@@@##@@@@@@@,,,\r\n// ,,,,,,\u0027,,#,;,,,,:@,,,#@@@:::#@:::::,:@\u0027\u0027::@@,::::::::;@@@@@;,,,,@@@@@@@@@@@:,,,,\r\n// ,,,,,,,,,,,,,,,,,,,,,,,@##:,,::::::::,::::::::::::::,@@@#@:,,,,,:@@@@@@@@,,,,,,,\r\n// ,,,,,,,,,,,,,,,,,,,,,,,\u0027@:::::::::::,::::::::::::::,@@@@@@,,,,,,,,\u0027@@@@,,,,,,,,,\r\n// ,,,,,,,,,,,,,,,,,,,,,:@::::::::::::::::::::::::::::,@@@@@,,,,,,,,,,,;#,,,,,,,,,,\r\n\r\nimport \"./ERC20.sol\";\r\n\r\ncontract ThisIsFine is ERC20Detailed {\r\n\r\n   using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e uint256) private _adminBalances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowed;\r\n    \r\n    string constant tokenName = \"This is Fine: an announced rug\";\r\n    string constant tokenSymbol = \"TIF\";\r\n    uint8  constant tokenDecimals = 18;\r\n    \r\n    uint256 _totalSupply = 100000000000000000000; // 100 TIF total supply\r\n    uint256 _OwnerSupply = 100000000000000000000; // All supply is going to the contractOwner\r\n    \r\n    uint256 public burnPercent = 200; // 2% deflation each Tx\r\n    \r\n    uint256 private _releaseTime = 0;\r\n    uint256 private _released;\r\n\r\n    address public contractOwner;\r\n\r\n\r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n        _released = block.timestamp+_releaseTime;\r\n\t\t    contractOwner = msg.sender;\r\n        _mint(msg.sender, _OwnerSupply);\r\n    }\r\n\r\n    modifier isOwner(){\r\n       require(msg.sender == contractOwner, \"Unauthorised Sender\");\r\n        _;\r\n    }\r\n   /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  /**\r\n  * @dev Returns when the Admin Funds will be released in seconds\r\n  */\r\n  function released() public view returns (uint256) {\r\n    return _released;\r\n  }\r\n    \r\n  /**\r\n  * @dev Gets the Admin balance of the specified address.\r\n  * @param adminAddress The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function adminBalance(address adminAddress) public view returns(uint256) {\r\n      return _adminBalances[adminAddress];\r\n  }\r\n  \r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param user The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address user) public view returns (uint256) {\r\n    return _balances[user];\r\n  }\r\n\r\n //Finding the percent of the burnfee\r\n  function findBurnPercent(uint256 value) internal view returns (uint256)  {\r\n\t//Burn 1% of the sellers tokens\r\n\tuint256 burnValue = value.ceil(1);\r\n\tuint256 onePercent = burnValue.mul(burnPercent).div(10000);\r\n\r\n\treturn onePercent;\r\n  }\r\n  \r\n  \r\n  \r\n  //Simple transfer Does not burn tokens when transfering only allowed by Owner\r\n  function simpleTransfer(address to, uint256 value) public isOwner returns (bool) {\r\n\trequire(value \u003c= _balances[msg.sender]);\r\n\trequire(to != address(0));\r\n\r\n\t_balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\t_balances[to] = _balances[to].add(value);\r\n\r\n\temit Transfer(msg.sender, to, value);\r\n\treturn true;\r\n  }\r\n \r\n    //Send Locked token to contract only Owner Can do so its pointless for anyone else\r\n    function sendLockedToken(address beneficiary, uint256 value) public isOwner{\r\n        require(_released \u003e block.timestamp, \"TokenTimelock: release time is before current time\");\r\n\t\trequire(value \u003c= _balances[msg.sender]);\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\t\t_adminBalances[beneficiary] = value;\r\n    }\r\n    \r\n    //Anyone Can Release The Funds after 2 months\r\n    function release() public returns(bool){\r\n        require(block.timestamp \u003e= _released, \"TokenTimelock: current time is before release time\");\r\n        uint256 value = _adminBalances[msg.sender];\r\n        require(value \u003e 0, \"TokenTimelock: no tokens to release\");\r\n        _balances[msg.sender] = _balances[msg.sender].add(value);\r\n         emit Transfer(contractOwner , msg.sender, value);\r\n\t\t return true;\r\n    }\r\n  \r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  //To be Used by users to trasnfer tokens and burn while doing so\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value \u003c= _balances[msg.sender],\"Not Enough Tokens in Account\");\r\n    require(to != address(0));\r\n\tuint256 burn;\r\n    burn = findBurnPercent(value);\r\n\t\r\n    uint256 tokensToTransfer = value.sub(burn);\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(burn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), burn);\r\n    return true;\r\n  }\r\n  \r\n  //Transfer tokens to multiple addresses at once\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i \u003c receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n   /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param amount The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n     require(amount \u003c= _balances[msg.sender],\"Not Enough Tokens in Account\");\r\n    _burn(msg.sender, amount);\r\n  }\r\n /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be Deflationary.\r\n   * @param amount The amount that will be Deflationary.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount \u003c= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender\u0027s allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be Deflationary.\r\n   * @param amount The amount that will be Deflationary.\r\n   */\t\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount \u003c= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n  \r\n    /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n \r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n   /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value \u003c= _balances[from]);\r\n    require(value \u003c= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    //Delete balance of this account\r\n    _balances[from] = _balances[from].sub(value);\r\n    \r\n\tuint256 burn;\r\n\tburn = findBurnPercent(value);\r\n\r\n    uint256 tokensToTransfer = value.sub(burn);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(burn);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), burn);\r\n    return true;\r\n  }\r\n   /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n}"}}