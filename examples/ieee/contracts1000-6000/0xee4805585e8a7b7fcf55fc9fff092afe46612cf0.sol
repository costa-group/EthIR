{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"PRDXTeamLock.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Ownable.sol\" ;\r\n\r\n//@title PRDX Token contract interface\r\ninterface PRDX_token {                                     \r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function _approve(address owner, address spender, uint256 amount) external ; \r\n}\r\n\r\n//@title PRDX Team Tokens Lock Contract\r\n//@author Predix Network Team\r\ncontract PRDXTeamLock is Ownable {\r\n    \r\n    address public token_addr ; \r\n    PRDX_token token_contract = PRDX_token(token_addr) ;\r\n\r\n    uint256 public PERC_per_MONTH = 10 ; \r\n    uint256 public last_claim ; \r\n    uint256 public start_lock ;\r\n    \r\n    uint256 public MONTH = 2628000 ; \r\n    \r\n    uint256 public locked ; \r\n\r\n    /**\r\n     * @dev Lock tokens by approving the contract to take them.\r\n     * @param   value Amount of tokens you want to lock in the contract\r\n     */\r\n    function lock_tokens(uint256 value) public payable onlyOwner {\r\n        token_contract.transferFrom(msg.sender, address(this), value) ; \r\n    \r\n        locked += value ;\r\n        start_lock = block.timestamp ; \r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw function for the team to withdraw locked up tokens each month starting one month after lockup\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        require(block.timestamp \u003e= start_lock + MONTH, \"Cannot be claimed in first month\") ;\r\n        require(block.timestamp - last_claim \u003e= MONTH, \"Cannot claim twice per month\") ; \r\n        last_claim = block.timestamp ; \r\n        \r\n        token_contract.transfer(msg.sender, locked * PERC_per_MONTH/100) ; \r\n    }\r\n\r\n    /**\r\n     * @dev Set PRDX Token contract address\r\n     * @param addr Address of PRDX Token contract\r\n     */\r\n    function set_token_contract(address addr) public onlyOwner {\r\n        token_addr = addr ;\r\n        token_contract = PRDX_token(token_addr) ;\r\n    }\r\n    \r\n\r\n}"}}