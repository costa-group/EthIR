{"Crowdsale.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\nimport \"./TRTF.sol\";\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  TortoToken private token;\r\n\r\n  uint256 public cap = 500 ether;\r\n\r\n  address payable private wallet; \r\n\r\n  uint256 public rate = 500;\r\n\r\n  uint256 public minContribution = 0.5 ether;\r\n  uint256 public maxContribution = 5 ether;\r\n\r\n  uint256 public weiRaised;\r\n  mapping (address =\u003e uint256) public contributions;\r\n\r\n  bool public isCrowdsaleFinalized = false;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function CrowdsaleStarter(TortoToken _token)  public onlyOwner {\r\n    token = _token;\r\n    wallet = address(uint160(owner()));\r\n  }\r\n\r\n  receive () external payable {\r\n    purchaseTokens(msg.sender);\r\n  }\r\n\r\n  function purchaseTokens(address recipient) public payable {\r\n    require(recipient != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 amount = getTokenAmount(weiAmount);\r\n\r\n    weiAmount = weiRaised.add(weiAmount);\r\n    contributions[recipient] = contributions[recipient].add(weiAmount);\r\n\r\n    token.purchase(recipient, amount);\r\n    emit TokenPurchase(msg.sender, recipient, weiAmount, amount);\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised \u003e= cap;\r\n    return capReached || isCrowdsaleFinalized;\r\n  }\r\n\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    return tokens;\r\n  }\r\n\r\n  function validPurchase() internal view returns (bool) {\r\n    require(weiRaised.add(msg.value) \u003c= cap);\r\n    bool moreThanMinPurchase = msg.value \u003e= minContribution;\r\n    bool lessThanMaxPurchase = contributions[msg.sender] + msg.value \u003c= maxContribution;\r\n    return  moreThanMinPurchase  \u0026\u0026 lessThanMaxPurchase \u0026\u0026 !isCrowdsaleFinalized;\r\n  }\r\n\r\n  function finalizeCrowdsale() public onlyOwner {\r\n    isCrowdsaleFinalized = true;\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n"},"TRTF.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    bool private _isTransferable = false;\r\n    \r\n    address private _crowdAddress;\r\n    address private _racerAddress;\r\n    address private _poolRewardAddress;\r\n\r\n\r\n    constructor(string memory name, string memory symbol, uint256 amount) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n        _totalSupply = amount * 10 ** uint256(_decimals);\r\n        _balances[owner()] = _totalSupply;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    \r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_isTransferable || sender == owner());\r\n        require(sender != _poolRewardAddress);\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _setPoolRewardAddress(\r\n        address poolRewardAddress\r\n    ) internal {\r\n        _poolRewardAddress = poolRewardAddress;\r\n    }\r\n\r\n    function _setRacerAddress(\r\n        address contractAddress\r\n    ) internal {\r\n        _racerAddress = contractAddress;\r\n    }\r\n\r\n    function _setCrowdAddress(\r\n        address contractAddress\r\n    ) internal {\r\n        _crowdAddress = contractAddress;\r\n    }\r\n    \r\n    function _purchase(\r\n       address recipient, \r\n       uint256 amount\r\n    ) internal {\r\n        require(msg.sender == _crowdAddress);\r\n        _transfer(owner(), recipient, amount);\r\n    }\r\n    \r\n    function _transferReward(\r\n       address recipient, \r\n       uint256 amount\r\n    ) internal {\r\n        require(msg.sender == _racerAddress);\r\n\r\n        _beforeTokenTransfer(_poolRewardAddress, recipient, amount);\r\n\r\n        _balances[_poolRewardAddress] = _balances[_poolRewardAddress].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(_poolRewardAddress, recipient, amount);\r\n    }\r\n    \r\n    function _setTransferable(\r\n        uint8 _value\r\n    ) internal {\r\n        if (_value == 0) {\r\n            _isTransferable = false;\r\n        }\r\n        \r\n        if (_value == 1) {\r\n            _isTransferable = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract TortoToken is ERC20(\"Tortoise.Finance\", \"TRTF\", 1000000) {\r\n    \r\n    function transferReward(address recipient, uint256 amount)\r\n    public\r\n    returns (bool)\r\n    {\r\n        _transferReward(recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function setPoolRewardAddress(address poolRewardAddress)\r\n    public\r\n    onlyOwner \r\n    returns (bool)\r\n    {\r\n        _setPoolRewardAddress(poolRewardAddress);\r\n        return true;\r\n    }\r\n    \r\n    function setRacerAddress(address contractAddress)\r\n    public\r\n    onlyOwner \r\n    returns (bool)\r\n    {\r\n        _setRacerAddress(contractAddress);\r\n        return true;\r\n    }\r\n    \r\n    function setCrowdAddress(address contractAddress)\r\n    public\r\n    onlyOwner \r\n    returns (bool)\r\n    {\r\n        _setCrowdAddress(contractAddress);\r\n        return true;\r\n    }\r\n    \r\n    function purchase(address recipient, uint256 amount)\r\n    public\r\n    returns (bool)\r\n    {\r\n        _purchase(recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function setTransferable(uint8 _value) public \r\n    onlyOwner \r\n    virtual {\r\n        _setTransferable(_value);\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n"}}