{"AccessControl.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./EnumerableSet.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, _msgSender()));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role\u0027s admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n */\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n\n\n    }\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 =\u003e RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role\u0027s admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\u0027s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\u0027s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\u0027s\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn\u0027t perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``\u0027s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"},"Address.sol":{"content":"pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"},"Allocator.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    Allocator.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC1820Registry.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC20.sol\";\nimport \"./IProxyFactory.sol\";\nimport \"./IProxyAdmin.sol\";\nimport \"./ITimeHelpers.sol\";\nimport \"./Escrow.sol\";\nimport \"./Permissions.sol\";\n\n/**\n * @title Allocator\n */\ncontract Allocator is Permissions, IERC777Recipient {\n\n    uint256 constant private _SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant private _MONTHS_PER_YEAR = 12;\n\n    enum TimeUnit {\n        DAY,\n        MONTH,\n        YEAR\n    }\n\n    enum BeneficiaryStatus {\n        UNKNOWN,\n        CONFIRMED,\n        ACTIVE,\n        TERMINATED\n    }\n\n    struct Plan {\n        uint256 totalVestingDuration; // months\n        uint256 vestingCliff; // months\n        TimeUnit vestingIntervalTimeUnit;\n        uint256 vestingInterval; // amount of days/months/years\n        bool isDelegationAllowed;\n        bool isTerminatable;\n    }\n\n    struct Beneficiary {\n        BeneficiaryStatus status;\n        uint256 planId;\n        uint256 startMonth;\n        uint256 fullAmount;\n        uint256 amountAfterLockup;\n    }\n\n    event PlanCreated(\n        uint256 id\n    );\n\n    IERC1820Registry private _erc1820;\n\n    // array of Plan configs\n    Plan[] private _plans;\n\n    bytes32 public constant VESTING_MANAGER_ROLE = keccak256(\"VESTING_MANAGER_ROLE\");\n\n    //       beneficiary =\u003e beneficiary plan params\n    mapping (address =\u003e Beneficiary) private _beneficiaries;\n\n    //       beneficiary =\u003e Escrow\n    mapping (address =\u003e Escrow) private _beneficiaryToEscrow;\n\n    modifier onlyVestingManager() {\n        require(\n            hasRole(VESTING_MANAGER_ROLE, _msgSender()),\n            \"Message sender is not a vesting manager\"\n        );\n        _;\n    }\n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    )\n        external override\n        allow(\"SkaleToken\")\n        // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    /**\n     * @dev Allows Vesting manager to activate a vesting and transfer locked\n     * tokens from the Allocator contract to the associated Escrow address.\n     * \n     * Requirements:\n     * \n     * - Beneficiary address must be already confirmed.\n     */\n    function startVesting(address beneficiary) external onlyVestingManager {\n        require(\n            _beneficiaries[beneficiary].status == BeneficiaryStatus.CONFIRMED,\n            \"Beneficiary has inappropriate status\"\n        );\n        _beneficiaries[beneficiary].status = BeneficiaryStatus.ACTIVE;\n        require(\n            IERC20(contractManager.getContract(\"SkaleToken\")).transfer(\n                address(_beneficiaryToEscrow[beneficiary]),\n                _beneficiaries[beneficiary].fullAmount\n            ),\n            \"Error of token sending\"\n        );\n    }\n\n    /**\n     * @dev Allows Vesting manager to define and add a Plan.\n     * \n     * Requirements:\n     * \n     * - Vesting cliff period must be less than or equal to the full period.\n     * - Vesting step time unit must be in days, months, or years.\n     * - Total vesting duration must equal vesting cliff plus entire vesting schedule.\n     */\n    function addPlan(\n        uint256 vestingCliff, // months\n        uint256 totalVestingDuration, // months\n        TimeUnit vestingIntervalTimeUnit, // 0 - day 1 - month 2 - year\n        uint256 vestingInterval, // months or days or years\n        bool canDelegate, // can beneficiary delegate all un-vested tokens\n        bool isTerminatable\n    )\n        external\n        onlyVestingManager\n    {\n        require(totalVestingDuration \u003e 0, \"Vesting duration can\u0027t be zero\");\n        require(vestingInterval \u003e 0, \"Vesting interval can\u0027t be zero\");\n        require(totalVestingDuration \u003e= vestingCliff, \"Cliff period exceeds total vesting duration\");\n        // can\u0027t check if vesting interval in days is correct because it depends on startMonth\n        // This check is in connectBeneficiaryToPlan\n        if (vestingIntervalTimeUnit == TimeUnit.MONTH) {\n            uint256 vestingDurationAfterCliff = totalVestingDuration - vestingCliff;\n            require(\n                vestingDurationAfterCliff.mod(vestingInterval) == 0,\n                \"Vesting duration can\u0027t be divided into equal intervals\"\n            );\n        } else if (vestingIntervalTimeUnit == TimeUnit.YEAR) {\n            uint256 vestingDurationAfterCliff = totalVestingDuration - vestingCliff;\n            require(\n                vestingDurationAfterCliff.mod(vestingInterval.mul(_MONTHS_PER_YEAR)) == 0,\n                \"Vesting duration can\u0027t be divided into equal intervals\"\n            );\n        }\n        \n        _plans.push(Plan({\n            totalVestingDuration: totalVestingDuration,\n            vestingCliff: vestingCliff,\n            vestingIntervalTimeUnit: vestingIntervalTimeUnit,\n            vestingInterval: vestingInterval,\n            isDelegationAllowed: canDelegate,\n            isTerminatable: isTerminatable\n        }));\n        emit PlanCreated(_plans.length);\n    }\n\n    /**\n     * @dev Allows Vesting manager to register a beneficiary to a Plan.\n     * \n     * Requirements:\n     * \n     * - Plan must already exist.\n     * - The vesting amount must be less than or equal to the full allocation.\n     * - The beneficiary address must not already be included in the any other Plan.\n     */\n    function connectBeneficiaryToPlan(\n        address beneficiary,\n        uint256 planId,\n        uint256 startMonth,\n        uint256 fullAmount,\n        uint256 lockupAmount\n    )\n        external\n        onlyVestingManager\n    {\n        require(_plans.length \u003e= planId \u0026\u0026 planId \u003e 0, \"Plan does not exist\");\n        require(fullAmount \u003e= lockupAmount, \"Incorrect amounts\");\n        require(_beneficiaries[beneficiary].status == BeneficiaryStatus.UNKNOWN, \"Beneficiary is already added\");\n        if (_plans[planId - 1].vestingIntervalTimeUnit == TimeUnit.DAY) {\n            uint256 vestingDurationInDays = _daysBetweenMonths(\n                startMonth.add(_plans[planId - 1].vestingCliff),\n                startMonth.add(_plans[planId - 1].totalVestingDuration)\n            );\n            require(\n                vestingDurationInDays.mod(_plans[planId - 1].vestingInterval) == 0,\n                \"Vesting duration can\u0027t be divided into equal intervals\"\n            );\n        }\n        _beneficiaries[beneficiary] = Beneficiary({\n            status: BeneficiaryStatus.CONFIRMED,\n            planId: planId,\n            startMonth: startMonth,\n            fullAmount: fullAmount,\n            amountAfterLockup: lockupAmount\n        });\n        _beneficiaryToEscrow[beneficiary] = _deployEscrow(beneficiary);\n    }\n\n    /**\n     * @dev Allows Vesting manager to terminate vesting of a Escrow. Performed when\n     * a beneficiary is terminated.\n     * \n     * Requirements:\n     * \n     * - Vesting must be active.\n     */\n    function stopVesting(address beneficiary) external onlyVestingManager {\n        require(\n            _beneficiaries[beneficiary].status == BeneficiaryStatus.ACTIVE,\n            \"Cannot stop vesting for a non active beneficiary\"\n        );\n        require(\n            _plans[_beneficiaries[beneficiary].planId - 1].isTerminatable,\n            \"Can\u0027t stop vesting for beneficiary with this plan\"\n        );\n        _beneficiaries[beneficiary].status = BeneficiaryStatus.TERMINATED;\n        Escrow(_beneficiaryToEscrow[beneficiary]).cancelVesting(calculateVestedAmount(beneficiary));\n    }\n\n    /**\n     * @dev Returns vesting start month of the beneficiary\u0027s Plan.\n     */\n    function getStartMonth(address beneficiary) external view returns (uint) {\n        return _beneficiaries[beneficiary].startMonth;\n    }\n\n    /**\n     * @dev Returns the final vesting date of the beneficiary\u0027s Plan.\n     */\n    function getFinishVestingTime(address beneficiary) external view returns (uint) {\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n        return timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.totalVestingDuration));\n    }\n\n    /**\n     * @dev Returns the vesting cliff period in months.\n     */\n    function getVestingCliffInMonth(address beneficiary) external view returns (uint) {\n        return _plans[_beneficiaries[beneficiary].planId - 1].vestingCliff;\n    }\n\n    /**\n     * @dev Confirms whether the beneficiary is active in the Plan.\n     */\n    function isVestingActive(address beneficiary) external view returns (bool) {\n        return _beneficiaries[beneficiary].status == BeneficiaryStatus.ACTIVE;\n    }\n\n    /**\n     * @dev Confirms whether the beneficiary is registered in a Plan.\n     */\n    function isBeneficiaryRegistered(address beneficiary) external view returns (bool) {\n        return _beneficiaries[beneficiary].status != BeneficiaryStatus.UNKNOWN;\n    }\n\n    /**\n     * @dev Confirms whether the beneficiary\u0027s Plan allows all un-vested tokens to be\n     * delegated.\n     */\n    function isDelegationAllowed(address beneficiary) external view returns (bool) {\n        return _plans[_beneficiaries[beneficiary].planId - 1].isDelegationAllowed;\n    }\n\n    /**\n     * @dev Returns the locked and unlocked (full) amount of tokens allocated to\n     * the beneficiary address in Plan.\n     */\n    function getFullAmount(address beneficiary) external view returns (uint) {\n        return _beneficiaries[beneficiary].fullAmount;\n    }\n\n    /**\n     * @dev Returns the Escrow contract by beneficiary.\n     */\n    function getEscrowAddress(address beneficiary) external view returns (address) {\n        return address(_beneficiaryToEscrow[beneficiary]);\n    }\n\n    /**\n     * @dev Returns the timestamp when vesting cliff ends and periodic vesting\n     * begins.\n     */\n    function getLockupPeriodEndTimestamp(address beneficiary) external view returns (uint) {\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n        return timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.vestingCliff));\n    }\n\n    /**\n     * @dev Returns the time of the next vesting event.\n     */\n    function getTimeOfNextVest(address beneficiary) external view returns (uint) {\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n\n        uint256 firstVestingMonth = beneficiaryPlan.startMonth.add(planParams.vestingCliff);\n        uint256 lockupEndTimestamp = timeHelpers.monthToTimestamp(firstVestingMonth);\n        if (now \u003c lockupEndTimestamp) {\n            return lockupEndTimestamp;\n        }\n        require(\n            now \u003c timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)),\n            \"Vesting is over\"\n        );\n        require(beneficiaryPlan.status != BeneficiaryStatus.TERMINATED, \"Vesting was stopped\");\n        \n        uint256 currentMonth = timeHelpers.getCurrentMonth();\n        if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\n            // TODO: it may be simplified if TimeHelpers contract in skale-manager is updated\n            uint daysPassedBeforeCurrentMonth = _daysBetweenMonths(firstVestingMonth, currentMonth);\n            uint256 currentMonthBeginningTimestamp = timeHelpers.monthToTimestamp(currentMonth);\n            uint256 daysPassedInCurrentMonth = now.sub(currentMonthBeginningTimestamp).div(_SECONDS_PER_DAY);\n            uint256 daysPassedBeforeNextVest = _calculateNextVestingStep(\n                daysPassedBeforeCurrentMonth.add(daysPassedInCurrentMonth),\n                planParams.vestingInterval\n            );\n            return currentMonthBeginningTimestamp.add(\n                daysPassedBeforeNextVest\n                    .sub(daysPassedBeforeCurrentMonth)\n                    .mul(_SECONDS_PER_DAY)\n            );\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\n            return timeHelpers.monthToTimestamp(\n                firstVestingMonth.add(\n                    _calculateNextVestingStep(currentMonth.sub(firstVestingMonth), planParams.vestingInterval)\n                )\n            );\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\n            return timeHelpers.monthToTimestamp(\n                firstVestingMonth.add(\n                    _calculateNextVestingStep(\n                        currentMonth.sub(firstVestingMonth),\n                        planParams.vestingInterval.mul(_MONTHS_PER_YEAR)\n                    )\n                )\n            );\n        } else {\n            revert(\"Vesting interval timeunit is incorrect\");\n        }\n    }\n\n    /**\n     * @dev Returns the Plan parameters.\n     * \n     * Requirements:\n     * \n     * - Plan must already exist.\n     */\n    function getPlan(uint256 planId) external view returns (Plan memory) {\n        require(planId \u003e 0 \u0026\u0026 planId \u003c= _plans.length, \"Plan Round does not exist\");\n        return _plans[planId - 1];\n    }\n\n    /**\n     * @dev Returns the Plan parameters for a beneficiary address.\n     * \n     * Requirements:\n     * \n     * - Beneficiary address must be registered to an Plan.\n     */\n    function getBeneficiaryPlanParams(address beneficiary) external view returns (Beneficiary memory) {\n        require(_beneficiaries[beneficiary].status != BeneficiaryStatus.UNKNOWN, \"Plan beneficiary is not registered\");\n        return _beneficiaries[beneficiary];\n    }\n\n    function initialize(address contractManagerAddress) public override initializer {\n        Permissions.initialize(contractManagerAddress);\n        _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n    }\n\n    /**\n     * @dev Calculates and returns the vested token amount.\n     */\n    function calculateVestedAmount(address wallet) public view returns (uint256 vestedAmount) {\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n        vestedAmount = 0;\n        uint256 currentMonth = timeHelpers.getCurrentMonth();\n        if (currentMonth \u003e= beneficiaryPlan.startMonth.add(planParams.vestingCliff)) {\n            vestedAmount = beneficiaryPlan.amountAfterLockup;\n            if (currentMonth \u003e= beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)) {\n                vestedAmount = beneficiaryPlan.fullAmount;\n            } else {\n                uint256 payment = _getSinglePaymentSize(\n                    wallet,\n                    beneficiaryPlan.fullAmount,\n                    beneficiaryPlan.amountAfterLockup\n                );\n                vestedAmount = vestedAmount.add(payment.mul(_getNumberOfCompletedVestingEvents(wallet)));\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the number of vesting events that have completed.\n     */\n    function _getNumberOfCompletedVestingEvents(address wallet) internal view returns (uint) {\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n        \n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n\n        uint256 firstVestingMonth = beneficiaryPlan.startMonth.add(planParams.vestingCliff);\n        if (now \u003c timeHelpers.monthToTimestamp(firstVestingMonth)) {\n            return 0;\n        } else {\n            uint256 currentMonth = timeHelpers.getCurrentMonth();\n            if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\n                return _daysBetweenMonths(firstVestingMonth, currentMonth)\n                    .add(\n                        now\n                            .sub(timeHelpers.monthToTimestamp(currentMonth))\n                            .div(_SECONDS_PER_DAY)\n                    )\n                    .div(planParams.vestingInterval);\n            } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\n                return currentMonth\n                    .sub(firstVestingMonth)\n                    .div(planParams.vestingInterval);\n            } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\n                return currentMonth\n                    .sub(firstVestingMonth)\n                    .div(_MONTHS_PER_YEAR)\n                    .div(planParams.vestingInterval);\n            } else {\n                revert(\"Unknown time unit\");\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the number of total vesting events.\n     */\n    function _getNumberOfAllVestingEvents(address wallet) internal view returns (uint) {\n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\n        if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\n            return _daysBetweenMonths(\n                beneficiaryPlan.startMonth.add(planParams.vestingCliff),\n                beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)\n            ).div(planParams.vestingInterval);\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\n            return planParams.totalVestingDuration\n                .sub(planParams.vestingCliff)\n                .div(planParams.vestingInterval);\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\n            return planParams.totalVestingDuration\n                .sub(planParams.vestingCliff)\n                .div(_MONTHS_PER_YEAR)\n                .div(planParams.vestingInterval);\n        } else {\n            revert(\"Unknown time unit\");\n        }\n    }\n\n    /**\n     * @dev Returns the amount of tokens that are unlocked in each vesting\n     * period.\n     */\n    function _getSinglePaymentSize(\n        address wallet,\n        uint256 fullAmount,\n        uint256 afterLockupPeriodAmount\n    )\n        internal\n        view\n        returns(uint)\n    {\n        return fullAmount.sub(afterLockupPeriodAmount).div(_getNumberOfAllVestingEvents(wallet));\n    }\n\n    function _deployEscrow(address beneficiary) private returns (Escrow) {\n        // TODO: replace with ProxyFactory when @openzeppelin/upgrades will be compatible with solidity 0.6\n        IProxyFactory proxyFactory = IProxyFactory(contractManager.getContract(\"ProxyFactory\"));\n        Escrow escrow = Escrow(contractManager.getContract(\"Escrow\"));\n        // TODO: replace with ProxyAdmin when @openzeppelin/upgrades will be compatible with solidity 0.6\n        IProxyAdmin proxyAdmin = IProxyAdmin(contractManager.getContract(\"ProxyAdmin\"));\n\n        return Escrow(\n            proxyFactory.deploy(\n                uint256(bytes32(bytes20(beneficiary))),\n                proxyAdmin.getProxyImplementation(address(escrow)),\n                address(proxyAdmin),\n                abi.encodeWithSelector(\n                    Escrow.initialize.selector,\n                    address(contractManager),\n                    beneficiary\n                )\n            )\n        );\n    }\n\n    function _daysBetweenMonths(uint256 beginMonth, uint256 endMonth) private view returns (uint256) {\n        assert(beginMonth \u003c= endMonth);\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\"TimeHelpers\"));\n        uint256 beginTimestamp = timeHelpers.monthToTimestamp(beginMonth);\n        uint256 endTimestamp = timeHelpers.monthToTimestamp(endMonth);\n        uint256 secondsPassed = endTimestamp.sub(beginTimestamp);\n        require(secondsPassed.mod(_SECONDS_PER_DAY) == 0, \"Internal error in calendar\");\n        return secondsPassed.div(_SECONDS_PER_DAY);\n    }\n\n    /**\n     * @dev returns time of next vest in abstract time units named \"step\"\n     * Examples:\n     *     if current step is 5 and vesting interval is 7 function returns 7.\n     *     if current step is 17 and vesting interval is 7 function returns 21.\n     */\n    function _calculateNextVestingStep(uint256 currentStep, uint256 vestingInterval) private pure returns (uint256) {\n        return currentStep\n            .add(vestingInterval)\n            .sub(\n                currentStep.mod(vestingInterval)\n            );\n    }\n}"},"Context.sol":{"content":"pragma solidity ^0.6.0;\nimport \"./Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"},"EnumerableSet.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"Escrow.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    Escrow.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC1820Registry.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC20.sol\";\n\nimport \"./IDelegationController.sol\";\nimport \"./IDistributor.sol\";\nimport \"./ITokenState.sol\";\n\nimport \"./Allocator.sol\";\nimport \"./Permissions.sol\";\n\n\n/**\n * @title Escrow\n * @dev This contract manages funds locked by the Allocator contract.\n */\ncontract Escrow is IERC777Recipient, IERC777Sender, Permissions {\n\n    address private _beneficiary;\n\n    uint256 private _availableAmountAfterTermination;\n\n    IERC1820Registry private _erc1820;\n\n    modifier onlyBeneficiary() {\n        require(_msgSender() == _beneficiary, \"Message sender is not a plan beneficiary\");\n        _;\n    }\n\n    modifier onlyVestingManager() {\n        Allocator allocator = Allocator(contractManager.getContract(\"Allocator\"));\n        require(\n            allocator.hasRole(allocator.VESTING_MANAGER_ROLE(), _msgSender()),\n            \"Message sender is not a vesting manager\"\n        );\n        _;\n    }\n\n    modifier onlyActiveBeneficiaryOrVestingManager() {\n        Allocator allocator = Allocator(contractManager.getContract(\"Allocator\"));\n        if (allocator.isVestingActive(_beneficiary)) {\n            require(_msgSender() == _beneficiary, \"Message sender is not beneficiary\");\n        } else {\n            require(\n                allocator.hasRole(allocator.VESTING_MANAGER_ROLE(), _msgSender()),\n                \"Message sender is not authorized\"\n            );\n        }\n        _;\n    }   \n\n    function initialize(address contractManagerAddress, address beneficiary) external initializer {\n        require(beneficiary != address(0), \"Beneficiary address is not set\");\n        Permissions.initialize(contractManagerAddress);\n        _beneficiary = beneficiary;\n        _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensSender\"), address(this));\n    } \n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    )\n        external override\n        allow(\"SkaleToken\")\n        // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    function tokensToSend(\n        address,\n        address,\n        address to,\n        uint256,\n        bytes calldata,\n        bytes calldata\n    )\n        external override\n        allow(\"SkaleToken\")\n        // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    /**\n     * @dev Allows Beneficiary to retrieve vested tokens from the Escrow contract.\n     * \n     * IMPORTANT: Slashed tokens are non-transferable.\n     */\n    function retrieve() external onlyBeneficiary {\n        Allocator allocator = Allocator(contractManager.getContract(\"Allocator\"));\n        ITokenState tokenState = ITokenState(contractManager.getContract(\"TokenState\"));\n        uint256 vestedAmount = 0;\n        if (allocator.isVestingActive(_beneficiary)) {\n            vestedAmount = allocator.calculateVestedAmount(_beneficiary);\n        } else {\n            vestedAmount = _availableAmountAfterTermination;\n        }\n        uint256 escrowBalance = IERC20(contractManager.getContract(\"SkaleToken\")).balanceOf(address(this));\n        uint256 fullAmount = allocator.getFullAmount(_beneficiary);\n        uint256 forbiddenToSend = tokenState.getAndUpdateForbiddenForDelegationAmount(address(this));\n        if (vestedAmount \u003e fullAmount.sub(escrowBalance)) {\n            if (vestedAmount.sub(fullAmount.sub(escrowBalance)) \u003e forbiddenToSend)\n            require(\n                IERC20(contractManager.getContract(\"SkaleToken\")).transfer(\n                    _beneficiary,\n                    vestedAmount\n                        .sub(\n                            fullAmount\n                                .sub(escrowBalance)\n                            )\n                        .sub(forbiddenToSend)\n                ),\n                \"Error of token send\"\n            );\n        }\n    }\n\n    /**\n     * @dev Allows Vesting Manager to retrieve remaining transferrable escrow balance\n     * after beneficiary\u0027s termination. \n     * \n     * IMPORTANT: Slashed tokens are non-transferable.\n     * \n     * Requirements:\n     * \n     * - Allocator must be active.\n     */\n    function retrieveAfterTermination(address destination) external onlyVestingManager {\n        Allocator allocator = Allocator(contractManager.getContract(\"Allocator\"));\n        ITokenState tokenState = ITokenState(contractManager.getContract(\"TokenState\"));\n\n        require(destination != address(0), \"Destination address is not set\");\n        require(!allocator.isVestingActive(_beneficiary), \"Vesting is active\");\n        uint256 escrowBalance = IERC20(contractManager.getContract(\"SkaleToken\")).balanceOf(address(this));\n        uint256 forbiddenToSend = tokenState.getAndUpdateLockedAmount(address(this));\n        if (escrowBalance \u003e forbiddenToSend) {\n            require(\n                IERC20(contractManager.getContract(\"SkaleToken\")).transfer(\n                    destination,\n                    escrowBalance.sub(forbiddenToSend)\n                ),\n                \"Error of token send\"\n            );\n        }\n    }\n\n    /**\n     * @dev Allows Beneficiary to propose a delegation to a validator.\n     * \n     * Requirements:\n     * \n     * - Beneficiary must be active.\n     * - Beneficiary must have sufficient delegatable tokens.\n     * - If trusted list is enabled, validator must be a member of the trusted\n     * list.\n     */\n    function delegate(\n        uint256 validatorId,\n        uint256 amount,\n        uint256 delegationPeriod,\n        string calldata info\n    )\n        external\n        onlyBeneficiary\n    {\n        Allocator allocator = Allocator(contractManager.getContract(\"Allocator\"));\n        require(allocator.isDelegationAllowed(_beneficiary), \"Delegation is not allowed\");\n        require(allocator.isVestingActive(_beneficiary), \"Beneficiary is not Active\");\n        \n        IDelegationController delegationController = IDelegationController(\n            contractManager.getContract(\"DelegationController\")\n        );\n        delegationController.delegate(validatorId, amount, delegationPeriod, info);\n    }\n\n    /**\n     * @dev Allows Beneficiary and Vesting manager to request undelegation. Only \n     * Vesting manager can request undelegation after beneficiary is deactivated \n     * (after beneficiary termination).\n     * \n     * Requirements:\n     * \n     * - Beneficiary and Vesting manager must be `msg.sender`.\n     */\n    function requestUndelegation(uint256 delegationId) external onlyActiveBeneficiaryOrVestingManager {\n        IDelegationController delegationController = IDelegationController(\n            contractManager.getContract(\"DelegationController\")\n        );\n        delegationController.requestUndelegation(delegationId);\n    }\n\n    /**\n     * @dev Allows Beneficiary and Vesting manager to cancel a delegation proposal. Only \n     * Vesting manager can request undelegation after beneficiary is deactivated \n     * (after beneficiary termination).\n     * \n     * Requirements:\n     * \n     * - Beneficiary and Vesting manager must be `msg.sender`.\n     */\n    function cancelPendingDelegation(uint delegationId) external onlyActiveBeneficiaryOrVestingManager {\n        IDelegationController delegationController = IDelegationController(\n            contractManager.getContract(\"DelegationController\")\n        );\n        delegationController.cancelPendingDelegation(delegationId);\n    }\n\n    /**\n     * @dev Allows Beneficiary and Vesting manager to withdraw earned bounty. Only\n     * Vesting manager can withdraw bounty to Allocator contract after beneficiary\n     * is deactivated.\n     * \n     * IMPORTANT: Withdraws are only possible after 90 day initial network lock.\n     * \n     * Requirements:\n     * \n     * - Beneficiary or Vesting manager must be `msg.sender`.\n     * - Beneficiary must be active when Beneficiary is `msg.sender`.\n     */\n    function withdrawBounty(uint256 validatorId, address to) external onlyActiveBeneficiaryOrVestingManager {        \n        IDistributor distributor = IDistributor(contractManager.getContract(\"Distributor\"));\n        distributor.withdrawBounty(validatorId, to);\n    }\n\n    /**\n     * @dev Allows Allocator contract to cancel vesting of a Beneficiary. Cancel\n     * vesting is performed upon termination.\n     */\n    function cancelVesting(uint256 vestedAmount) external allow(\"Allocator\") {\n        _availableAmountAfterTermination = vestedAmount;\n    }\n}\n"},"IContractManager.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    IContractManager.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Dmytro Stebaiev\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @title Contract Manager\n * @dev This contract is the main contract for upgradeable approach. This\n * contract contains the current mapping from contract IDs (in the form of\n * human-readable strings) to addresses.\n */\ninterface IContractManager {\n    /**\n     * @dev Returns the contract address of a given contract name.\n     *\n     * Requirements:\n     *\n     * - Contract mapping must exist.\n     */\n    function getContract(string calldata name) external view returns (address contractAddress);\n}\n"},"IDelegationController.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    IDelegationController.sol - SKALE Allocator\n    Copyright (C) 2019-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @dev Interface of Delegatable Token operations.\n */\ninterface IDelegationController {\n\n    function delegate(\n        uint256 validatorId,\n        uint256 amount,\n        uint256 delegationPeriod,\n        string calldata info\n    )\n        external;\n\n    function requestUndelegation(uint256 delegationId) external;\n\n    function cancelPendingDelegation(uint delegationId) external;\n}"},"IDistributor.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    IDistributor.sol - SKALE Allocator\n    Copyright (C) 2019-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @dev Interface of Distributor contract.\n */\ninterface IDistributor {\n\n    function withdrawBounty(uint256 validatorId, address to) external;\n}"},"IERC1820Registry.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``\u0027s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller\u0027s address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller\u0027s address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC777Recipient.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract\u0027s state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"},"IERC777Sender.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder\u0027s\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract\u0027s state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"},"Initializable.sol":{"content":"pragma solidity \u003e=0.4.24 \u003c0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"},"IProxyAdmin.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    IProxyAdmin.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Dmytro Stebaiev\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n// TODO: Remove it when @openzeppelin/upgrades will be compatible with solidity 0.6\ninterface IProxyAdmin {\n    function getProxyImplementation(address proxy) external view returns (address);\n}"},"IProxyFactory.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    IProxyFactory.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n// TODO: Remove it when @openzeppelin/upgrades will be compatible with solidity 0.6\ninterface IProxyFactory {\n    function deploy(uint256 _salt, address _logic, address _admin, bytes memory _data) external returns (address);\n}"},"ITimeHelpers.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    ITimeHelpers.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @title Time Helpers Interface\n * @dev Interface of Time Helper functions of the Time Helpers SKALE Allocator\n * contract.\n */\ninterface ITimeHelpers {\n    function getCurrentMonth() external view returns (uint);\n    function monthToTimestamp(uint month) external view returns (uint timestamp);\n}"},"ITokenState.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    ITokenState.sol - SKALE Allocator\n    Copyright (C) 2019-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\n/**\n * @dev Interface of Token State contract.\n */\ninterface ITokenState {\n\n    function getAndUpdateLockedAmount(address holder) external returns (uint);\n    function getAndUpdateForbiddenForDelegationAmount(address holder) external returns (uint);\n}"},"Permissions.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\n\n/*\n    Permissions.sol - SKALE Allocator\n    Copyright (C) 2020-Present SKALE Labs\n    @author Artem Payvin\n\n    SKALE Allocator is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    SKALE Allocator is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with SKALE Allocator.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\npragma solidity 0.6.10;\n\nimport \"./SafeMath.sol\";\nimport \"./AccessControl.sol\";\n\nimport \"./IContractManager.sol\";\n\n\n/**\n * @title Permissions - connected module for Upgradeable approach, knows ContractManager\n * @author Artem Payvin\n */\ncontract Permissions is AccessControlUpgradeSafe {\n    using SafeMath for uint;\n    using Address for address;\n\n    IContractManager public contractManager;\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_isOwner(), \"Caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev allow - throws if called by any account and contract other than the owner\n     * or `contractName` contract\n     */\n    modifier allow(string memory contractName) {\n        require(\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\n            \"Message sender is invalid\");\n        _;\n    }\n\n    function initialize(address contractManagerAddress) public virtual initializer {\n        AccessControlUpgradeSafe.__AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setContractManager(contractManagerAddress);\n    }\n\n    function _isOwner() internal view returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _setContractManager(address contractManagerAddress) private {\n        require(contractManagerAddress != address(0), \"ContractManager address is not set\");\n        require(contractManagerAddress.isContract(), \"Address is not contract\");\n        contractManager = IContractManager(contractManagerAddress);\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}