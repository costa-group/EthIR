{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/harvest/HarvestStakingAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\n\n\n/**\n * @dev StakingRewards contract interface.\n * Only the functions required for YearnStakingV1Adapter contract are added.\n * The StakingRewards contract is available here\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\n */\ninterface StakingRewards {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @title Adapter for Harvest protocol.\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract HarvestStakingAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant FARM = 0xa0246c9032bC3A600820415aE600c6388619A14D;\n    address internal constant FDAI = 0xe85C8581e60D7Cd32Bbfd86303d2A4FA6a951Dac;\n    address internal constant FUSDC = 0xc3F7ffb5d5869B3ade9448D094d81B0521e8326f;\n    address internal constant FUSDT = 0xc7EE21406BB581e741FBb8B21f213188433D9f2F;\n    address internal constant BALANCER_USDC_95_FARM_5 = 0x0395e4A17fF11D36DaC9959f2D7c8Eca10Fe89c9;\n    address internal constant UNISWAP_V2_USDC_FARM = 0x514906FC121c7878424a5C928cad1852CC545892;\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant LINK = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\n    address internal constant YFI = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\n    address internal constant SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\n    address internal constant YFV = 0x45f24BaEef268BB6d63AEe5129015d69702BCDfa;\n    address internal constant YFII = 0xa1d0E215a23d7030842FC67cE582a6aFa3CCaB83;\n    address internal constant OGN = 0x8207c1FfC5B6804F6024322CcF34F29c3541Ae26;\n    address internal constant UNISWAP_V2_BASED_SUSD = 0xaAD22f5543FCDaA694B68f94Be177B561836AE57;\n    address internal constant UNISWAP_V2_PASTA_WETH = 0xE92346d9369Fe03b735Ed9bDeB6bdC2591b8227E;\n\n    address internal constant FDAI_POOL = 0xF9E5f9024c2f3f2908A1d0e7272861a767C9484b;\n    address internal constant FUSDC_POOL = 0xE1f9A3EE001a2EcC906E8de637DBf20BB2d44633;\n    address internal constant FUSDT_POOL = 0x5bd997039FFF16F653EF15D1428F2C791519f58d;\n    address internal constant BALANCER_POOL = 0x6f8A975758436A5Ec38d2f9d2336504430465517;\n    address internal constant UNISWAP_POOL = 0x99b0d6641A63Ce173E6EB063b3d3AED9A35Cf9bf;\n    address internal constant PROFIT_SHARING_POOL = 0xae024F29C26D6f71Ec71658B1980189956B0546D;\n\n    address internal constant WETH_POOL = 0xE604Fd5b1317BABd0cF2c72F7F5f2AD8c00Adbe1;\n    address internal constant LINK_POOL = 0xa112c2354d27c2Fb3370cc5d027B28987117a268;\n    address internal constant YFI_POOL = 0x84646F736795a8bC22Ab34E05c8982CD058328C7;\n    address internal constant SUSHI_POOL = 0x4938960C507A4d7094C53A8cDdCF925835393B8f;\n    address internal constant YFV_POOL = 0x3631A32c959C5c52BC90AB5b7D212a8D00321918;\n    address internal constant YFII_POOL = 0xC97DDAa8091aBaF79A4910b094830CCE5cDd78f4;\n    address internal constant OGN_POOL = 0xF71042C88458ff1702c3870f62F4c764712Cc9F0;\n    address internal constant BASED_POOL = 0xb3b56c7BDc87F9DeB7972cD8b5c09329ce421F89;\n    address internal constant PASTA_POOL = 0xC6f39CFf6797baC5e29275177b6E8e315cF87D95;\n\n    /**\n     * @return Amount of staked tokens / rewards earned after staking for a given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        if (token == FARM) {\n            uint256 totalRewards = 0;\n\n            totalRewards += ERC20(PROFIT_SHARING_POOL).balanceOf(account);\n            totalRewards += StakingRewards(FDAI_POOL).earned(account);\n            totalRewards += StakingRewards(FUSDC_POOL).earned(account);\n            totalRewards += StakingRewards(FUSDT_POOL).earned(account);\n            totalRewards += StakingRewards(BALANCER_POOL).earned(account);\n            totalRewards += StakingRewards(UNISWAP_POOL).earned(account);\n            totalRewards += StakingRewards(WETH_POOL).earned(account);\n            totalRewards += StakingRewards(LINK_POOL).earned(account);\n            totalRewards += StakingRewards(YFI_POOL).earned(account);\n            totalRewards += StakingRewards(SUSHI_POOL).earned(account);\n            totalRewards += StakingRewards(YFV_POOL).earned(account);\n            totalRewards += StakingRewards(YFII_POOL).earned(account);\n            totalRewards += StakingRewards(OGN_POOL).earned(account);\n            totalRewards += StakingRewards(BASED_POOL).earned(account);\n            totalRewards += StakingRewards(PASTA_POOL).earned(account);\n\n            return totalRewards;\n        } else if (token == DAI) {\n            return StakingRewards(PROFIT_SHARING_POOL).earned(account);\n        } else if (token == FDAI) {\n            return ERC20(FDAI_POOL).balanceOf(account);\n        } else if (token == FUSDC) {\n            return ERC20(FUSDC_POOL).balanceOf(account);\n        } else if (token == FUSDT) {\n            return ERC20(FUSDT_POOL).balanceOf(account);\n        } else if (token == BALANCER_USDC_95_FARM_5) {\n            return ERC20(BALANCER_POOL).balanceOf(account);\n        } else if (token == UNISWAP_V2_USDC_FARM) {\n            return ERC20(UNISWAP_POOL).balanceOf(account);\n        } else if (token == WETH) {\n            return ERC20(WETH_POOL).balanceOf(account);\n        } else if (token == LINK) {\n            return ERC20(LINK_POOL).balanceOf(account);\n        } else if (token == YFI) {\n            return ERC20(YFI_POOL).balanceOf(account);\n        } else if (token == SUSHI) {\n            return ERC20(SUSHI_POOL).balanceOf(account);\n        } else if (token == YFV) {\n            return ERC20(YFV_POOL).balanceOf(account);\n        } else if (token == YFII) {\n            return ERC20(YFII_POOL).balanceOf(account);\n        } else if (token == OGN) {\n            return ERC20(OGN_POOL).balanceOf(account);\n        } else if (token == UNISWAP_V2_BASED_SUSD) {\n            return ERC20(BASED_POOL).balanceOf(account);\n        } else if (token == UNISWAP_V2_PASTA_WETH) {\n            return ERC20(PASTA_POOL).balanceOf(account);\n        } else {\n            return 0;\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}