{"IOwnershipTransferrable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface IOwnershipTransferrable {\n  function transferOwnership(address owner) external;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./IOwnershipTransferrable.sol\";\n\nabstract contract Ownable is IOwnershipTransferrable {\n  address private _owner;\n\n  constructor(address owner) {\n    _owner = owner;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function transferOwnership(address newOwner) override external onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.0;\n\nabstract contract ReentrancyGuard {\n  bool private _entered;\n\n  modifier noReentrancy() {\n    require(!_entered);\n    _entered = true;\n    _;\n    _entered = false;\n  }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003c= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003e 0);\n    uint256 c = a / b;\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n"},"Vybe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\n\ncontract Vybe is Ownable {\n  using SafeMath for uint256;\n\n  uint256 constant UINT256_MAX = ~uint256(0);\n\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  uint256 private _totalSupply;\n  mapping(address =\u003e uint256) private _balances;\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  constructor() Ownable(msg.sender) {\n    _name = \"Vybe\";\n    _symbol = \"VYBE\";\n    _decimals = 18;\n\n    _totalSupply = 2000000 * 1e18;\n    _balances[msg.sender] = _totalSupply;\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  function name() external view returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() external view returns (uint8) {\n    return _decimals;\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address account) external view returns (uint256) {\n    return _balances[account];\n  }\n\n  function allowance(address owner, address spender) external view returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  function transfer(address recipient, uint256 amount) external returns (bool) {\n    _transfer(msg.sender, recipient, amount);\n    return true;\n  }\n\n  function approve(address spender, uint256 amount) external returns (bool) {\n    _approve(msg.sender, spender, amount);\n    return true;\n  }\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n    _transfer(sender, recipient, amount);\n    if (_allowances[msg.sender][sender] != UINT256_MAX) {\n      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n    }\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n    return true;\n  }\n\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0));\n    require(recipient != address(0));\n\n    _balances[sender] = _balances[sender].sub(amount);\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  function _approve(address owner, address spender, uint256 amount) internal {\n    require(owner != address(0));\n    require(spender != address(0));\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  function mint(address account, uint256 amount) external onlyOwner {\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  function burn(uint256 amount) external returns (bool) {\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(msg.sender, address(0), amount);\n    return true;\n  }\n}\n"},"VybeStake.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./SafeMath.sol\";\nimport \"./IOwnershipTransferrable.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./Vybe.sol\";\n\ncontract VybeStake is ReentrancyGuard, Ownable {\n  using SafeMath for uint256;\n\n  uint256 constant UINT256_MAX = ~uint256(0);\n  uint256 constant MONTH = 30 days;\n\n  Vybe private _VYBE;\n\n  bool private _dated;\n  bool private _migrated;\n  uint256 _deployedAt;\n\n  uint256 _totalStaked;\n  mapping (address =\u003e uint256) private _staked;\n  mapping (address =\u003e uint256) private _lastClaim;\n  address private _developerFund;\n\n  event StakeIncreased(address indexed staker, uint256 amount);\n  event StakeDecreased(address indexed staker, uint256 amount);\n  event Rewards(address indexed staker, uint256 mintage, uint256 developerFund);\n  event MelodyAdded(address indexed melody);\n  event MelodyRemoved(address indexed melody);\n\n  constructor(address vybe) Ownable(msg.sender) {\n    _VYBE = Vybe(vybe);\n    _developerFund = msg.sender;\n    _deployedAt = block.timestamp;\n  }\n\n  function upgradeDevelopmentFund(address fund) external onlyOwner {\n    _developerFund = fund;\n  }\n\n  function vybe() external view returns (address) {\n    return address(_VYBE);\n  }\n\n  function totalStaked() external view returns (uint256) {\n    return _totalStaked;\n  }\n\n  function migrate(address previous, address[] memory people, uint256[] memory lastClaims) external {\n    require(!_migrated);\n    require(people.length == lastClaims.length);\n    for (uint i = 0; i \u003c people.length; i++) {\n      uint256 staked = VybeStake(previous).staked(people[i]);\n      _staked[people[i]] = staked;\n      _totalStaked = _totalStaked.add(staked);\n      _lastClaim[people[i]] = lastClaims[i];\n      emit StakeIncreased(people[i], staked);\n    }\n    require(_VYBE.transferFrom(previous, address(this), _VYBE.balanceOf(previous)));\n    _migrated = true;\n  }\n\n  function staked(address staker) external view returns (uint256) {\n    return _staked[staker];\n  }\n\n  function lastClaim(address staker) external view returns (uint256) {\n    return _lastClaim[staker];\n  }\n\n  function increaseStake(uint256 amount) external {\n    require(!_dated);\n\n    require(_VYBE.transferFrom(msg.sender, address(this), amount));\n    _totalStaked = _totalStaked.add(amount);\n    _lastClaim[msg.sender] = block.timestamp;\n    _staked[msg.sender] = _staked[msg.sender].add(amount);\n    emit StakeIncreased(msg.sender, amount);\n  }\n\n  function decreaseStake(uint256 amount) external {\n    _staked[msg.sender] = _staked[msg.sender].sub(amount);\n    _totalStaked = _totalStaked.sub(amount);\n    require(_VYBE.transfer(address(msg.sender), amount));\n    emit StakeDecreased(msg.sender, amount);\n  }\n\n  function calculateSupplyDivisor() public view returns (uint256) {\n    // base divisior for 5%\n    uint256 result = uint256(20)\n      .add(\n        // get how many months have passed since deployment\n        block.timestamp.sub(_deployedAt).div(MONTH)\n        // multiply by 5 which will be added, tapering from 20 to 50\n        .mul(5)\n      );\n\n    // set a cap of 50\n    if (result \u003e 50) {\n      result = 50;\n    }\n    return result;\n  }\n\n  function _calculateMintage(address staker) private view returns (uint256) {\n    // total supply\n    uint256 share = _VYBE.totalSupply()\n      // divided by the supply divisor\n      // initially 20 for 5%, increases to 50 over months for 2%\n      .div(calculateSupplyDivisor())\n      // divided again by their stake representation\n      .div(_totalStaked.div(_staked[staker]));\n\n    // this share is supposed to be issued monthly, so see how many months its been\n    uint256 timeElapsed = block.timestamp.sub(_lastClaim[staker]);\n    uint256 mintage = 0;\n    // handle whole months\n    if (timeElapsed \u003e MONTH) {\n      mintage = share.mul(timeElapsed.div(MONTH));\n      timeElapsed = timeElapsed.mod(MONTH);\n    }\n    // handle partial months, if there are any\n    // this if check prevents a revert due to div by 0\n    if (timeElapsed != 0) {\n      mintage = mintage.add(share.div(MONTH.div(timeElapsed)));\n    }\n    return mintage;\n  }\n\n  function calculateRewards(address staker) public view returns (uint256) {\n    // removes the five percent for the dev fund\n    return _calculateMintage(staker).div(20).mul(19);\n  }\n\n  // noReentrancy shouldn\u0027t be needed due to the lack of external calls\n  // better safe than sorry\n  function claimRewards() external noReentrancy {\n    require(!_dated);\n\n    uint256 mintage = _calculateMintage(msg.sender);\n    uint256 mintagePiece = mintage.div(20);\n    require(mintagePiece \u003e 0);\n\n    // update the last claim time\n    _lastClaim[msg.sender] = block.timestamp;\n    // mint out their staking rewards and the dev funds\n    _VYBE.mint(msg.sender, mintage.sub(mintagePiece));\n    _VYBE.mint(_developerFund, mintagePiece);\n\n    emit Rewards(msg.sender, mintage, mintagePiece);\n  }\n\n  function addMelody(address melody) external onlyOwner {\n    _VYBE.approve(melody, UINT256_MAX);\n    emit MelodyAdded(melody);\n  }\n\n  function removeMelody(address melody) external onlyOwner {\n    _VYBE.approve(melody, 0);\n    emit MelodyRemoved(melody);\n  }\n\n  function upgrade(address owned, address upgraded) external onlyOwner {\n    _dated = true;\n    IOwnershipTransferrable(owned).transferOwnership(upgraded);\n  }\n}\n"}}