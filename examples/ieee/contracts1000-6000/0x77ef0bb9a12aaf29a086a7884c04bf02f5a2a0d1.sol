{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/pieDAO/PieDAOStakingAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\n\n\n/**\n * @dev StakingRewards contract interface.\n * Only the functions required for PieDAOStakingAdapter contract are added.\n * The StakingRewards contract is available here\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\n */\ninterface StakingRewards {\n    function earned(address) external view returns (uint256);\n}\n\n/**\n * @title Adapter for PieDAO protocol (staking).\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract PieDAOStakingAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant DOUGH = 0xad32A8e6220741182940c5aBF610bDE99E737b2D;\n    address internal constant BALANCER_ETH_20_DOUGH_80 = 0xFAE2809935233d4BfE8a56c2355c4A2e7d1fFf1A;\n    address internal constant UNISWAP_DAI_DEFI = 0x7aeFaF3ea1b465dd01561B0548c9FD969e3F76BA;\n    address internal constant BALANCER_DEFI_70_ETH_30 = 0x35333CF3Db8e334384EC6D2ea446DA6e445701dF;\n\n    address internal constant BALANCER_ETH_20_DOUGH_80_POOL = 0x8314337d2b13e1A61EadF0FD1686b2134D43762F;\n    address internal constant UNISWAP_DAI_DEFI_POOL = 0x64964cb69f40A1B56AF76e32Eb5BF2e2E52a747c;\n    address internal constant BALANCER_DEFI_70_ETH_30_POOL = 0x220f25C2105a65425913FE0CF38e7699E3992B97;\n\n    /**\n     * @return Amount of staked LP tokens for a given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        if (token == DOUGH) {\n            uint256 totalBalance = 0;\n\n            totalBalance += StakingRewards(BALANCER_ETH_20_DOUGH_80_POOL).earned(account);\n            totalBalance += StakingRewards(UNISWAP_DAI_DEFI_POOL).earned(account);\n            totalBalance += StakingRewards(BALANCER_DEFI_70_ETH_30_POOL).earned(account);\n\n            return totalBalance;\n        } else if (token == BALANCER_ETH_20_DOUGH_80) {\n            return ERC20(BALANCER_ETH_20_DOUGH_80_POOL).balanceOf(account);\n        } else if (token == UNISWAP_DAI_DEFI) {\n            return ERC20(UNISWAP_DAI_DEFI_POOL).balanceOf(account);\n        } else if (token == BALANCER_DEFI_70_ETH_30) {\n            return ERC20(BALANCER_DEFI_70_ETH_30_POOL).balanceOf(account);\n        } else {\n            return 0;\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}