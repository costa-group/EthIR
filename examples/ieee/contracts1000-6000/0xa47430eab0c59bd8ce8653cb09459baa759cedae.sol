{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"PredixNetworkStaking.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\" ; \r\n\r\n//@title PRDX token contract interface\r\ninterface PRDX_token {\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function transfer(address _to, uint256 _value) external returns (bool success) ; \r\n}\r\n\r\n//@title PRDX Staking contract\r\n//@author Predix Network Team\r\ncontract PredixNetworkStaking is Ownable {\r\n    using SafeMath for uint256 ; \r\n    \r\n    //time variables\r\n    uint public week = 604800 ; \r\n    \r\n    //level definitions\r\n    uint public _lvl1 = 50 * 1e18 ;  \r\n    uint public _lvl2 = 500 * 1e18 ;  \r\n    uint public _lvl3 = 5000 * 1e18 ; \r\n    \r\n    //active staking coins\r\n    uint public coins_staking ; \r\n    \r\n    //Staking Defintions\r\n    mapping (address =\u003e bool) public isStaking ; \r\n    mapping(address =\u003e uint256) public stakingAmount ;\r\n    mapping(address =\u003e uint256) public stakingStart ;\r\n    \r\n    //contract addresses\r\n    address public token_addr ; \r\n    \r\n    PRDX_token token_contract = PRDX_token(token_addr) ;\r\n    \r\n    event staked(address staker, uint256 amount) ;\r\n    event ended_stake(address staker, uint256 reward) ; \r\n    \r\n    /**\r\n     * @dev Set PRDX Token contract address\r\n     * @param addr Address of PRDX Token contract\r\n     */\r\n    function set_token_address(address addr) public onlyOwner {\r\n        token_addr = addr ; \r\n        token_contract = PRDX_token(addr) ;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get staking amount of user, hook for other contracts\r\n     * @param staker User address to get staking amount for\r\n     * @return staking_amount Only zero if user is not staking\r\n     */\r\n    function get_staking_amount(address staker) public view returns (uint256 staking_amount) {\r\n        if (isStaking[staker] == false) {\r\n            return 0 ; \r\n        }\r\n        return stakingAmount[staker] ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Get user staking status, hook for other contracts\r\n     * @param user User address to get staking status for\r\n     * @return is_staking Is false if user is not staking, true if staking\r\n     */\r\n    function get_is_staking(address user) public view returns (bool is_staking) {\r\n     return isStaking[user] ;    \r\n    }\r\n    \r\n    /**\r\n     * @dev Stake tokens, should be called through main token contract. User must have approved \r\n     * staking contract, amount must be at least {_lvl1} and cannot be staking already. Extra \r\n     * check for staking timestamp performed to prevent timestamp errors and futuristic staking\r\n     * @param   staker User address to stake tokens for\r\n     *          amount Amount of tokens to stake\r\n     * @return success Only false if transaction fails\r\n     */\r\n    function stake(address staker, uint256 amount) public payable returns (bool success) {\r\n        require(amount \u003e= _lvl1, \"Not enough tokens to start staking\") ; \r\n        require(isStaking[staker] == false, \"Already staking\") ;\r\n        require(stakingStart[staker] \u003c= block.timestamp, \"Error getting staking timestamp\") ; \r\n        require(token_contract.transferFrom(staker, address(this), amount), \"Error transacting tokens to contract\") ;\r\n        \r\n        isStaking[staker] = true ; \r\n        stakingAmount[staker] = amount ;  \r\n        stakingStart[staker] = block.timestamp ; \r\n        coins_staking += amount ; \r\n        \r\n        emit staked(staker, amount) ; \r\n        return true ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Stop staking currently staking tokens. Sender has to be staking\r\n     */\r\n    function stop_stake() public returns (bool success) {\r\n        require(stakingStart[msg.sender] \u003c= block.timestamp, \"Staking timestamp error\") ; \r\n        require(isStaking[msg.sender] == true, \"User not staking\") ; \r\n\r\n        uint256 reward = getStakingReward(msg.sender) + stakingAmount[msg.sender] ; \r\n\r\n        token_contract.transfer(msg.sender, reward) ; \r\n      \r\n        coins_staking -= stakingAmount[msg.sender] ;\r\n        stakingAmount[msg.sender] = 0 ; \r\n        isStaking[msg.sender] = false ;\r\n         \r\n        emit ended_stake(msg.sender, reward) ; \r\n        return true ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate staking reward\r\n     * @param staker Address to get the staking reward for\r\n     */\r\n    function getStakingReward(address staker) public view returns (uint256 __reward) {\r\n        uint amount = stakingAmount[staker] ; \r\n        uint age = getCoinAge(staker) ; \r\n        \r\n        if ((amount \u003e= _lvl1) \u0026\u0026 (amount \u003c _lvl2)) {\r\n            return calc_lvl1(amount, age) ; \r\n        }\r\n        \r\n        if ((amount \u003e= _lvl2) \u0026\u0026 (amount \u003c _lvl3)) {\r\n            return calc_lvl2(amount, age) ; \r\n        }\r\n        \r\n        if (amount \u003e= _lvl3) {\r\n            return calc_lvl3(amount, age) ;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate staking reward for level 1 staker\r\n     * @param   amount Amount of PRDX tokens to calculate staking reward performed\r\n     *          age Age of staked tokens\r\n     */    \r\n    function calc_lvl1(uint amount, uint age) public view returns (uint256 reward) {\r\n        uint256 _weeks = age/week ;\r\n        uint interest = amount ;\r\n        \r\n        for (uint i = 0; i \u003c _weeks; i++) {\r\n            interest += 25 * interest / 10000 ; \r\n        }\r\n        \r\n        return interest - amount ; \r\n    }\r\n\r\n    /**\r\n     * @dev Calculate staking reward for level 2 staker\r\n     * @param   amount Amount of PRDX tokens to calculate staking reward performed\r\n     *          age Age of staked tokens\r\n     */    \r\n    function calc_lvl2(uint amount, uint age) public view returns (uint256 reward) {\r\n        uint256 _weeks = age/week ;\r\n        uint interest = amount ;\r\n        \r\n        for (uint i = 0; i \u003c _weeks; i++) {\r\n            interest += 50 * interest / 10000 ; \r\n        }\r\n        \r\n        return interest - amount ; \r\n    }\r\n\r\n    /**\r\n     * @dev Calculate staking reward for level 3 staker\r\n     * @param   amount Amount of PRDX tokens to calculate staking reward performed\r\n     *          age Age of staked tokens\r\n     */    \r\n    function calc_lvl3(uint amount, uint age) public view returns (uint256 reward) {\r\n        uint256 _weeks = age/week ;\r\n        uint interest = amount ;\r\n        \r\n        for (uint i = 0; i \u003c _weeks; i++) {\r\n            interest += 85 * interest / 10000 ; \r\n        }\r\n        \r\n        return interest - amount ; \r\n    }\r\n    \r\n    /**\r\n     * @dev Get coin age of staker. Returns zero if user not staking\r\n     * @param staker Address to get the staking age for\r\n     */\r\n    function getCoinAge(address staker) public view returns(uint256 age) {\r\n        if (isStaking[staker] == true){\r\n            return (block.timestamp.sub(stakingStart[staker])) ;\r\n        }\r\n        else {\r\n            return 0 ;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns total amount of coins actively staking\r\n     */\r\n    function get_total_coins_staking() public view returns (uint256 amount) {\r\n        return coins_staking ; \r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003e 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003c= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c \u003e= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}"}}