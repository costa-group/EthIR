{{
  "language": "Solidity",
  "sources": {
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/kyber/KyberAssetAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev KyberStaking contract interface.\r\n * Only the functions required for KyberAssetAdapter contract are added.\r\n * The KyberStaking contract is available here\r\n * github.com/KyberNetwork/smart-contracts/blob/Katalyst/contracts/sol6/Dao/KyberStaking.sol.\r\n */\r\ninterface KyberStaking {\r\n    function getLatestStakerData(address) external view returns (uint256, uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev KyberDAO contract interface.\r\n * Only the functions required for KyberAssetAdapter contract are added.\r\n * The KyberDAO contract is available here\r\n * github.com/KyberNetwork/smart-contracts/blob/Katalyst/contracts/sol6/Dao/KyberDAO.sol.\r\n */\r\ninterface KyberDAO {\r\n    function getCurrentEpochNumber() external view returns (uint32);\r\n    function getPastEpochRewardPercentageInPrecision(\r\n        address,\r\n        uint32\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev KyberFeeHandler contract interface.\r\n * Only the functions required for KyberAssetAdapter contract are added.\r\n * The KyberFeeHandler contract is available here\r\n * github.com/KyberNetwork/smart-contracts/blob/Katalyst/contracts/sol6/Dao/KyberFeeHandler.sol.\r\n */\r\ninterface KyberFeeHandler {\r\n    function hasClaimedReward(address, uint32) external view returns (bool);\r\n    function rewardsPerEpoch(uint32) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Asset adapter for KyberDAO protocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract KyberAssetAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    address internal constant KNC = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200;\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant DAO = 0x49bdd8854481005bBa4aCEbaBF6e06cD5F6312e9;\r\n    address internal constant STAKING = 0xECf0bdB7B3F349AbfD68C3563678124c5e8aaea3;\r\n    address internal constant FEE_HANDLER = 0xd3d2b5643e506c6d9B7099E9116D7aAa941114fe;\r\n\r\n    uint256 internal constant PRECISION = 1e18;\r\n\r\n    /**\r\n     * @return Amount of KNC/ETH locked on the protocol by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        if (token == KNC) {\r\n            uint256 stake;\r\n            uint256 delegatedStake;\r\n            (stake, delegatedStake) = KyberStaking(STAKING).getLatestStakerData(account);\r\n            return stake + delegatedStake;\r\n        } else if (token == ETH) {\r\n            uint256 reward = 0;\r\n            uint256 rewardPercentage;\r\n            uint256 rewardsPerEpoch;\r\n            uint32 curEpoch = KyberDAO(DAO).getCurrentEpochNumber();\r\n            for (uint32 i = 0; i < curEpoch; i++) {\r\n                if (!KyberFeeHandler(FEE_HANDLER).hasClaimedReward(account, i)) {\r\n                    rewardPercentage = KyberDAO(DAO).getPastEpochRewardPercentageInPrecision(account, i);\r\n                    if (rewardPercentage > 0) {\r\n                        rewardsPerEpoch = KyberFeeHandler(FEE_HANDLER).rewardsPerEpoch(i);\r\n                        reward += rewardsPerEpoch * rewardPercentage / PRECISION;\r\n                    }\r\n                }\r\n            }\r\n            return reward;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}