{"ConnectStaking.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport { SafeMath } from \"./SafeMath.sol\";\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract DSMath {\n  uint constant WAD = 10 ** 18;\n  uint constant RAY = 10 ** 27;\n\n  function add(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(x, y);\n  }\n\n  function sub(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.sub(x, y);\n  }\n\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.mul(x, y);\n  }\n\n  function div(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.div(x, y);\n  }\n\n  function wmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n  }\n\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n  }\n\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n  }\n\n  function rmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n  }\n\n}\n\ncontract Stores {\n\n  /**\n   * @dev Return ethereum address\n   */\n  function getEthAddr() internal pure returns (address) {\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n  }\n\n  /**\n   * @dev Return memory variable address\n   */\n  function getMemoryAddr() internal pure returns (address) {\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n  }\n\n  /**\n   * @dev Return InstaEvent Address.\n   */\n  function getEventAddr() internal pure returns (address) {\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n  }\n\n  /**\n   * @dev Get Uint value from InstaMemory Contract.\n   */\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n  }\n\n  /**\n  * @dev Set Uint value in InstaMemory Contract.\n  */\n  function setUint(uint setId, uint val) virtual internal {\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n  }\n\n  /**\n  * @dev emit event on event contract\n  */\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\n    (uint model, uint id) = connectorID();\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n  }\n\n  /**\n  * @dev Connector Details - needs to be changed before deployment\n  */\n  function connectorID() public view returns(uint model, uint id) {\n    (model, id) = (0, 0);\n  }\n\n}\n\n\ninterface IStakingRewards {\n  function stake(uint256 amount) external;\n  function withdraw(uint256 amount) external;\n  function getReward() external;\n  function balanceOf(address) external view returns(uint);\n}\n\ninterface SynthetixMapping {\n\n  struct StakingData {\n    address stakingPool;\n    address stakingToken;\n  }\n\n  function stakingMapping(bytes32) external view returns(StakingData memory);\n\n}\n\ncontract StakingHelper is DSMath, Stores {\n  /**\n   * @dev Return InstaDApp Staking Mapping Addresses\n   */\n  function getMappingAddr() internal virtual view returns (address) {\n    return 0x772590F33eD05b0E83553650BF9e75A04b337526; // InstaMapping Address\n  }\n\n  /**\n   * @dev Convert String to bytes32.\n   */\n  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n    require(bytes(str).length != 0, \"string-empty\");\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      result := mload(add(str, 32))\n    }\n  }\n\n  /**\n   * @dev Get staking data\n   */\n  function getStakingData(string memory stakingName)\n  internal\n  virtual\n  view\n  returns (\n    IStakingRewards stakingContract,\n    TokenInterface stakingToken,\n    bytes32 stakingType\n  )\n  {\n    stakingType = stringToBytes32(stakingName);\n    SynthetixMapping.StakingData memory stakingData = SynthetixMapping(getMappingAddr()).stakingMapping(stakingType);\n    require(stakingData.stakingPool != address(0) \u0026\u0026 stakingData.stakingToken != address(0), \"Wrong Staking Name\");\n    stakingContract = IStakingRewards(stakingData.stakingPool);\n    stakingToken = TokenInterface(stakingData.stakingToken);\n  }\n}\n\ncontract Staking is StakingHelper {\n  event LogDeposit(\n    address token,\n    bytes32 stakingType,\n    uint256 amount,\n    uint getId,\n    uint setId\n  );\n\n  event LogWithdraw(\n    address token,\n    bytes32 stakingType,\n    uint256 amount,\n    uint getId,\n    uint setId\n  );\n\n  event LogClaimedReward(\n    address token,\n    bytes32 stakingType,\n    uint256 rewardAmt,\n    uint setId\n  );\n\n  /**\n  * @dev Deposit Token.\n    * @param stakingPoolName staking token address.\n    * @param amt staking token amount.\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n    * @param setId Set token amount at this ID in `InstaMemory` Contract.\n  */\n  function deposit(\n    string calldata stakingPoolName,\n    uint amt,\n    uint getId,\n    uint setId\n  ) external payable {\n    uint _amt = getUint(getId, amt);\n    (IStakingRewards stakingContract, TokenInterface stakingToken, bytes32 stakingType) = getStakingData(stakingPoolName);\n    _amt = _amt == uint(-1) ? stakingToken.balanceOf(address(this)) : _amt;\n\n    stakingToken.approve(address(stakingContract), _amt);\n    stakingContract.stake(_amt);\n\n    setUint(setId, _amt);\n    emit LogDeposit(address(stakingToken), stakingType, _amt, getId, setId);\n    bytes32 _eventCode = keccak256(\"LogDeposit(address,bytes32,uint256,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(address(stakingToken), stakingType, _amt, getId, setId);\n    emitEvent(_eventCode, _eventParam);\n  }\n\n  /**\n  * @dev Withdraw Token.\n    * @param stakingPoolName staking token address.\n    * @param amt staking token amount.\n    * @param getId Get token amount at this ID from `InstaMemory` Contract.\n    * @param setIdAmount Set token amount at this ID in `InstaMemory` Contract.\n    * @param setIdReward Set reward amount at this ID in `InstaMemory` Contract.\n  */\n  function withdraw(\n    string calldata stakingPoolName,\n    uint amt,\n    uint getId,\n    uint setIdAmount,\n    uint setIdReward\n  ) external payable {\n    uint _amt = getUint(getId, amt);\n    (IStakingRewards stakingContract, TokenInterface stakingToken, bytes32 stakingType) = getStakingData(stakingPoolName);\n\n    _amt = _amt == uint(-1) ? stakingContract.balanceOf(address(this)) : _amt;\n    uint intialBal = stakingToken.balanceOf(address(this));\n    stakingContract.withdraw(_amt);\n    stakingContract.getReward();\n    uint finalBal = stakingToken.balanceOf(address(this));\n\n    uint rewardAmt = sub(finalBal, intialBal);\n\n    setUint(setIdAmount, _amt);\n    setUint(setIdReward, rewardAmt);\n\n    emit LogWithdraw(address(stakingToken), stakingType, _amt, getId, setIdAmount);\n    bytes32 _eventCodeWithdraw = keccak256(\"LogWithdraw(address,bytes32,uint256,uint256,uint256)\");\n    bytes memory _eventParamWithdraw = abi.encode(address(stakingToken), _amt, getId, setIdAmount);\n    emitEvent(_eventCodeWithdraw, _eventParamWithdraw);\n\n    emit LogClaimedReward(address(stakingToken), stakingType, rewardAmt, setIdReward);\n    bytes32 _eventCodeReward = keccak256(\"LogClaimedReward(address,bytes32,uint256,uint256)\");\n    bytes memory _eventParamReward = abi.encode(address(stakingToken), rewardAmt, setIdReward);\n    emitEvent(_eventCodeReward, _eventParamReward);\n  }\n\n  /**\n  * @dev Claim Reward.\n    * @param stakingPoolName staking token address.\n    * @param setId Set reward amount at this ID in `InstaMemory` Contract.\n  */\n  function claimReward(\n    string calldata stakingPoolName,\n    uint setId\n  ) external payable {\n    (IStakingRewards stakingContract, TokenInterface stakingToken, bytes32 stakingType) = getStakingData(stakingPoolName);\n\n    uint intialBal = stakingToken.balanceOf(address(this));\n    stakingContract.getReward();\n    uint finalBal = stakingToken.balanceOf(address(this));\n\n    uint rewardAmt = sub(finalBal, intialBal);\n\n    setUint(setId, rewardAmt);\n    emit LogClaimedReward(address(stakingToken), stakingType, rewardAmt, setId);\n    bytes32 _eventCode = keccak256(\"LogClaimedReward(address,bytes32,uint256,uint256)\");\n    bytes memory _eventParam = abi.encode(address(stakingToken), stakingType, rewardAmt, setId);\n    emitEvent(_eventCode, _eventParam);\n  }\n}\n\ncontract ConnectStaking is Staking {\n  string public name = \"staking-v1\";\n}\n\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}