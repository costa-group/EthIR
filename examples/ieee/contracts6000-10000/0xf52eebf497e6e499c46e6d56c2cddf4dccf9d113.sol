{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/mstable/MstableStakingAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\n\n\n/**\n * @dev StakingRewards contract interface.\n * Only the functions required for MstableStakingAdapter contract are added.\n * The StakingRewards contract is available here\n * github.com/mstable/mStable-contracts/blob/master/contracts/rewards/staking/StakingRewards.sol.\n */\ninterface StakingRewards {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @dev StakingRewardsWithPlatformToken contract interface.\n * Only the functions required for MstableStakingAdapter contract are added.\n * The StakingRewardsWithPlatformToken contract is available here\n * github.com/mstable/mStable-contracts/blob/master/contracts/rewards/staking/StakingRewardsWithPlatformToken.sol.\n */\ninterface StakingRewardsWithPlatformToken {\n    function earned(address) external view returns (uint256, uint256);\n}\n\n\n/**\n * @title Adapter for mStable protocol staking.\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract MstableStakingAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant MTA = 0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2;\n    address internal constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\n    address internal constant BALANCER_MUSD_MTA_20_80 = 0x003a70265a3662342010823bEA15Dc84C6f7eD54;\n    address internal constant BALANCER_USDC_MUSD_50_50 = 0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C;\n    address internal constant BALANCER_MUSD_MTA_95_5 = 0xa5DA8Cc7167070B62FdCB332EF097A55A68d8824;\n    address internal constant BALANCER_WETH_MUSD_50_50 = 0xe036CCE08cf4E23D33bC6B18e53Caf532AFa8513;\n    address internal constant UNISWAP_MTA_WETH = 0x0d0d65E7A7dB277d3E0F5E1676325E75f3340455;\n\n    address internal constant EARN_POOL = 0x881c72D1e6317f10a1cDCBe05040E7564E790C80;\n    address internal constant EARN_POOL_2 = 0xf7575D4D4DB78F6Ba43C734616C51E9fD4bAA7fb;\n    address internal constant EARN_POOL_3 = 0x25970282aAC735Cd4c76f30BfB0Bf2BC8DAD4e70;\n    address internal constant EARN_POOL_4 = 0xf4a7d2d85F4BA11B5C73c35E27044c0c49F7f027;\n    address internal constant EARN_POOL_5 = 0x9B4abA35b35EEE7481775cCB4055Ce4e176C9a6F;\n\n    /**\n     * @return Amount of YTokens held by the given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        if (token == MTA) {\n            uint256 totalRewards = 0;\n            uint256 reward;\n            (reward, ) = StakingRewardsWithPlatformToken(EARN_POOL).earned(account);\n            totalRewards += reward;\n            (reward, ) = StakingRewardsWithPlatformToken(EARN_POOL_2).earned(account);\n            totalRewards += reward;\n            (reward, ) = StakingRewardsWithPlatformToken(EARN_POOL_3).earned(account);\n            totalRewards += reward;\n            (reward, ) = StakingRewardsWithPlatformToken(EARN_POOL_4).earned(account);\n            totalRewards += reward;\n            totalRewards += StakingRewards(EARN_POOL_5).earned(account);\n            return totalRewards;\n        } else if (token == BAL) {\n            uint256 totalRewards = 0;\n            uint256 reward;\n            (, reward) = StakingRewardsWithPlatformToken(EARN_POOL).earned(account);\n            totalRewards += reward;\n            (, reward) = StakingRewardsWithPlatformToken(EARN_POOL_2).earned(account);\n            totalRewards += reward;\n            (, reward) = StakingRewardsWithPlatformToken(EARN_POOL_3).earned(account);\n            totalRewards += reward;\n            (, reward) = StakingRewardsWithPlatformToken(EARN_POOL_4).earned(account);\n            totalRewards += reward;\n            return totalRewards;\n        } else if (token == BALANCER_USDC_MUSD_50_50) {\n            return ERC20(EARN_POOL).balanceOf(account);\n        } else if (token == BALANCER_WETH_MUSD_50_50) {\n            return ERC20(EARN_POOL_2).balanceOf(account);\n        } else if (token == BALANCER_MUSD_MTA_20_80) {\n            return ERC20(EARN_POOL_3).balanceOf(account);\n        } else if (token == BALANCER_MUSD_MTA_95_5) {\n            return ERC20(EARN_POOL_4).balanceOf(account);\n        } else if (token == UNISWAP_MTA_WETH) {\n            return ERC20(EARN_POOL_5).balanceOf(account);\n        } else {\n            return 0;\n        }\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}