{"ActionTransfer.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\npragma experimental ABIEncoderV2;\n\nimport {GelatoActionsStandardFull} from \"./GelatoActionsStandardFull.sol\";\nimport {IERC20} from \"./IERC20.sol\";\nimport {Address} from \"./Address.sol\";\nimport {GelatoBytes} from \"./GelatoBytes.sol\";\nimport {SafeERC20} from \"./SafeERC20.sol\";\nimport {DataFlow} from \"./IGelatoCore.sol\";\n\n/// @dev This action is for user proxies that store funds.\ncontract ActionTransfer is GelatoActionsStandardFull {\n    // using SafeERC20 for IERC20; \u003c- internal library methods vs. try/catch\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    // ======= DEV HELPERS =========\n    /// @dev use this function to encode the data off-chain for the action data field\n    function getActionData(address _sendToken, uint256 _sendAmount, address _destination)\n        public\n        pure\n        virtual\n        returns(bytes memory)\n    {\n        return abi.encodeWithSelector(\n            this.action.selector,\n            _sendToken,\n            _sendAmount,\n            _destination\n        );\n    }\n\n    /// @dev Used by GelatoActionPipeline.isValid()\n    function DATA_FLOW_IN_TYPE() public pure virtual override returns (bytes32) {\n        return keccak256(\"TOKEN,UINT256\");\n    }\n\n    /// @dev Used by GelatoActionPipeline.isValid()\n    function DATA_FLOW_OUT_TYPE() public pure virtual override returns (bytes32) {\n        return keccak256(\"TOKEN,UINT256\");\n    }\n\n    // ======= ACTION IMPLEMENTATION DETAILS =========\n    /// @dev Always use this function for encoding _actionData off-chain\n    ///  Will be called by GelatoActionPipeline if Action.dataFlow.None\n    function action(address sendToken, uint256 sendAmount, address destination)\n        public\n        virtual\n        delegatecallOnly(\"ActionTransfer.action\")\n    {\n        if (sendToken != ETH_ADDRESS) {\n            IERC20 sendERC20 = IERC20(sendToken);\n            sendERC20.safeTransfer(destination, sendAmount, \"ActionTransfer.action:\");\n            emit LogOneWay(address(this), sendToken, sendAmount, destination);\n        } else {\n            payable(destination).sendValue(sendAmount);\n        }\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.In\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowIn(bytes calldata _actionData, bytes calldata _inFlowData)\n        external\n        payable\n        virtual\n        override\n    {\n        (address sendToken, uint256 sendAmount) = abi.decode(_inFlowData, (address,uint256));\n        address destination = abi.decode(_actionData[68:100], (address));\n        action(sendToken, sendAmount, destination);\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.Out\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowOut(bytes calldata _actionData)\n        external\n        payable\n        virtual\n        override\n        returns (bytes memory)\n    {\n        (address sendToken, uint256 sendAmount, address destination) = abi.decode(\n            _actionData[4:],\n            (address,uint256,address)\n        );\n        action(sendToken, sendAmount, destination);\n        return abi.encode(sendToken, sendAmount);\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.InAndOut\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowInAndOut(\n        bytes calldata _actionData,\n        bytes calldata _inFlowData\n    )\n        external\n        payable\n        virtual\n        override\n        returns (bytes memory)\n    {\n        (address sendToken, uint256 sendAmount) = abi.decode(_inFlowData, (address,uint256));\n        address destination = abi.decode(_actionData[68:100], (address));\n        action(sendToken, sendAmount, destination);\n        return abi.encode(sendToken, sendAmount);\n    }\n\n    // ===== ACTION TERMS CHECK ========\n    // Overriding and extending GelatoActionsStandard\u0027s function (optional)\n    function termsOk(\n        uint256,  // taskReceipId\n        address _userProxy,\n        bytes calldata _actionData,\n        DataFlow _dataFlow,\n        uint256,  // value\n        uint256  // cycleId\n    )\n        public\n        view\n        virtual\n        override\n        returns(string memory)\n    {\n        if (this.action.selector != GelatoBytes.calldataSliceSelector(_actionData))\n            return \"ActionTransfer: invalid action selector\";\n\n        if (_dataFlow == DataFlow.In || _dataFlow == DataFlow.InAndOut)\n            return \"ActionTransfer: termsOk check invalidated by inbound DataFlow\";\n\n        (address sendToken, uint256 sendAmount) = abi.decode(\n            _actionData[4:68],\n            (address,uint256)\n        );\n\n        if (sendToken == ETH_ADDRESS) {\n            if (_userProxy.balance \u003c sendAmount)\n                return \"ActionTransfer: NotOkUserProxyETHBalance\";\n        } else {\n            try IERC20(sendToken).balanceOf(_userProxy) returns(uint256 sendTokenBalance) {\n                if (sendTokenBalance \u003c sendAmount)\n                    return \"ActionTransfer: NotOkUserProxyERC20Balance\";\n            } catch {\n                return \"ActionTransfer: ErrorBalanceOf\";\n            }\n        }\n\n        // STANDARD return string to signal actionConditions Ok\n        return OK;\n    }\n}\n"},"ActionUniswapTrade.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport {GelatoActionsStandardFull} from \"./GelatoActionsStandardFull.sol\";\nimport {DataFlow} from \"./IGelatoCore.sol\";\nimport {GelatoBytes} from \"./GelatoBytes.sol\";\nimport {SafeERC20} from \"./SafeERC20.sol\";\nimport {SafeMath} from \"./SafeMath.sol\";\nimport {IERC20} from \"./IERC20.sol\";\nimport {IUniswapExchange} from \"./IUniswapExchange.sol\";\nimport {IUniswapFactory} from \"./IUniswapFactory.sol\";\n\ncontract ActionUniswapTrade is GelatoActionsStandardFull {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IUniswapFactory public immutable UNI_FACTORY;\n\n    constructor(IUniswapFactory _uniswapFactory) public {\n        UNI_FACTORY =_uniswapFactory;\n    }\n\n    // ======= DEV HELPERS =========\n    /// @dev use this function to encode the data off-chain for the action data field\n    function getActionData(\n        address _origin,\n        address _sendToken, // exchange\n        uint256 _sendAmount, // tokens_sold\n        address _receiveToken, // token_addr\n        address _receiver\n    )\n        public\n        pure\n        virtual\n        returns(bytes memory)\n    {\n        return abi.encodeWithSelector(\n            this.action.selector,\n            _origin,\n            _sendToken,\n            _sendAmount,\n            _receiveToken,\n            _receiver\n        );\n    }\n\n    /// @dev Used by GelatoActionPipeline.isValid()\n    function DATA_FLOW_IN_TYPE() public pure virtual override returns (bytes32) {\n        return keccak256(\"TOKEN,UINT256\");\n    }\n\n    /// @dev Used by GelatoActionPipeline.isValid()\n    function DATA_FLOW_OUT_TYPE() public pure virtual override returns (bytes32) {\n        return keccak256(\"TOKEN,UINT256\");\n    }\n\n    // ======= ACTION IMPLEMENTATION DETAILS =========\n    /// @dev Always use this function for encoding _actionData off-chain\n    ///  Will be called by GelatoActionPipeline if Action.dataFlow.None\n    function action(\n        address _origin,\n        address _sendToken, // exchange\n        uint256 _sendAmount, // tokens_sold\n        address _receiveToken, // token_addr\n        address _receiver\n    )\n        public\n        virtual\n        delegatecallOnly(\"ActionUniswapTrade.action\")\n        returns (uint256 receiveAmount)\n    {\n        address receiver = _receiver == address(0) ? address(this) : _receiver;\n        IUniswapExchange sendTokenExchange;\n\n        if (_sendToken == ETH_ADDRESS) {\n            IUniswapExchange receiveTokenExchange = UNI_FACTORY.getExchange(\n                IERC20(_receiveToken)\n            );\n            if (receiveTokenExchange != IUniswapExchange(0)) {\n                // Swap ETH =\u003e ERC20\n                try receiveTokenExchange.ethToTokenTransferInput{value: _sendAmount}(\n                    1,\n                    block.timestamp,\n                    receiver\n                )\n                    returns (uint256 receivedTokens)\n                {\n                    receiveAmount = receivedTokens;\n                } catch {\n                    revert(\"ActionUniswapTrade.action: ethToTokenTransferInput\");\n                }\n            } else {\n                revert(\"ActionUniswapTrade.action: Invalid ReceiveTokenExchange-1\");\n            }\n        } else {\n            IERC20 sendERC20 = IERC20(_sendToken);\n            sendTokenExchange = UNI_FACTORY.getExchange(IERC20(sendERC20));\n\n            if (sendTokenExchange != IUniswapExchange(0)) {\n\n                // origin funds lightweight UserProxy\n                if (_origin != address(0) \u0026\u0026 _origin != address(this)) {\n                    sendERC20.safeTransferFrom(\n                        _origin, address(this), _sendAmount, \"ActionUniswapTrade.action:\"\n                    );\n                }\n\n                // UserProxy approves Uniswap\n                sendERC20.safeIncreaseAllowance(\n                    address(sendTokenExchange), _sendAmount, \"ActionUniswapTrade.action:\"\n                );\n\n                if (_receiveToken == ETH_ADDRESS) {\n                    // swap ERC20 =\u003e ETH\n                    try sendTokenExchange.tokenToEthTransferInput(\n                        _sendAmount,\n                        1,\n                        block.timestamp,\n                        receiver\n                    )\n                        returns (uint256 receivedETH)\n                    {\n                        receiveAmount = receivedETH;\n                    } catch {\n                        revert(\"ActionUniswapTrade.action: tokenToEthTransferInput\");\n                    }\n                } else {\n                    IUniswapExchange receiveTokenExchange = UNI_FACTORY.getExchange(\n                        IERC20(_receiveToken)\n                    );\n                    if (receiveTokenExchange != IUniswapExchange(0)) {\n                        try sendTokenExchange.tokenToTokenTransferInput(\n                            _sendAmount,\n                            1,\n                            1,\n                            block.timestamp,\n                            receiver,\n                            address(_receiveToken)\n                        )\n                            returns (uint256 receivedTokens)\n                        {\n                            receiveAmount = receivedTokens;\n                        } catch {\n                            revert(\"ActionUniswapTrade.action: tokenToTokenTransferInput\");\n                        }\n                    } else {\n                        revert(\"ActionUniswapTrade.action: Invalid ReceiveTokenExchange-2\");\n                    }\n                }\n            } else {\n                revert(\"ActionUniswapTrade: Invalid SendTokenExchange\");\n            }\n        }\n\n        emit LogTwoWay(\n            _origin,  // origin\n            _sendToken,\n            _sendAmount,\n            address(sendTokenExchange),  // destination\n            _receiveToken,\n            receiveAmount,\n            receiver\n        );\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.In\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowIn(bytes calldata _actionData, bytes calldata _inFlowData)\n        external\n        payable\n        virtual\n        override\n    {\n        address origin = abi.decode(_actionData[4:36], (address));\n        (address receiveToken, address receiver) = abi.decode(\n            _actionData[100:],\n            (address,address)\n        );\n        (address sendToken, uint256 sendAmount) = abi.decode(_inFlowData, (address,uint256));\n        action(origin, sendToken, sendAmount, receiveToken, receiver);\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.Out\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowOut(bytes calldata _actionData)\n        external\n        payable\n        virtual\n        override\n        returns (bytes memory)\n    {\n        (address origin,  // 4:36\n         address sendToken,  // 36:68\n         uint256 sendAmount,  // 68:100\n         address receiveToken,  // 100:132\n         address receiver /* 132:164 */) = abi.decode(\n             _actionData[4:],  // 0:4 == selector\n             (address,address,uint256,address,address)\n        );\n        uint256 receiveAmount = action(origin, sendToken, sendAmount, receiveToken, receiver);\n        return abi.encode(receiveToken, receiveAmount);\n    }\n\n    /// @dev Will be called by GelatoActionPipeline if Action.dataFlow.InAndOut\n    //  =\u003e do not use for _actionData encoding\n    function execWithDataFlowInAndOut(\n        bytes calldata _actionData,\n        bytes calldata _inFlowData\n    )\n        external\n        payable\n        virtual\n        override\n        returns (bytes memory)\n    {\n        address origin = abi.decode(_actionData[4:36], (address));\n        (address receiveToken, address receiver) = abi.decode(\n            _actionData[100:],\n            (address,address)\n        );\n        (address sendToken, uint256 sendAmount) = abi.decode(_inFlowData, (address,uint256));\n        uint256 receiveAmount = action(origin, sendToken, sendAmount, receiveToken, receiver);\n        return abi.encode(receiveToken, receiveAmount);\n    }\n\n    // ======= ACTION TERMS CHECK =========\n    // Overriding and extending GelatoActionsStandard\u0027s function (optional)\n    function termsOk(\n        uint256,  // taskReceipId\n        address _userProxy,\n        bytes calldata _actionData,\n        DataFlow _dataFlow,\n        uint256,  // value\n        uint256  // cycleId\n    )\n        public\n        view\n        virtual\n        override\n        returns(string memory)\n    {\n        if (this.action.selector != GelatoBytes.calldataSliceSelector(_actionData))\n            return \"ActionUniswapTrade: invalid action selector\";\n\n        if (_dataFlow == DataFlow.In || _dataFlow == DataFlow.InAndOut)\n            return \"ActionUniswapTrade: termsOk check invalidated by inbound DataFlow\";\n\n        (address origin,  // 4:36\n         address sendToken,  // 36:68\n         uint256 sendAmount,  // 68:100\n         address receiveToken,  // 100:132\n         /*address receiver*/) = abi.decode(\n             _actionData[4:],  // 0:4 == selector\n             (address,address,uint256,address,address)\n        );\n\n        // Safety for the next Action that consumes data from this Action\n        if (\n            _dataFlow == DataFlow.Out \u0026\u0026\n            _userProxy != abi.decode(_actionData[132:164], (address)) \u0026\u0026  // receiver\n            address(0) != abi.decode(_actionData[132:164], (address))  // receiver\n        )\n            return \"ActionUniswapTrade: UserProxy must be receiver if DataFlow.Out\";\n\n        if (sendToken == ETH_ADDRESS) {\n            IERC20 receiveERC20 = IERC20(receiveToken);\n            IUniswapExchange receiveTokenExchange = UNI_FACTORY.getExchange(receiveERC20);\n            if (receiveTokenExchange == IUniswapExchange(0))\n                return \"ActionUniswapTrade: receiveTokenExchangeDoesNotExist-1\";\n\n            if (origin != _userProxy \u0026\u0026 origin != address(0))\n                return \"ActionUniswapTrade: MustHaveUserProxyOrZeroAsOriginForETHTrade\";\n            if (_userProxy.balance \u003c sendAmount)\n                return \"ActionUniswapTrade: NotOkUserProxyETHBalance\";\n        } else {\n            IERC20 sendERC20 = IERC20(sendToken);\n\n            // Make sure sendToken-receiveToken Pair is valid\n            IUniswapExchange sendTokenExchange = UNI_FACTORY.getExchange(sendERC20);\n            if (sendTokenExchange == IUniswapExchange(0))\n                return \"ActionUniswapTrade: sendTokenExchangeDoesNotExist\";\n            if (receiveToken != ETH_ADDRESS) {\n                IERC20 receiveERC20 = IERC20(receiveToken);\n                IUniswapExchange receiveTokenExchange = UNI_FACTORY.getExchange(receiveERC20);\n                if (receiveTokenExchange == IUniswapExchange(0))\n                    return \"ActionUniswapTrade: receiveTokenExchangeDoesNotExist-2\";\n            }\n\n            // UserProxy is prefunded\n            if (origin == _userProxy || origin == address(0)) {\n                try sendERC20.balanceOf(_userProxy) returns(uint256 proxySendTokenBalance) {\n                    if (proxySendTokenBalance \u003c sendAmount)\n                        return \"ActionUniswapTrade: NotOkUserProxySendTokenBalance\";\n                } catch {\n                    return \"ActionUniswapTrade: ErrorBalanceOf-1\";\n                }\n            } else {\n                // UserProxy is not prefunded\n                try sendERC20.balanceOf(origin) returns(uint256 originSendTokenBalance) {\n                    if (originSendTokenBalance \u003c sendAmount)\n                        return \"ActionUniswapTrade: NotOkOriginSendTokenBalance\";\n                } catch {\n                    return \"ActionUniswapTrade: ErrorBalanceOf-2\";\n                }\n\n                try sendERC20.allowance(origin, _userProxy)\n                    returns(uint256 userProxySendTokenAllowance)\n                {\n                    if (userProxySendTokenAllowance \u003c sendAmount)\n                        return \"ActionUniswapTrade: NotOkUserProxySendTokenAllowance\";\n                } catch {\n                    return \"ActionUniswapTrade: ErrorAllowance\";\n                }\n            }\n        }\n\n        // STANDARD return string to signal actionConditions Ok\n        return OK;\n    }\n}\n"},"Address.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract\u0027s constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"},"GelatoActionsStandard.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport {IGelatoAction} from \"./IGelatoAction.sol\";\nimport {DataFlow} from \"./IGelatoCore.sol\";\n\n/// @title GelatoActionsStandard\n/// @dev find all the NatSpecs inside IGelatoAction\nabstract contract GelatoActionsStandard is IGelatoAction {\n\n    string internal constant OK = \"OK\";\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public immutable thisActionAddress;\n\n    constructor() public { thisActionAddress = address(this); }\n\n    modifier delegatecallOnly(string memory _tracingInfo) {\n        require(\n            thisActionAddress != address(this),\n            string(abi.encodePacked(_tracingInfo, \":delegatecallOnly\"))\n        );\n        _;\n    }\n\n    function termsOk(\n        uint256,  // _taskReceiptId\n        address,  // _userProxy\n        bytes calldata,  // _actionData\n        DataFlow,\n        uint256,  // _value: for actions that send ETH around\n        uint256  // cycleId\n    )\n        external\n        view\n        virtual\n        override\n        returns(string memory)  // actionTermsOk\n    {\n        // Standard return value for actionConditions fulfilled and no erros:\n        return OK;\n    }\n}\n"},"GelatoActionsStandardFull.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport {GelatoActionsStandard} from \"./GelatoActionsStandard.sol\";\nimport {IGelatoInFlowAction} from \"./IGelatoInFlowAction.sol\";\nimport {IGelatoOutFlowAction} from \"./IGelatoOutFlowAction.sol\";\nimport {\n    IGelatoInAndOutFlowAction\n} from \"./IGelatoInAndOutFlowAction.sol\";\n\n/// @title GelatoActionsStandardFull\n/// @notice ActionStandard that inherits from all the PipeAction interfaces.\n/// @dev Inherit this to enforce implementation of all PipeAction functions.\nabstract contract GelatoActionsStandardFull is\n    GelatoActionsStandard,\n    IGelatoInFlowAction,\n    IGelatoOutFlowAction,\n    IGelatoInAndOutFlowAction\n{\n    function DATA_FLOW_IN_TYPE()\n        external\n        pure\n        virtual\n        override(IGelatoInFlowAction, IGelatoInAndOutFlowAction)\n        returns (bytes32);\n\n    function DATA_FLOW_OUT_TYPE()\n        external\n        pure\n        virtual\n        override(IGelatoOutFlowAction, IGelatoInAndOutFlowAction)\n        returns (bytes32);\n}"},"GelatoBytes.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nlibrary GelatoBytes {\n    function calldataSliceSelector(bytes calldata _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) \u003e\u003e 8) |\n            (bytes4(_bytes[2]) \u003e\u003e 16) |\n            (bytes4(_bytes[3]) \u003e\u003e 24);\n    }\n\n    function memorySliceSelector(bytes memory _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) \u003e\u003e 8) |\n            (bytes4(_bytes[2]) \u003e\u003e 16) |\n            (bytes4(_bytes[3]) \u003e\u003e 24);\n    }\n\n    function revertWithErrorString(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly { selector := mload(add(0x20, _bytes)) }\n            if (selector == 0x08c379a0) {  // Function selector for Error(string)\n                assembly { _bytes := add(_bytes, 68) }\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\n            } else {\n                revert(string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\")));\n            }\n        } else {\n            revert(string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\")));\n        }\n    }\n}"},"IERC20.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IGelatoAction.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport {DataFlow} from \"./IGelatoCore.sol\";\n\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\n/// @notice all the APIs and events of GelatoActionsStandard\n/// @dev all the APIs are implemented inside GelatoActionsStandard\ninterface IGelatoAction {\n    event LogOneWay(\n        address origin,\n        address sendToken,\n        uint256 sendAmount,\n        address destination\n    );\n\n    event LogTwoWay(\n        address origin,\n        address sendToken,\n        uint256 sendAmount,\n        address destination,\n        address receiveToken,\n        uint256 receiveAmount,\n        address receiver\n    );\n\n    /// @notice Providers can use this for pre-execution sanity checks, to prevent reverts.\n    /// @dev GelatoCore checks this in canExec and passes the parameters.\n    /// @param _taskReceiptId The id of the task from which all arguments are passed.\n    /// @param _userProxy The userProxy of the task. Often address(this) for delegatecalls.\n    /// @param _actionData The encoded payload to be used in the Action.\n    /// @param _dataFlow The dataFlow of the Action.\n    /// @param _value A special param for ETH sending Actions. If the Action sends ETH\n    ///  in its Action function implementation, one should expect msg.value therein to be\n    ///  equal to _value. So Providers can check in termsOk that a valid ETH value will\n    ///  be used because they also have access to the same value when encoding the\n    ///  execPayload on their ProviderModule.\n    /// @param _cycleId For tasks that are part of a Cycle.\n    /// @return Returns OK, if Task can be executed safely according to the Provider\u0027s\n    ///  terms laid out in this function implementation.\n    function termsOk(\n        uint256 _taskReceiptId,\n        address _userProxy,\n        bytes calldata _actionData,\n        DataFlow _dataFlow,\n        uint256 _value,\n        uint256 _cycleId\n    )\n        external\n        view\n        returns(string memory);\n}\n"},"IGelatoCondition.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\npragma experimental ABIEncoderV2;\n\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\n/// @notice all the APIs of GelatoConditionsStandard\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\ninterface IGelatoCondition {\n\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\n    /// @dev Be careful only to encode a Task\u0027s condition.data as is and not with the\n    ///  \"ok\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\n    ///  source of Task identification.\n    /// @param _conditionData This is the Condition.data field developers must encode their\n    ///  Condition\u0027s specific parameters in.\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\n        external\n        view\n        returns(string memory);\n}"},"IGelatoCore.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\npragma experimental ABIEncoderV2;\n\nimport {IGelatoProviderModule} from \"./IGelatoProviderModule.sol\";\nimport {IGelatoCondition} from \"./IGelatoCondition.sol\";\n\nstruct Provider {\n    address addr;  //  if msg.sender == provider =\u003e self-Provider\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\n}\n\nstruct Condition {\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\n    bytes data;  // can be bytes32(0) for self-conditional Actions\n}\n\nenum Operation { Call, Delegatecall }\n\nenum DataFlow { None, In, Out, InAndOut }\n\nstruct Action {\n    address addr;\n    bytes data;\n    Operation operation;\n    DataFlow dataFlow;\n    uint256 value;\n    bool termsOkCheck;\n}\n\nstruct Task {\n    Condition[] conditions;  // optional\n    Action[] actions;\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\n}\n\nstruct TaskReceipt {\n    uint256 id;\n    address userProxy;\n    Provider provider;\n    uint256 index;\n    Task[] tasks;\n    uint256 expiryDate;\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\n    uint256 submissionsLeft;\n}\n\ninterface IGelatoCore {\n    event LogTaskSubmitted(\n        uint256 indexed taskReceiptId,\n        bytes32 indexed taskReceiptHash,\n        TaskReceipt taskReceipt\n    );\n\n    event LogExecSuccess(\n        address indexed executor,\n        uint256 indexed taskReceiptId,\n        uint256 executorSuccessFee,\n        uint256 sysAdminSuccessFee\n    );\n    event LogCanExecFailed(\n        address indexed executor,\n        uint256 indexed taskReceiptId,\n        string reason\n    );\n    event LogExecReverted(\n        address indexed executor,\n        uint256 indexed taskReceiptId,\n        uint256 executorRefund,\n        string reason\n    );\n\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\n\n    /// @notice API to query whether Task can be submitted successfully.\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\n    /// @param _provider Gelato Provider object: provider address and module.\n    /// @param _userProxy The userProxy from which the task will be submitted.\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\n    function canSubmitTask(\n        address _userProxy,\n        Provider calldata _provider,\n        Task calldata _task,\n        uint256 _expiryDate\n    )\n        external\n        view\n        returns(string memory);\n\n    /// @notice API to submit a single Task.\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\n    /// @param _provider Gelato Provider object: provider address and module.\n    /// @param _task A Gelato Task object: provider, conditions, actions.\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\n    function submitTask(\n        Provider calldata _provider,\n        Task calldata _task,\n        uint256 _expiryDate\n    )\n        external;\n\n\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\n    ///  the next one, after they have been executed.\n    /// @param _provider Gelato Provider object: provider address and module.\n    /// @param _tasks This can be a single task or a sequence of tasks.\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\n    /// @param _cycles How many full cycles will be submitted\n    function submitTaskCycle(\n        Provider calldata _provider,\n        Task[] calldata _tasks,\n        uint256 _expiryDate,\n        uint256 _cycles\n    )\n        external;\n\n\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\n    ///  the next one, after they have been executed.\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\n    /// @dev If _sumOfRequestedTaskSubmits = 1 \u0026\u0026 _tasks.length = 2, only the first task\n    ///  would be submitted, but not the second\n    /// @param _provider Gelato Provider object: provider address and module.\n    /// @param _tasks This can be a single task or a sequence of tasks.\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\n    ///  that should have occured once the cycle is complete:\n    ///  _sumOfRequestedTaskSubmits = 0 =\u003e One Task will resubmit the next Task infinitly\n    ///  _sumOfRequestedTaskSubmits = 1 =\u003e One Task will resubmit no other task\n    ///  _sumOfRequestedTaskSubmits = 2 =\u003e One Task will resubmit 1 other task\n    ///  ...\n    function submitTaskChain(\n        Provider calldata _provider,\n        Task[] calldata _tasks,\n        uint256 _expiryDate,\n        uint256 _sumOfRequestedTaskSubmits\n    )\n        external;\n\n    // ================  Exec Suite =========================\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore\u0027s\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\n        external\n        view\n        returns(string memory);\n\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\n    ///   In the latter case Executors are refunded by the Task Provider.\n    /// @param _TR TaskReceipt: id, userProxy, Task.\n    function exec(TaskReceipt calldata _TR) external;\n\n    /// @notice Cancel task\n    /// @dev Callable only by userProxy or selected provider\n    /// @param _TR TaskReceipt: id, userProxy, Task.\n    function cancelTask(TaskReceipt calldata _TR) external;\n\n    /// @notice Cancel multiple tasks at once\n    /// @dev Callable only by userProxy or selected provider\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\n\n    /// @notice Compute hash of task receipt\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\n    /// @return hash of taskReceipt\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\n\n    // ================  Getters =========================\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\n    /// @return currentId currentId, last TaskReceiptId submitted\n    function currentTaskReceiptId() external view returns(uint256);\n\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\n    /// @return hash of taskReceipt\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\n}\n"},"IGelatoInAndOutFlowAction.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport {Action} from \"./IGelatoCore.sol\";\n\n/// @title IGelatoInAndOutFlowAction\n/// @notice Solidity interface for Actions that make use of DataFlow.InAndOut\ninterface IGelatoInAndOutFlowAction {\n\n    /// @notice Executes the Action implementation with data flowing in from a previous\n    ///  Action in the GelatoActionPipeline and with data flowing out to consecutive\n    ///  Actions in the pipeline.\n    /// @dev The _inFlowData format should be defined by DATA_FLOW_IN_TYPE and\n    ///  the outFlowData format should be defined by DATA_FLOW_OUT_TYPE.\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\n    /// @param _inFlowData Not known prior to execution. Passed in via GelatoActionPipeline.\n    /// @return outFlowData The bytes encoded data this action implementation emits.\n    function execWithDataFlowInAndOut(\n        bytes calldata _actionData,\n        bytes calldata _inFlowData\n    )\n        external\n        payable\n        returns (bytes memory outFlowData);\n\n    /// @notice Returns the expected format of the execWithDataFlowIn _inFlowData.\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\n    function DATA_FLOW_IN_TYPE() external pure returns (bytes32);\n\n    /// @notice Returns the expected format of the execWithDataFlowOut outFlowData.\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\n    function DATA_FLOW_OUT_TYPE() external pure returns (bytes32);\n}"},"IGelatoInFlowAction.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\n/// @title IGelatoInFlowAction\n/// @notice Solidity interface for Actions that make use of DataFlow.In\n/// @dev Inherit this, if you want your Action to use DataFlow.In in a standard way.\ninterface IGelatoInFlowAction {\n    /// @notice Executes the action implementation with data flowing in from a previous\n    ///  Action in the sequence.\n    /// @dev The _inFlowData format should be defined by DATA_FLOW_IN_TYPE\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\n    /// @param _inFlowData Not known prior to execution. Passed in via GelatoActionPipeline.\n    function execWithDataFlowIn(bytes calldata _actionData, bytes calldata _inFlowData)\n        external\n        payable;\n\n    /// @notice Returns the expected format of the execWithDataFlowIn _inFlowData.\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\n    function DATA_FLOW_IN_TYPE() external pure returns (bytes32);\n}\n"},"IGelatoOutFlowAction.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\n/// @title IGelatoOutFlowAction\n/// @notice Solidity interface for Actions that make use of DataFlow.Out\n/// @dev Inherit this, if you want implement your Action.DataFlow.Out in a standard way.\ninterface IGelatoOutFlowAction {\n    /// @notice Executes the Action implementation with data flowing out to consecutive\n    ///  Actions in a GelatoActionPipeline.\n    /// @dev The outFlowData format should be defined by DATA_FLOW_OUT_TYPE\n    /// @param _actionData Known prior to execution and probably encoded off-chain.\n    /// @return outFlowData The bytes encoded data this action implementation emits.\n    function execWithDataFlowOut(bytes calldata _actionData)\n        external\n        payable\n        returns (bytes memory outFlowData);\n\n    /// @notice Returns the expected format of the execWithDataFlowOut outFlowData.\n    /// @dev Strict adherence to these formats is crucial for GelatoActionPipelines.\n    function DATA_FLOW_OUT_TYPE() external pure returns (bytes32);\n}\n"},"IGelatoProviderModule.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\npragma experimental ABIEncoderV2;\n\nimport {Action, Task} from \"./IGelatoCore.sol\";\n\ninterface IGelatoProviderModule {\n\n    /// @notice Check if provider agrees to pay for inputted task receipt\n    /// @dev Enables arbitrary checks by provider\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\n    /// @param _provider The account of the Provider who uses the ProviderModule.\n    /// @param _task Gelato Task to be executed.\n    /// @return \"OK\" if provider agrees\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\n        external\n        view\n        returns(string memory);\n\n    /// @notice Convert action specific payload into proxy specific payload\n    /// @dev Encoded multiple actions into a multisend\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\n    /// @param _provider The account of the Provider who uses the ProviderModule.\n    /// @param _task Gelato Task to be executed.\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\n    /// @return Encoded payload that will be used for low-level .call on user proxy\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\n    function execPayload(\n        uint256 _taskReceiptId,\n        address _userProxy,\n        address _provider,\n        Task calldata _task,\n        uint256 _cycleId\n    )\n        external\n        view\n        returns(bytes memory, bool checkReturndata);\n\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\n}\n"},"IUniswapExchange.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport \"./IERC20.sol\";\n\ninterface IUniswapExchange {\n    function getEthToTokenInputPrice(uint256 ethSold)\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getTokenToEthOutputPrice(uint256 ethbought)\n        external\n        view\n        returns (uint256 tokensToBeSold);\n\n    function getTokenToEthInputPrice(uint256 tokensSold)\n        external\n        view\n        returns (uint256 ethBought);\n\n    function ethToTokenSwapInput(uint256 MintTokens, uint256 deadline)\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline)\n        external\n        payable\n        returns (uint256 tokensSold);\n\n    function ethToTokenTransferInput(\n        uint256 MintTokens,\n        uint256 deadline,\n        address recipient\n    ) external payable returns (uint256 tokensBought);\n\n    function tokenToEthSwapInput(\n        uint256 tokens_sold,\n        uint256 min_eth,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function tokenToEthSwapOutput(\n        uint256 eth_bought,\n        uint256 max_tokens,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 MintTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address tokenAddr\n    ) external returns (uint256 tokensBought);\n\n    function tokenToEthTransferInput(\n        uint256 tokens_sold,\n        uint256 min_eth,\n        uint256 deadline,\n        address recipient\n    ) external returns (uint256);\n\n    function tokenToTokenTransferInput(\n        uint256 tokens_sold,\n        uint256 min_tokens_bought,\n        uint256 min_eth_bought,\n        uint256 deadline,\n        address recipient,\n        address token_addr\n    ) external returns (uint256);\n\n}\n"},"IUniswapFactory.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport \"./IUniswapExchange.sol\";\n\ninterface IUniswapFactory {\n    function getExchange(IERC20 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n"},"SafeERC20.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @notice Adapted by @gitpusha from Gelato to include error strings.\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value, string memory context)\n        internal\n    {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value),\n            context\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value,\n        string memory context\n    )\n        internal\n    {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value),\n            context\n        );\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value, string memory context)\n        internal\n    {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            string(\n                abi.encodePacked(\n                    context, \"SafeERC20: approve from non-zero to non-zero allowance\"\n                )\n            )\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value),\n            context\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value,\n        string memory context\n    )\n        internal\n    {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance),\n            context\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value,\n        string memory context\n    )\n        internal\n    {\n        uint256 newAllowance = token.allowance(\n            address(this),\n            spender\n        ).sub(\n            value,\n            string(abi.encodePacked(context, \"SafeERC20: decreased allowance below zero\")\n        ));\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance),\n            context\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     * @param context Debugging Info for the revert message (addition to original library)\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data, string memory context)\n        private\n    {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(\n            address(token).isContract(),\n            string(abi.encodePacked(context, \"SafeERC20: call to non-contract\"))\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(\n            success, string(abi.encodePacked(context, \"SafeERC20: low-level call failed\"))\n        );\n\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                string(\n                    abi.encodePacked(context, \"SafeERC20: ERC20 operation did not succeed\")\n                )\n            );\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity ^0.6.10;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"}}