{{
  "language": "Solidity",
  "sources": {
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/aaveUniswap/AaveUniswapTokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { TokenMetadata, Component } from \"../../Structs.sol\";\r\nimport { TokenAdapter } from \"../TokenAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev AToken contract interface.\r\n * Only the functions required for AaveTokenAdapter contract are added.\r\n * The AToken contract is available here\r\n * github.com/aave/aave-protocol/blob/master/contracts/tokenization/AToken.sol.\r\n */\r\ninterface AToken {\r\n    function underlyingAssetAddress() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for ATokens.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract AaveUniswapTokenAdapter is TokenAdapter {\r\n\r\n\r\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given token.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        address underlying = AToken(token).underlyingAssetAddress();\r\n\r\n        Component[] memory underlyingTokens = new Component[](1);\r\n        string memory underlyingType;\r\n\r\n        if (underlying == DAI ||\r\n            underlying == USDC ||\r\n            underlying == USDT ||\r\n            underlying == ETH ) {\r\n            underlyingType = \"ERC20\";\r\n        } else {\r\n            underlyingType = \"Uniswap V1 pool token\";\r\n        }\r\n\r\n        underlyingTokens[0] = Component({\r\n            token: underlying,\r\n            tokenType: underlyingType,\r\n            rate: uint256(1e18)\r\n        });\r\n\r\n        return underlyingTokens;\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nstruct ProtocolBalance {\r\n    ProtocolMetadata metadata;\r\n    AdapterBalance[] adapterBalances;\r\n}\r\n\r\n\r\nstruct ProtocolMetadata {\r\n    string name;\r\n    string description;\r\n    string websiteURL;\r\n    string iconURL;\r\n    uint256 version;\r\n}\r\n\r\n\r\nstruct AdapterBalance {\r\n    AdapterMetadata metadata;\r\n    FullTokenBalance[] balances;\r\n}\r\n\r\n\r\nstruct AdapterMetadata {\r\n    address adapterAddress;\r\n    string adapterType; // \"Asset\", \"Debt\"\r\n}\r\n\r\n\r\n// token and its underlying tokens (if exist) balances\r\nstruct FullTokenBalance {\r\n    TokenBalance base;\r\n    TokenBalance[] underlying;\r\n}\r\n\r\n\r\nstruct TokenBalance {\r\n    TokenMetadata metadata;\r\n    uint256 amount;\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;  // \"ERC20\" by default\r\n    uint256 rate;  // price per full share (1e18)\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/TokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { TokenMetadata, Component } from \"../Structs.sol\";\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n     * struct Component {\r\n     *     address token;    // Address of token contract\r\n     *     string tokenType; // Token type (\"ERC20\" by default)\r\n     *     uint256 rate;     // Price per share (1e18)\r\n     * }\r\n     */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/aaveUniswap/AaveUniswapAssetAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @title Asset adapter for Aave protocol (Uniswap market).\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract AaveUniswapAssetAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"AToken Uniswap Market\";\r\n\r\n    /**\r\n     * @return Amount of ATokens held by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        return ERC20(token).balanceOf(account);\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/aaveUniswap/AaveUniswapDebtAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev LendingPoolAddressesProvider contract interface.\r\n * Only the functions required for AaveUniswapDebtAdapter contract are added.\r\n * The LendingPoolAddressesProvider contract is available here\r\n * github.com/aave/aave-protocol/blob/master/contracts/configuration/LendingPoolAddressesProvider.sol.\r\n */\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (LendingPool);\r\n}\r\n\r\n\r\n/**\r\n * @dev LendingPool contract interface.\r\n * Only the functions required for AaveUniswapDebtAdapter contract are added.\r\n * The LendingPool contract is available here\r\n * github.com/aave/aave-protocol/blob/master/contracts/lendingpool/LendingPool.sol.\r\n */\r\ninterface LendingPool {\r\n    function getUserReserveData(address, address) external view returns (uint256, uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Debt adapter for Aave protocol (Uniswap market).\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract AaveUniswapDebtAdapter is ProtocolAdapter {\r\n\r\n    address internal constant PROVIDER = 0x7fd53085B9A29D236235D6FC593b47C9C33429F1;\r\n\r\n    string public constant override adapterType = \"Debt\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    /**\r\n     * @return Amount of debt of the given account for the protocol.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        LendingPool pool = LendingPoolAddressesProvider(PROVIDER).getLendingPool();\r\n\r\n        (, uint256 debtAmount) = pool.getUserReserveData(token, account);\r\n\r\n        return debtAmount;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}