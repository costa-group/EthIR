{{
  "language": "Solidity",
  "sources": {
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/chi/ChiTokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { TokenMetadata, Component } from \"../../Structs.sol\";\r\nimport { TokenAdapter } from \"../TokenAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev OneSplit contract interface.\r\n * Only the functions required for OneInchChiTokenAdapter contract are added.\r\n * The OneSplit contract is available here\r\n * github.com/CryptoManiacsZone/1inchProtocol/blob/master/contracts/OneSplit.sol.\r\n */\r\ninterface IOneSplit {\r\n\r\n    function getExpectedReturn(\r\n        ERC20 fromToken,\r\n        ERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Chi Gastoken by 1inch.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author 1inch.exchange <info@1inch.exchange>\r\n */\r\ncontract ChiTokenAdapter is TokenAdapter {\r\n\r\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    IOneSplit private constant ONE_SPLIT = IOneSplit(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given token.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        (uint256 returnAmount, ) = ONE_SPLIT.getExpectedReturn(\r\n            ERC20(token),\r\n            ERC20(ETH_ADDRESS),\r\n            1,\r\n            1,\r\n            0\r\n        );\r\n\r\n        Component[] memory underlyingTokens = new Component[](1);\r\n\r\n        underlyingTokens[0] = Component({\r\n            token: ETH_ADDRESS,\r\n            tokenType: \"ERC20\",\r\n            rate: returnAmount\r\n        });\r\n\r\n        return underlyingTokens;\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nstruct ProtocolBalance {\r\n    ProtocolMetadata metadata;\r\n    AdapterBalance[] adapterBalances;\r\n}\r\n\r\n\r\nstruct ProtocolMetadata {\r\n    string name;\r\n    string description;\r\n    string websiteURL;\r\n    string iconURL;\r\n    uint256 version;\r\n}\r\n\r\n\r\nstruct AdapterBalance {\r\n    AdapterMetadata metadata;\r\n    FullTokenBalance[] balances;\r\n}\r\n\r\n\r\nstruct AdapterMetadata {\r\n    address adapterAddress;\r\n    string adapterType; // \"Asset\", \"Debt\"\r\n}\r\n\r\n\r\n// token and its underlying tokens (if exist) balances\r\nstruct FullTokenBalance {\r\n    TokenBalance base;\r\n    TokenBalance[] underlying;\r\n}\r\n\r\n\r\nstruct TokenBalance {\r\n    TokenMetadata metadata;\r\n    uint256 amount;\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;  // \"ERC20\" by default\r\n    uint256 rate;  // price per full share (1e18)\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/TokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { TokenMetadata, Component } from \"../Structs.sol\";\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n     * struct Component {\r\n     *     address token;    // Address of token contract\r\n     *     string tokenType; // Token type (\"ERC20\" by default)\r\n     *     uint256 rate;     // Price per share (1e18)\r\n     * }\r\n     */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/chi/ChiAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @title Adapter for Chi Gastoken by 1inch.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author 1inch.exchange <info@1inch.exchange>\r\n */\r\ncontract ChiAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"Chi Token\";\r\n\r\n    /**\r\n     * @return Amount of Chi Token held by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        return ERC20(token).balanceOf(account);\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/gnosisProtocol/GnosisProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev EpochTokenLocker contract interface.\r\n * Only the functions required for GnosisProtocolAdapter contract are added.\r\n * The EpochTokenLocker contract is available here\r\n * github.com/gnosis/dex-contracts/blob/master/contracts/EpochTokenLocker.sol.\r\n */\r\ninterface EpochTokenLocker {\r\n    function getBalance(address, address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Adapter for GnosisProtocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Marek Galvanek <marek.galvanek@gmail.com>\r\n */\r\ncontract GnosisProtocolAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    address internal constant BALANCE = 0x6F400810b62df8E13fded51bE75fF5393eaa841F;\r\n\r\n    /**\r\n     * @return Amount of token locked on the protocol by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        return EpochTokenLocker(BALANCE).getBalance(account, token);\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/idle/IdleAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @title Adapter for idle.finance protocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author William Bergamo <william@idle.finance>\r\n */\r\ncontract IdleAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"IdleToken\";\r\n\r\n    /**\r\n     * @return Amount of IdleTokens held by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        return ERC20(token).balanceOf(account);\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/maker/GovernanceAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev DSChief contract interface.\r\n * Only the functions required for GovernanceAdapter contract are added.\r\n * The DSChief contract is available here\r\n * github.com/dapphub/ds-chief/blob/master/src/chief.sol.\r\n */\r\ninterface DSChief {\r\n    function deposits(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Adapter for Maker Governance.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract GovernanceAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    address internal constant GOVERNANCE = 0x9eF05f7F6deB616fd37aC3c959a2dDD25A54E4F5;\r\n\r\n    /**\r\n     * @return Amount of MKR tokens locked on the Governance module by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address, address account) external view override returns (uint256) {\r\n        return DSChief(GOVERNANCE).deposits(account);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}