{"coin.sol":{"content":"pragma solidity ^0.4.8;\r\nimport \"./Token.sol\";\r\n\r\ncontract StandardToken is Token {\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      \r\n        require(balances[msg.sender] \u003e= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns \r\n    (bool success) {\r\n       \r\n        require(balances[_from] \u003e= _value \u0026\u0026 allowed[_from][msg.sender] \u003e= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value; \r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success)   \r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    mapping (address =\u003e uint256) balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) allowed;\r\n}\r\n\r\ncontract HumanStandardToken is StandardToken { \r\n    address public owner;\r\n    /* Public variables of the token */\r\n    string public name;                  \r\n    uint8 public decimals;              \r\n    string public symbol;               \r\n    string public version = \u0027H0.1\u0027;    \r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function HumanStandardToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol,address _owner) {\r\n        balances[msg.sender] = _initialAmount; \r\n        totalSupply = _initialAmount;        \r\n        name = _tokenName;                 \r\n        decimals = _decimalUnits;       \r\n        symbol = _tokenSymbol;             \r\n        owner = _owner;\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn\u0027t have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n        return true;\r\n    }\r\n\r\n\r\n    function mintToken(address target, uint256 mintedAmount) public onlyOwner returns (bool success){\r\n        balances[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, owner, mintedAmount);\r\n        Transfer(owner, target, mintedAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n}"},"Token.sol":{"content":"pragma solidity ^0.4.8;\r\ncontract Token{\r\n   \r\n    uint256 public totalSupply;\r\n\r\n   \r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n   \r\n    function transferFrom(address _from, address _to, uint256 _value) returns   \r\n    (bool success);\r\n\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    \r\n    function allowance(address _owner, address _spender) constant returns \r\n    (uint256 remaining);\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 \r\n    _value);\r\n}"}}