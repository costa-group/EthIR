{{
  "language": "Solidity",
  "sources": {
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/synthetix/SynthetixAssetAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { ERC20 } from \"../../ERC20.sol\";\r\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\r\n\r\n\r\n/**\r\n * @dev StakingRewards contract interface.\r\n * Only the functions required for SynthetixAssetAdapter contract are added.\r\n * The StakingRewards contract is available here\r\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\r\n */\r\ninterface StakingRewards {\r\n    function earned(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Proxy contract interface.\r\n * Only the functions required for SynthetixAssetAdapter contract are added.\r\n * The Proxy contract is available here\r\n * github.com/Synthetixio/synthetix/blob/master/contracts/Proxy.sol.\r\n */\r\ninterface Proxy {\r\n    function target() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @dev Synthetix contract interface.\r\n * Only the functions required for SynthetixAssetAdapter contract are added.\r\n * The Synthetix contract is available here\r\n * github.com/Synthetixio/synthetix/blob/master/contracts/Synthetix.sol.\r\n */\r\ninterface Synthetix {\r\n    function collateral(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Asset adapter for Synthetix protocol.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract SynthetixAssetAdapter is ProtocolAdapter {\r\n\r\n    string public constant override adapterType = \"Asset\";\r\n\r\n    string public constant override tokenType = \"ERC20\";\r\n\r\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\r\n    address internal constant CURVE_SUSD = 0xC25a3A3b969415c80451098fa907EC722572917F;\r\n    address internal constant CURVE_SBTC = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\r\n    address internal constant IETH = 0xA9859874e1743A32409f75bB11549892138BBA1E;\r\n    address internal constant UNISWAP_SETH = 0xe9Cf7887b93150D4F2Da7dFc6D502B216438F244;\r\n    address internal constant UNISWAP_SXAU = 0x34a0216C5057bC18e5d34D4405284564eFd759b2;\r\n    address internal constant BALANCER_SNX_USDC = 0x815F8eF4863451f4Faf34FBc860034812E7377d9;\r\n    address internal constant BALANCER_SNX_REN = 0x330416C863f2acCE7aF9C9314B422d24c672534a;\r\n    address internal constant LP_REWARD_SUSD = 0xDCB6A51eA3CA5d3Fd898Fd6564757c7aAeC3ca92;\r\n    address internal constant LP_REWARD_IETH = 0xC746bc860781DC90BBFCD381d6A058Dc16357F8d;\r\n    address internal constant LP_REWARD_SETH = 0x48D7f315feDcaD332F68aafa017c7C158BC54760;\r\n    address internal constant LP_REWARD_SXAU = 0x8302FE9F0C509a996573D3Cc5B0D5D51e4FDD5eC;\r\n    address internal constant LP_REWARD_SBTC = 0x13C1542A468319688B89E323fe9A3Be3A90EBb27;\r\n    address internal constant LP_REWARD_BALANCER = 0xFBaEdde70732540cE2B11A8AC58Eb2dC0D69dE10;\r\n\r\n    /**\r\n     * @return Amount of SNX locked on the protocol by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address token, address account) external view override returns (uint256) {\r\n        if (token == SNX) {\r\n            uint256 balance = Synthetix(Proxy(SNX).target()).collateral(account);\r\n            balance += StakingRewards(LP_REWARD_SUSD).earned(account);\r\n            balance += StakingRewards(LP_REWARD_IETH).earned(account);\r\n            balance += StakingRewards(LP_REWARD_SETH).earned(account);\r\n            balance += StakingRewards(LP_REWARD_SXAU).earned(account);\r\n            balance += StakingRewards(LP_REWARD_BALANCER).earned(account);\r\n            return balance;\r\n        } else if (token == BALANCER_SNX_REN) {\r\n            return StakingRewards(LP_REWARD_SBTC).earned(account);\r\n        } else if (token == CURVE_SUSD) {\r\n            return ERC20(LP_REWARD_SUSD).balanceOf(account);\r\n        } else if (token == CURVE_SBTC) {\r\n            return ERC20(LP_REWARD_SBTC).balanceOf(account);\r\n        } else if (token == IETH) {\r\n            return ERC20(LP_REWARD_IETH).balanceOf(account);\r\n        } else if (token == UNISWAP_SETH) {\r\n            return ERC20(LP_REWARD_SETH).balanceOf(account);\r\n        } else if (token == UNISWAP_SXAU) {\r\n            return ERC20(LP_REWARD_SXAU).balanceOf(account);\r\n        } else if (token == BALANCER_SNX_USDC) {\r\n            return ERC20(LP_REWARD_BALANCER).balanceOf(account);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n"
    },
    "/mnt/c/Users/Igor/Desktop/job/dev/zeriontech/defi-sdk/contracts/adapters/ProtocolAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) external view returns (uint256);\r\n}\r\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}