{"DefisafeToken.sol":{"content":"pragma solidity 0.6.0;\nimport \u0027./ERC20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./RoleManageContract.sol\u0027;\n\n\ncontract DeFiSafeToken is ERC20,RoleManageContract{\n\n    using SafeMath for uint256;\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string  public  constant _name = \"DefiSafe\";\n    string  public  constant _symbol = \"DSE\";\n    uint256 public  constant _decimals = 18; \n\n    event Burn(address indexed _burner, uint256 _value);\n\n    constructor(uint256 _tokenTotalAmount) public {\n        _balances[msg.sender] = _tokenTotalAmount;\n        _totalSupply = _tokenTotalAmount;\n        emit Transfer(address(0x0), msg.sender, _tokenTotalAmount);\n        _owner = msg.sender;\n    }\n\n\n    /**\n     * @dev See {ERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n\n  function transfer(address _to, uint256 _value) public override returns (bool) {\n    _balances[msg.sender] = _balances[msg.sender].sub(_value);\n    _balances[_to] = _balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n    /**\n     * @dev See {ERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n  function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool) {\n    uint256 allowance = _allowances[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value \u003c= _allowance);\n\n    // KYBER-NOTE! code changed to comply with ERC20 standard\n    _balances[_from] = _balances[_from].sub(_value);\n    _balances[_to] = _balances[_to].add(_value);\n    //balances[_from] = balances[_from].sub(_value); // this was removed\n    _allowances[_from][msg.sender] = allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public virtual override returns (bool) {\n\n    require((_value == 0) || (_allowances[msg.sender][_spender] == 0));\n\n    _allowances[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n\n\n  function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n    return _allowances[_owner][_spender];\n  }\n  \n  \n  /** @dev Creates `addedValue` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     */\n    function increaseTokenAmount(uint256 addedValue) public onlyOwner {\n        require(addedValue \u003e 0,\"addedValue error !\"); \n\n        _totalSupply = _totalSupply.add(addedValue);\n        _balances[msg.sender] = _balances[msg.sender].add(addedValue);\n        emit Transfer(address(0), msg.sender, addedValue);\n    }\n\n    function decreaseTokenAmount(uint256 subtractedValue) public onlyOwner {\n      require(subtractedValue \u003e 0,\"subtractedValue error !\");\n      \n      _balances[msg.sender] = _balances[msg.sender].sub(subtractedValue, \"DecreaseTokenAmount error !\");\n      _totalSupply = _totalSupply.sub(subtractedValue);\n      emit Transfer(msg.sender, address(0), subtractedValue);\n    }\n\n\n     /**\n     * @dev Destroys `_value` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     */\n    function burn(uint256 _value) public onlyBurner\n        returns (bool){\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n  \n  \n     /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n     \n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n  \n     /**\n     * @dev Returns the name of the token.\n     */\n     \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /*\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n  \n}\n"},"ERC20.sol":{"content":"pragma solidity 0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface ERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"RoleManageContract.sol":{"content":"pragma solidity 0.6.0;\n\n\n//Supermanager\ncontract RoleManageContract {\n    \n    address public _owner;\n    address public _burnAddresser;\n\n    constructor() public { \n        _owner = msg.sender; \n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n \n     modifier onlyBurner() {\n        require(msg.sender == _burnAddresser);\n        _;\n    }\n  \n    function transferBurnship(address newBurn) public onlyOwner {\n        if (newBurn != address(0)) {\n            _burnAddresser = newBurn;\n        }\n    }\n    \n    \n}\n"},"SafeMath.sol":{"content":"pragma solidity 0.6.0;\n\nlibrary SafeMath {\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    \n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    \n     /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n}"}}