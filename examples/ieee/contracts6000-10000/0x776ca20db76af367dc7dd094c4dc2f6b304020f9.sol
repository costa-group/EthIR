{"EscrowRegistry.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\n// Smart Contract for Trustless Escrow at https://trustlessescrow.com\n\npragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\n\n\ncontract EscrowRegistry {\n    using SafeMath for uint;\n\n    //////////////////////////////////////////////////////////\n    // Modifiers\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Only owner can call this.\"\n        );\n        _;\n    }\n\n    //////////////////////////////////////////////////////////\n    // Custom data types\n    /*\n     * 0. Init\n     * 1. BuyerLocked or SellerLocked\n     * 2. Locked\n     * 3. Inactive\n     */\n    enum State {\n        Init,\n        BuyerLocked,\n        SellerLocked,\n        Locked,\n        Inactive\n    }\n\n    struct Escrow {\n        State state;\n\n        uint value;\n        uint buyerDeposit;\n        uint sellerDeposit;\n        uint expireAt;\n        address payable buyer;\n        address payable seller;\n    }\n\n    //////////////////////////////////////////////////////////\n    // Constants\n    uint constant one_hour = 60 * 60;\n    uint constant one_day = 24 * one_hour;\n    uint constant one_year = 365 * one_day;\n    uint constant min_expiration_time = 3 * one_day;\n    uint constant max_expiration_time = 3 * one_year;\n\n    //////////////////////////////////////////////////////////\n    // Data\n    address payable owner;\n    mapping(bytes24 =\u003e Escrow) escrows;\n    uint feePct;  // in 0.01% i.e fee = value * fee_pct / 10000\n    uint feeStore;\n\n    //////////////////////////////////////////////////////////\n    // Events\n    event EscrowCreated(bytes24 indexed escrowId, bool buyerCreated, address indexed buyer, address indexed seller);\n    event BuyerAborted(bytes24 indexed escrowId);\n    event SellerAborted(bytes24 indexed escrowId);\n    event BuyerConfirmed(bytes24 indexed escrowId);\n    event SellerConfirmed(bytes24 indexed escrowId);\n    event Completed(bytes24 indexed escrowId);\n    event Expired(bytes24 indexed escrowId);\n\n    //////////////////////////////////////////////////////////\n    // Functions\n    function getUniqueKey() internal view returns (bytes24) {\n        bytes24 uniqId = bytes24(keccak256(abi.encodePacked(msg.sender, blockhash(block.number - 1))));\n        while (escrows[uniqId].value != 0) {\n            uniqId = bytes24(keccak256(abi.encodePacked(uniqId)));\n        }\n        return uniqId;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        feePct = 10;\n        feeStore = 0;\n    }\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function setFee(uint newFeePct) public onlyOwner {\n        feePct = newFeePct;\n    }\n\n    function emptyFeeStore() public onlyOwner {\n        require(feeStore \u003e 0, \"Fee store is empty\");\n        owner.transfer(feeStore);\n        feeStore = 0;\n    }\n\n    function buyerCreate(uint value, address payable seller, uint sellerDeposit, uint expireIn) public payable {\n        require(value \u003e 0 \u0026\u0026 value \u003c= msg.value, \"Invalid value\");\n        require(expireIn \u003e= min_expiration_time \u0026\u0026 expireIn \u003c= max_expiration_time, \"Invalid expiration time\");\n        bytes24 escrowId = getUniqueKey();\n        emit EscrowCreated(escrowId, true, msg.sender, seller);\n        escrows[escrowId] = Escrow({\n            expireAt: now + expireIn,\n            value: value,\n            buyerDeposit: msg.value - value,\n            sellerDeposit: sellerDeposit,\n            buyer: msg.sender,\n            seller: seller,\n            state: State.BuyerLocked\n        });\n    }\n\n    function sellerCreate(uint value, address payable buyer, uint buyerDeposit, uint expireIn) public payable {\n        require(value \u003e 0, \"Invalid value\");\n        require(expireIn \u003e= min_expiration_time \u0026\u0026 expireIn \u003c= max_expiration_time, \"Invalid expiration time\");\n        bytes24 escrowId = getUniqueKey();\n        emit EscrowCreated(escrowId, false, buyer, msg.sender);\n        escrows[escrowId] = Escrow({\n            expireAt: now + expireIn,\n            value: value,\n            buyerDeposit: buyerDeposit,\n            sellerDeposit: msg.value,\n            buyer: buyer,\n            seller: msg.sender,\n            state: State.SellerLocked\n        });\n    }\n\n    function buyerConfirm(bytes24 escrowId) public payable {\n        emit BuyerConfirmed(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.SellerLocked, \"Invalid state\");\n        require(msg.sender == e.buyer, \"Not allowed\");\n        require(msg.value == e.value + e.buyerDeposit, \"Invalid amount sent\");\n        e.state = State.Locked;\n    }\n\n    function sellerConfirm(bytes24 escrowId) public payable {\n        emit SellerConfirmed(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.BuyerLocked, \"Invalid state\");\n        require(msg.sender == e.seller, \"Not allowed\");\n        require(msg.value == e.sellerDeposit, \"Invalid amount sent\");\n        e.state = State.Locked;\n    }\n\n    function buyerAbort(bytes24 escrowId) public {\n        emit BuyerAborted(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.BuyerLocked, \"Invalid state\");\n        require(msg.sender == e.buyer, \"Not allowed\");\n        e.state = State.Inactive;\n        e.buyer.transfer(e.value + e.buyerDeposit);\n    }\n\n    function sellerAbort(bytes24 escrowId) public {\n        emit SellerAborted(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.SellerLocked, \"Invalid state\");\n        require(msg.sender == e.seller, \"Not allowed\");\n        e.state = State.Inactive;\n        e.seller.transfer(e.sellerDeposit);\n    }\n\n    function complete(bytes24 escrowId) public {\n        emit Completed(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.Locked, \"Invalid state\");\n        require(msg.sender == e.buyer, \"Not allowed\");\n        uint fee = e.value * feePct / 10000;\n        e.state = State.Inactive;\n        feeStore += fee;\n        e.buyer.transfer(e.buyerDeposit);\n        e.seller.transfer(e.value - fee + e.sellerDeposit);\n    }\n\n    function expire(bytes24 escrowId) public onlyOwner {\n        emit Expired(escrowId);\n        Escrow storage e = escrows[escrowId];\n        require(e.state == State.Locked, \"Invalid state\");\n        require(now \u003e e.expireAt, \"Not expired\");\n        e.state = State.Inactive;\n        owner.transfer(e.value + e.buyerDeposit + e.sellerDeposit);\n    }\n\n    function getEscrow(bytes24 escrowId) public view returns (State state, uint value, uint buyerDeposit,\n                                                              uint sellerDeposit, uint expireAt, address buyer, address seller) {\n        Escrow storage e = escrows[escrowId];\n        require(e.state != State.Init, \"Not found\");\n\n        return (e.state, e.value, e.buyerDeposit, e.sellerDeposit, e.expireAt, e.buyer, e.seller);\n    }\n\n    function isEscrowExpired(bytes24 escrowId) public view returns (bool) {\n        Escrow storage e = escrows[escrowId];\n        require(e.state != State.Init, \"Not found\");\n        return now \u003e e.expireAt;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}