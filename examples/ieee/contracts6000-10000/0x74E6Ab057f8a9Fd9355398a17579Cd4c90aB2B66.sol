{"ArtSteward.sol":{"content":"pragma solidity ^0.5.0;\nimport \"IERC721Full.sol\";\nimport \"SafeMath.sol\";\n\ncontract ArtSteward {\n    \n    /*\n    This smart contract collects patronage from current owner through a Harberger tax model and \n    takes stewardship of the artwork if the patron can\u0027t pay anymore.\n\n    Harberger Tax (COST): \n    - Artwork is always on sale.\n    - You have to have a price set.\n    - Tax (Patronage) is paid to maintain ownership.\n    - Steward maints control over ERC721.\n    */\n    using SafeMath for uint256;\n    \n    uint256 public price; //in wei\n    IERC721Full public art; // ERC721 NFT.\n    \n    uint256 public totalCollected; // all patronage ever collected\n    uint256 public currentCollected; // amount currently collected for patron  \n    uint256 public timeLastCollected; // \n    uint256 public deposit;\n    address payable public artist;\n    uint256 public artistFund;\n    \n    mapping (address =\u003e bool) public patrons;\n    mapping (address =\u003e uint256) public timeHeld;\n    mapping (address =\u003e uint256) public paid; // NOTE: not used [accident]\n\n    uint256 public timeAcquired;\n    \n    // 5% patronage\n    uint256 patronageNumerator = 50000000000;\n    uint256 patronageDenominator = 1000000000000;\n\n    enum StewardState { Foreclosed, Owned }\n    StewardState public state;\n\n    constructor(address payable _artist, address _artwork) public {\n        art = IERC721Full(_artwork);\n        art.setup();\n        artist = _artist;\n        state = StewardState.Foreclosed;\n    } \n\n    event LogBuy(address indexed owner, uint256 indexed price);\n    event LogPriceChange(uint256 indexed newPrice);\n    event LogForeclosure(address indexed prevOwner);\n    event LogCollection(uint256 indexed collected);\n    \n    modifier onlyPatron() {\n        require(msg.sender == art.ownerOf(42), \"Not patron\");\n        _;\n    }\n\n    modifier collectPatronage() {\n       _collectPatronage(); \n       _;\n    }\n\n    /* public view functions */\n    function patronageOwed() public view returns (uint256 patronageDue) {\n        return price.mul(now.sub(timeLastCollected)).mul(patronageNumerator)\n            .div(patronageDenominator).div(365 days);\n    }\n\n    function patronageOwedWithTimestamp() public view returns (uint256 patronageDue, uint256 timestamp) {\n        return (patronageOwed(), now);\n    }\n\n    function foreclosed() public view returns (bool) {\n        // returns whether it is in foreclosed state or not\n        // depending on whether deposit covers patronage due\n        // useful helper function when price should be zero, but contract doesn\u0027t reflect it yet.\n        uint256 collection = patronageOwed();\n        if(collection \u003e= deposit) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // same function as above, basically\n    function depositAbleToWithdraw() public view returns (uint256) {\n        uint256 collection = patronageOwed();\n        if(collection \u003e= deposit) {\n            return 0;\n        } else {\n            return deposit.sub(collection);\n        }\n    }\n\n    /*\n    now + deposit/patronage per second \n    now + depositAbleToWithdraw/(price*nume/denom/365).\n    */\n    function foreclosureTime() public view returns (uint256) {\n        // patronage per second\n        uint256 pps = price.mul(patronageNumerator).div(patronageDenominator).div(365 days);\n        return now + depositAbleToWithdraw().div(pps); // zero division if price is zero.\n    }\n\n    /* actions */\n    function _collectPatronage() public {\n        // determine patronage to pay\n        if (state == StewardState.Owned) {\n            uint256 collection = patronageOwed();\n            \n            // should foreclose and stake stewardship\n            if (collection \u003e= deposit) {\n                // up to when was it actually paid for?\n                timeLastCollected = timeLastCollected.add(((now.sub(timeLastCollected)).mul(deposit).div(collection)));\n                collection = deposit; // take what\u0027s left.\n\n                _foreclose();\n            } else  {\n                // just a normal collection\n                timeLastCollected = now;\n                currentCollected = currentCollected.add(collection);\n            }\n            \n            deposit = deposit.sub(collection);\n            totalCollected = totalCollected.add(collection);\n            artistFund = artistFund.add(collection);\n            emit LogCollection(collection);\n        }\n    }\n    \n    // note: anyone can deposit\n    function depositWei() public payable collectPatronage {\n        require(state != StewardState.Foreclosed, \"Foreclosed\");\n        deposit = deposit.add(msg.value);\n    }\n    \n    function buy(uint256 _newPrice) public payable collectPatronage {\n        require(_newPrice \u003e 0, \"Price is zero\");\n        require(msg.value \u003e price, \"Not enough\"); // \u003e, coz need to have at least something for deposit\n        address currentOwner = art.ownerOf(42);\n\n        if (state == StewardState.Owned) {\n            uint256 totalToPayBack = price;\n            if(deposit \u003e 0) {\n                totalToPayBack = totalToPayBack.add(deposit);\n            }  \n    \n            // pay previous owner their price + deposit back.\n            address payable payableCurrentOwner = address(uint160(currentOwner));\n            payableCurrentOwner.transfer(totalToPayBack);\n        } else if(state == StewardState.Foreclosed) {\n            state = StewardState.Owned;\n            timeLastCollected = now;\n        }\n        \n        deposit = msg.value.sub(price);\n        transferArtworkTo(currentOwner, msg.sender, _newPrice);\n        emit LogBuy(msg.sender, _newPrice);\n    }\n\n    function changePrice(uint256 _newPrice) public onlyPatron collectPatronage {\n        require(state != StewardState.Foreclosed, \"Foreclosed\");\n        require(_newPrice != 0, \"Incorrect Price\");\n        \n        price = _newPrice;\n        emit LogPriceChange(price);\n    }\n    \n    function withdrawDeposit(uint256 _wei) public onlyPatron collectPatronage returns (uint256) {\n        _withdrawDeposit(_wei);\n    }\n\n    function withdrawArtistFunds() public {\n        require(msg.sender == artist, \"Not artist\");\n        artist.transfer(artistFund);\n        artistFund = 0;\n    }\n\n    function exit() public onlyPatron collectPatronage {\n        _withdrawDeposit(deposit);\n    }\n\n    /* internal */\n\n    function _withdrawDeposit(uint256 _wei) internal {\n        // note: can withdraw whole deposit, which puts it in immediate to be foreclosed state.\n        require(deposit \u003e= _wei, \u0027Withdrawing too much\u0027);\n\n        deposit = deposit.sub(_wei);\n        msg.sender.transfer(_wei); // msg.sender == patron\n\n        if(deposit == 0) {\n            _foreclose();\n        }\n    }\n\n    function _foreclose() internal {\n        // become steward of artwork (aka foreclose)\n        address currentOwner = art.ownerOf(42);\n        transferArtworkTo(currentOwner, address(this), 0);\n        state = StewardState.Foreclosed;\n        currentCollected = 0;\n\n        emit LogForeclosure(currentOwner);\n    }\n\n    function transferArtworkTo(address _currentOwner, address _newOwner, uint256 _newPrice) internal {\n        // note: it would also tabulate time held in stewardship by smart contract\n        timeHeld[_currentOwner] = timeHeld[_currentOwner].add((timeLastCollected.sub(timeAcquired)));\n        \n        art.transferFrom(_currentOwner, _newOwner, 42);\n\n        price = _newPrice;\n        timeAcquired = now;\n        patrons[_newOwner] = true;\n    }\n}"},"IERC165.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"IERC721.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setup() public;\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}"},"IERC721Enumerable.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}"},"IERC721Full.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"IERC721.sol\";\nimport \"IERC721Enumerable.sol\";\nimport \"IERC721Metadata.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\n    // solhint-disable-previous-line no-empty-blocks\n}"},"IERC721Metadata.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}"}}