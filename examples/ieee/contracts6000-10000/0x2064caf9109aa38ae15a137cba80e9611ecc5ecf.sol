{{
  "language": "Solidity",
  "sources": {
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/melon/MelonTokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { TokenMetadata, Component } from \"../../Structs.sol\";\nimport { TokenAdapter } from \"../TokenAdapter.sol\";\n\n\nstruct Exchange {\n    address exchange;\n    address adapter;\n    bool takesCustody;\n}\n\n\nstruct OpenMakeOrder {\n    uint256 id; // Order Id from exchange\n    uint256 expiresAt; // Timestamp when the order expires\n    uint256 orderIndex; // Index of the order in the orders array\n    address buyAsset; // Address of the buy asset in the order\n    address feeAsset;\n}\n\n\n/**\n * @dev Spoke contract interface.\n * Only the functions required for MelonTokenAdapter contract are added.\n * The Spoke contract is available here\n * github.com/melonproject/protocol/blob/master/src/fund/hub/Spoke.sol.\n */\ninterface Spoke {\n    function hub() external view returns (address);\n}\n\n\n/**\n * @dev Hub contract interface.\n * Only the functions required for MelonTokenAdapter contract are added.\n * The Hub contract is available here\n * github.com/melonproject/protocol/blob/master/src/fund/hub/Hub.sol.\n */\ninterface Hub {\n    function accounting() external view returns (address);\n    function vault() external view returns (address);\n    function trading() external view returns (address);\n}\n\n\n/**\n * @dev Accounting contract interface.\n * Only the functions required for MelonTokenAdapter contract are added.\n * The Accounting contract is available here\n * github.com/melonproject/protocol/blob/master/src/fund/accounting/Accounting.sol.\n */\ninterface Accounting {\n    function getOwnedAssets() external view returns (address[] memory);\n}\n\n\n/**\n * @dev Trading contract interface.\n * Only the functions required for MelonTokenAdapter contract are added.\n * The Trading contract is available here\n * github.com/melonproject/protocol/blob/master/src/fund/trading/Trading.sol.\n */\ninterface Trading {\n    function exchanges(uint256) external view returns (Exchange memory);\n    function exchangesToOpenMakeOrders(\n        address,\n        address\n    )\n        external\n        view\n        returns (OpenMakeOrder memory);\n}\n\n\n/**\n * @dev ExchangeAdapter contract interface.\n * Only the functions required for MelonTokenAdapter contract are added.\n * The ExchangeAdapter contract is available here\n * github.com/melonproject/protocol/blob/master/src/exchanges/ExchangeAdapter.sol.\n */\ninterface ExchangeAdapter {\n    function getOrder(\n        address,\n        uint,\n        address\n    )\n        external\n        view\n        returns (\n            address,\n            address,\n            uint\n        );\n}\n\n\n/**\n * @title Token adapter for Melon Protocol by @codingsh.\n * @dev Implementation of TokenAdapter interface.\n * @author codingsh <codingsh@pm.me>\n */\ncontract MelonTokenAdapter is TokenAdapter {\n\n    /**\n     * @return TokenMetadata struct with ERC20-style token info.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n        return TokenMetadata({\n            token: token,\n            name: ERC20(token).name(),\n            symbol: ERC20(token).symbol(),\n            decimals: ERC20(token).decimals()\n        });\n    }\n\n    /**\n     * @return Array of Component structs with underlying tokens rates for the given token.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getComponents(address token) external view override returns (Component[] memory) {\n        uint256 totalSupply = ERC20(token).totalSupply();\n        address hub = Spoke(token).hub();\n        address accounting = Hub(hub).accounting();\n        address vault = Hub(hub).vault();\n        address trading = Hub(hub).trading();\n        address[] memory ownedAssets = Accounting(accounting).getOwnedAssets();\n        uint256 orderId;\n        uint256 totalQuantity;\n        uint256 remainingSellQuantity;\n\n        bool result = true;\n        uint256 counter = 0;\n\n        while (result) {\n            (result, ) = trading.staticcall(\n                abi.encodeWithSelector(\n                    Trading(trading).exchanges.selector,\n                    counter\n                )\n            );\n            counter++;\n        }\n\n        Exchange[] memory exchanges = new Exchange[](counter - 1);\n\n        for (uint256 i = 0; i < exchanges.length; i++) {\n            exchanges[i] = Trading(trading).exchanges(i);\n        }\n\n        Component[] memory underlyingTokens = new Component[](ownedAssets.length);\n\n        for (uint256 i = 0; i < ownedAssets.length; i++) {\n            totalQuantity = ERC20(ownedAssets[i]).balanceOf(vault);\n            totalQuantity += ERC20(ownedAssets[i]).balanceOf(trading);\n\n            for (uint256 j = 0; j < exchanges.length; j++) {\n                orderId = Trading(trading).exchangesToOpenMakeOrders(\n                    exchanges[j].exchange,\n                    ownedAssets[i]\n                ).id;\n                if (orderId == 0) {\n                    continue;\n                }\n                (, , remainingSellQuantity) = ExchangeAdapter(exchanges[j].adapter).getOrder(\n                    exchanges[j].exchange,\n                    orderId,\n                    ownedAssets[i]\n                );\n                if (exchanges[j].takesCustody) {\n                    totalQuantity += remainingSellQuantity;\n                }\n            }\n\n            underlyingTokens[i] = Component({\n                token: ownedAssets[i],\n                tokenType: \"ERC20\",\n                rate: totalQuantity * 1e18 / totalSupply\n            });\n        }\n\n        return underlyingTokens;\n    }\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/Structs.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\nstruct ProtocolBalance {\n    ProtocolMetadata metadata;\n    AdapterBalance[] adapterBalances;\n}\n\n\nstruct ProtocolMetadata {\n    string name;\n    string description;\n    string websiteURL;\n    string iconURL;\n    uint256 version;\n}\n\n\nstruct AdapterBalance {\n    AdapterMetadata metadata;\n    FullTokenBalance[] balances;\n}\n\n\nstruct AdapterMetadata {\n    address adapterAddress;\n    string adapterType; // \"Asset\", \"Debt\"\n}\n\n\n// token and its underlying tokens (if exist) balances\nstruct FullTokenBalance {\n    TokenBalance base;\n    TokenBalance[] underlying;\n}\n\n\nstruct TokenBalance {\n    TokenMetadata metadata;\n    uint256 amount;\n}\n\n\n// ERC20-style token metadata\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\nstruct TokenMetadata {\n    address token;\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\nstruct Component {\n    address token;\n    string tokenType;  // \"ERC20\" by default\n    uint256 rate;  // price per full share (1e18)\n}\n"
    },
    "/Users/igor/job/dev/defi-sdk/contracts/adapters/TokenAdapter.sol": {
      "content": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { TokenMetadata, Component } from \"../Structs.sol\";\n\n\n/**\n * @title Token adapter interface.\n * @dev getMetadata() and getComponents() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface TokenAdapter {\n\n    /**\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n     * struct TokenMetadata {\n     *     address token;\n     *     string name;\n     *     string symbol;\n     *     uint8 decimals;\n     * }\n     */\n    function getMetadata(address token) external view returns (TokenMetadata memory);\n\n    /**\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n     * struct Component {\n     *     address token;    // Address of token contract\n     *     string tokenType; // Token type (\"ERC20\" by default)\n     *     uint256 rate;     // Price per share (1e18)\n     * }\n     */\n    function getComponents(address token) external view returns (Component[] memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}