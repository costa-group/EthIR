{"OSnap.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\nimport \"./SafeMath.sol\";\n\ncontract OSnap {\n    using SafeMath for uint256;\n\n    // IPFS / Filecoin Reference\n    struct Multihash {\n        bytes32 digest;\n        uint8 hashFunction;\n        uint8 size;\n    }\n\n    // Emits when a new post is added\n    event Post(\n        uint256 indexed postID,\n        address indexed postedBy,\n        uint256 tipAPostID,\n        uint256 tipAAmt,\n        uint256 tipBPostID,\n        uint256 tipBAmt,\n        bytes32 digest,\n        uint8 hashFunction,\n        uint8 size\n    );\n\n    // Internal datastore.\n    mapping(uint256 =\u003e Multihash) private posts;\n    mapping(uint256 =\u003e address payable) private payableByPostID;\n    mapping(address =\u003e uint256[]) private postsByAddress;\n\n    // Global postID increments after each posting.\n    uint256 private postID = 0;\n\n    // Used to bootstap tangle.\n    address payable private _bootstapAddr;\n\n    constructor() public {\n        _bootstapAddr = msg.sender;\n    }\n\n    /* Returns the current postID */\n    function getPostID() public view returns (uint256 id) {\n        return postID;\n    }\n\n    /* Returns a post multihash by postID reference. */\n    function getPostById(uint256 _id)\n        public\n        view\n        returns (\n            bytes32 digest,\n            uint8 hashFunction,\n            uint8 size\n        )\n    {\n        // Require valid post identifier.\n        require(_id \u003c postID, \"Post not found.\");\n\n        // Return post multihash.\n        Multihash storage post = posts[_id];\n        return (post.digest, post.hashFunction, post.size);\n    }\n\n    /* Returns a post multihash by address:idx reference. */\n    function getPostByAddressIdx(address _addr, uint256 _idx)\n        public\n        view\n        returns (\n            bytes32 digest,\n            uint8 hashFunction,\n            uint8 size\n        )\n    {\n        // Require valid post address \u0026 index.\n        require(postsByAddress[_addr].length \u003e 0, \"Address not found.\");\n        require(_idx \u003c postsByAddress[_addr].length, \"Post not found.\");\n\n        // Return post multihash.\n        Multihash storage post = posts[postsByAddress[_addr][_idx]];\n        return (post.digest, post.hashFunction, post.size);\n    }\n\n    /* Returns the number of multihashes posted by an address. */\n    function getTotalPostsByAddress(address _addr)\n        public\n        view\n        returns (uint256 length)\n    {\n        return postsByAddress[_addr].length;\n    }\n\n    /* Returns the original poster by postID */\n    function getOPByID(uint256 _postID)\n        public\n        view\n        returns (address payable poster)\n    {\n        return payableByPostID[_postID];\n    }\n\n    function _addTip(uint256 _postID, uint256 _tip) private {\n        // Validate tip transaction.\n        require(_tip \u003e 0, \"Missing tip value.\");\n        require(\n            msg.sender == _bootstapAddr || (_postID \u003c postID),\n            \"Post not found.\"\n        );\n        require(\n            msg.sender == _bootstapAddr ||\n                (payableByPostID[_postID] != msg.sender),\n            \"Self-tipping is discouraged.\"\n        );\n\n        // Process tip.\n        payableByPostID[_postID].transfer(_tip);\n    }\n\n    /* Adds a tip. */\n    function addTip(uint256 _postID) public payable {\n        _addTip(_postID, msg.value);\n    }\n\n    /* Adds a new post to the tangle. */\n    function addPost(\n        uint256 _tipAPostId,\n        uint256 _tipAAmt,\n        uint256 _tipBPostId,\n        uint256 _tipBAmt,\n        bytes32 _digest,\n        uint8 _hashFunction,\n        uint8 _size\n    ) public payable returns (uint256 id) {\n        // Validate tip tangle amounts.\n        require(\n            _tipAAmt + _tipBAmt == msg.value,\n            \"Tips should equal message value.\"\n        );\n\n        // Add tips to tangle.\n        _addTip(_tipAPostId, _tipAAmt);\n        _addTip(_tipBPostId, _tipBAmt);\n\n        // Construct the multihash object.\n        Multihash memory post = Multihash(_digest, _hashFunction, _size);\n\n        // Assign the postID and append it to the postsByAddress list.\n        posts[postID] = post;\n        postsByAddress[msg.sender].push(postID);\n        payableByPostID[postID] = msg.sender;\n\n        // Emit the Post event.\n        emit Post(\n            postID,\n            msg.sender,\n            _tipAPostId,\n            _tipAAmt,\n            _tipBPostId,\n            _tipBAmt,\n            _digest,\n            _hashFunction,\n            _size\n        );\n\n        // Increment the postID and return its value.\n        return postID++;\n    }\n}\n"},"SafeMath.sol":{"content":"library SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}