{"ERC20Interface.sol":{"content":"pragma solidity ^0.5.9;\n\ncontract ERC20Interface {\n    event Transfer( address indexed _from, address indexed _to, uint _value);\n    event Approval( address indexed _owner, address indexed _spender, uint _value);\n    \n    function totalSupply() view public returns (uint _supply);\n    function balanceOf( address _who ) public view returns (uint _value);\n    function transfer( address _to, uint _value) public returns (bool _success);\n    function approve( address _spender, uint _value ) public returns (bool _success);\n    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\n    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\n}\n"},"OwnerHelper.sol":{"content":"pragma solidity ^0.5.9;\n\ncontract OwnerHelper\n{\n\n    address public master;\n    address public manager;\n\n    event ChangeMaster(address indexed _from, address indexed _to);\n    event ChangeManager(address indexed _from, address indexed _to);\n\n    modifier onlyMaster\n    {\n        require(msg.sender == master);\n        _;\n    }\n    \n    modifier onlyManager\n    {\n        require(msg.sender == manager);\n        _;\n    }\n\n    constructor() public\n    {\n        master = msg.sender;\n    }\n    \n    function transferMastership(address _to) onlyMaster public\n    {\n        require(_to != master);\n        require(_to != manager);\n        require(_to != address(0x0));\n\n        address from = master;\n        master = _to;\n\n        emit ChangeMaster(from, _to);\n    }\n\n    function transferManager(address _to) onlyMaster public\n    {\n        require(_to != master);\n        require(_to != manager);\n        require(_to != address(0x0));\n        \n        address from = manager;\n        manager = _to;\n        \n        emit ChangeManager(from, _to);\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.9;\n\nlibrary SafeMath\n{\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n"},"SHUFFLE_COIN.sol":{"content":"pragma solidity ^0.5.9;\n\nimport \"./ERC20Interface.sol\";\nimport \"./OwnerHelper.sol\";\nimport \"./SafeMath.sol\";\n\ncontract SHUFFLECoin is ERC20Interface, OwnerHelper\n{\n    using SafeMath for uint;\n    \n    string public name;\n    uint public decimals;\n    string public symbol;\n    \n    uint constant private E18 = 1000000000000000000;\n    uint constant private month = 2592000;\n    \n    uint constant public maxTotalSupply     = 10000000000 * E18;\n    \n    uint constant public maxSaleSupply      =  2000000000 * E18;\n    uint constant public maxCrowdSupply     =  1600000000 * E18;\n    uint constant public maxMktSupply       =  2800000000 * E18;\n    uint constant public maxTeamSupply      =  1600000000 * E18;\n    uint constant public maxReserveSupply   =  1600000000 * E18;\n    uint constant public maxAdvisorSupply   =   400000000 * E18;\n    \n    uint constant public teamVestingSupplyPerTime       = 100000000 * E18;\n    uint constant public teamVestingDate                = 2 * month;\n    uint constant public teamVestingTime                = 16;\n    \n    uint public totalTokenSupply;\n    \n    uint public tokenIssuedSale;\n    uint public privateIssuedSale;\n    uint public publicIssuedSale;\n    uint public tokenIssuedCrowd;\n    uint public tokenIssuedMkt;\n    uint public tokenIssuedTeam;\n    uint public tokenIssuedReserve;\n    uint public tokenIssuedAdvisor;\n    \n    uint public burnTokenSupply;\n    \n    mapping (address =\u003e uint) public balances;\n    mapping (address =\u003e mapping ( address =\u003e uint )) public approvals;\n    \n    mapping (address =\u003e uint) public privateFirstWallet;\n    mapping (address =\u003e uint) public privateSecondWallet;\n    mapping (address =\u003e uint) public privateThirdWallet;\n    mapping (address =\u003e uint) public privateFourthWallet;\n    mapping (address =\u003e uint) public privateFifthWallet;\n    \n    mapping (uint =\u003e uint) public teamVestingTimeAtSupply;\n    \n    bool public tokenLock = true;\n    bool public saleTime = true;\n    uint public endSaleTime = 0;\n\n    event Burn(address indexed _from, uint _value);\n    \n    event SaleIssue(address indexed _to, uint _tokens);\n    event CrowdIssue(address indexed _to, uint _tokens);\n    event MktIssue(address indexed _to, uint _tokens);\n    event TeamIssue(address indexed _to, uint _tokens);\n    event ReserveIssue(address indexed _to, uint _tokens);\n    event AdvisorIssue(address indexed _to, uint _tokens);\n    \n    event TokenUnLock(address indexed _to, uint _tokens);\n    \n    constructor() public\n    {\n        name        = \"SHUFFLE COIN\";\n        decimals    = 18;\n        symbol      = \"SHUF\";\n        \n        totalTokenSupply = 10000000000 * E18;\n        balances[master] = totalTokenSupply;\n        \n        tokenIssuedSale     = 0;\n        tokenIssuedCrowd    = 0;\n        tokenIssuedMkt      = 0;\n        tokenIssuedTeam     = 0;\n        tokenIssuedReserve  = 0;\n        tokenIssuedAdvisor  = 0;\n        \n        require(maxTotalSupply == maxSaleSupply + maxCrowdSupply + maxMktSupply + maxTeamSupply + maxReserveSupply + maxAdvisorSupply);\n        \n        require(maxTeamSupply == teamVestingSupplyPerTime * teamVestingTime);\n        \n    }\n    \n    function totalSupply() view public returns (uint) \n    {\n        return totalTokenSupply;\n    }\n    \n    function balanceOf(address _who) view public returns (uint) \n    {\n        uint balance = balances[_who];\n        \n        balance = balance.add(privateFirstWallet[_who] + privateSecondWallet[_who] + privateThirdWallet[_who] + privateFourthWallet[_who] + privateFifthWallet[_who]);\n        \n        return balance;\n    }\n    \n    function transfer(address _to, uint _value) public returns (bool) \n    {\n        require(isTransferable() == true);\n        require(balances[msg.sender] \u003e= _value);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n    \n    function approve(address _spender, uint _value) public returns (bool)\n    {\n        require(isTransferable() == true);\n        require(balances[msg.sender] \u003e= _value);\n        \n        approvals[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true; \n    }\n    \n    function allowance(address _owner, address _spender) view public returns (uint) \n    {\n        return approvals[_owner][_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) \n    {\n        require(isTransferable() == true);\n        require(balances[_from] \u003e= _value);\n        require(approvals[_from][msg.sender] \u003e= _value);\n        \n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to]  = balances[_to].add(_value);\n        \n        emit Transfer(_from, _to, _value);\n        \n        return true;\n    }\n    \n    function privateIssue(address _to, uint _value) onlyMaster public\n    {\n        \n        uint tokens = _value * E18;\n        require(maxSaleSupply \u003e= tokenIssuedSale.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to]                   = balances[_to].add( tokens.mul(10)/100 );\n        privateFirstWallet[_to]         = privateFirstWallet[_to].add( tokens.mul(10)/100 );\n        privateSecondWallet[_to]        = privateSecondWallet[_to].add( tokens.mul(15)/100 );\n        privateThirdWallet[_to]         = privateThirdWallet[_to].add( tokens.mul(20)/100 );\n        privateFourthWallet[_to]        = privateFourthWallet[_to].add( tokens.mul(20)/100 );\n        privateFifthWallet[_to]         = privateFifthWallet[_to].add( tokens.mul(25)/100 );\n        \n        tokenIssuedSale = tokenIssuedSale.add(tokens);\n        privateIssuedSale = privateIssuedSale.add(tokens);\n        \n        emit SaleIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n\n    function publicIssue(address _to, uint _value) onlyMaster public\n    {\n        uint tokens = _value * E18;\n        require(maxSaleSupply \u003e= tokenIssuedSale.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        \n        tokenIssuedSale = tokenIssuedSale.add(tokens);\n        publicIssuedSale = publicIssuedSale.add(tokens);\n        \n        emit SaleIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n    \n    function crowdIssue(address _to, uint _value) onlyMaster public\n    {\n        uint tokens = _value * E18;\n        require(maxCrowdSupply \u003e= tokenIssuedCrowd.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        \n        tokenIssuedCrowd = tokenIssuedCrowd.add(tokens);\n        \n        emit CrowdIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n    \n    function mktIssue(address _to, uint _value) onlyMaster public\n    {\n        uint tokens = _value * E18;\n        require(maxMktSupply \u003e= tokenIssuedMkt.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        \n        tokenIssuedMkt = tokenIssuedMkt.add(tokens);\n        \n        emit MktIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n    \n    function reserveIssue(address _to, uint _value) onlyMaster public\n    {\n        uint tokens = _value * E18;\n        require(maxReserveSupply \u003e= tokenIssuedReserve.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        \n        tokenIssuedReserve = tokenIssuedReserve.add(tokens);\n        \n        emit ReserveIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n\n    function teamIssueVesting(address _to, uint _time) onlyMaster public\n    {\n        require(saleTime == false);\n        require(teamVestingTime \u003e= _time);\n        \n        uint time = now;\n        require( ( ( endSaleTime + (_time * teamVestingDate) ) \u003c time ) \u0026\u0026 ( teamVestingTimeAtSupply[_time] \u003e 0 ));\n        \n        uint tokens = teamVestingTimeAtSupply[_time];\n\n        require(maxTeamSupply \u003e= tokenIssuedTeam.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        teamVestingTimeAtSupply[_time] = 0;\n        \n        tokenIssuedTeam = tokenIssuedTeam.add(tokens);\n        \n        emit TeamIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n    \n    function advisorIssue(address _to, uint _value) onlyMaster public\n    {\n        uint tokens = _value * E18;\n        \n        require(maxAdvisorSupply \u003e= tokenIssuedAdvisor.add(tokens));\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        balances[_to] = balances[_to].add(tokens);\n        \n        tokenIssuedAdvisor = tokenIssuedAdvisor.add(tokens);\n        \n        emit AdvisorIssue(_to, tokens);\n        \n        emit Transfer(msg.sender, _to, tokens);\n    }\n\n    function isTransferable() private view returns (bool)\n    {\n        if(tokenLock == false)\n        {\n            return true;\n        }\n        else if(msg.sender == manager)\n        {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    function setTokenUnlock() onlyManager public\n    {\n        require(tokenLock == true);\n        require(saleTime == false);\n        \n        tokenLock = false;\n    }\n    \n    function setTokenLock() onlyManager public\n    {\n        require(tokenLock == false);\n        \n        tokenLock = true;\n    }\n    \n    function privateUnlock(address _to) onlyManager public\n    {\n        require(tokenLock == false);\n        require(saleTime == false);\n        \n        uint time = now;\n        uint unlockTokens = 0;\n\n        if( (time \u003e= endSaleTime.add(month)) \u0026\u0026 (privateFirstWallet[_to] \u003e 0) )\n        {\n            balances[_to] = balances[_to].add(privateFirstWallet[_to]);\n            unlockTokens = unlockTokens.add(privateFirstWallet[_to]);\n            privateFirstWallet[_to] = 0;\n        }\n        \n        if( (time \u003e= endSaleTime.add(month * 2)) \u0026\u0026 (privateSecondWallet[_to] \u003e 0) )\n        {\n            balances[_to] = balances[_to].add(privateSecondWallet[_to]);\n            unlockTokens = unlockTokens.add(privateSecondWallet[_to]);\n            privateSecondWallet[_to] = 0;\n        }\n        \n        if( (time \u003e= endSaleTime.add(month * 3)) \u0026\u0026 (privateThirdWallet[_to] \u003e 0) )\n        {\n            balances[_to] = balances[_to].add(privateThirdWallet[_to]);\n            unlockTokens = unlockTokens.add(privateThirdWallet[_to]);\n            privateThirdWallet[_to] = 0;\n        }\n        \n        if( (time \u003e= endSaleTime.add(month * 4)) \u0026\u0026 (privateFourthWallet[_to] \u003e 0) )\n        {\n            balances[_to] = balances[_to].add(privateFourthWallet[_to]);\n            unlockTokens = unlockTokens.add(privateFourthWallet[_to]);\n            privateFourthWallet[_to] = 0;\n        }\n        \n        if( (time \u003e= endSaleTime.add(month * 5)) \u0026\u0026 (privateFifthWallet[_to] \u003e 0) )\n        {\n            balances[_to] = balances[_to].add(privateFifthWallet[_to]);\n            unlockTokens = unlockTokens.add(privateFifthWallet[_to]);\n            privateFifthWallet[_to] = 0;\n        }\n\n\n        emit TokenUnLock(_to, unlockTokens);\n    }\n    \n    function () payable external\n    {\n        revert();\n    }\n    \n    function endSale() onlyManager public\n    {\n        require(saleTime == true);\n        \n        saleTime = false;\n        \n        uint time = now;\n        \n        endSaleTime = time;\n        \n        for(uint i = 1; i \u003c= teamVestingTime; i++)\n        {\n            teamVestingTimeAtSupply[i] = teamVestingTimeAtSupply[i].add(teamVestingSupplyPerTime);\n        }\n       \n    }    \n   \n    function transferAnyERC20Token(address tokenAddress, uint tokens) onlyManager public returns (bool success)\n    {\n        return ERC20Interface(tokenAddress).transfer(manager, tokens);\n    }\n    \n    function burnToken(uint _value) onlyManager public\n    {\n        uint tokens = _value * E18;\n        \n        require(balances[msg.sender] \u003e= tokens);\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        \n        burnTokenSupply = burnTokenSupply.add(tokens);\n        totalTokenSupply = totalTokenSupply.sub(tokens);\n        \n        emit Burn(msg.sender, tokens);\n    }\n    \n    function close() onlyMaster public\n    {\n        selfdestruct(msg.sender);\n    }\n}\n"}}