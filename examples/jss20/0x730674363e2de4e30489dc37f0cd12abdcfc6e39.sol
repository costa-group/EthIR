{"AccessControl.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./EnumerableSet.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, _msgSender()));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role\u0027s admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 =\u003e RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role\u0027s admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\u0027s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\u0027s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\u0027s\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn\u0027t perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``\u0027s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"Address.sol":{"content":"pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"},"AddressWhitelist.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Ownable.sol\";\n\n\n/**\n * @title A contract to track a whitelist of addresses.\n */\ncontract AddressWhitelist is Ownable {\n    enum Status { None, In, Out }\n    mapping(address =\u003e Status) public whitelist;\n\n    address[] public whitelistIndices;\n\n    event AddedToWhitelist(address indexed addedAddress);\n    event RemovedFromWhitelist(address indexed removedAddress);\n\n    /**\n     * @notice Adds an address to the whitelist.\n     * @param newElement the new address to add.\n     */\n    function addToWhitelist(address newElement) external onlyOwner {\n        // Ignore if address is already included\n        if (whitelist[newElement] == Status.In) {\n            return;\n        }\n\n        // Only append new addresses to the array, never a duplicate\n        if (whitelist[newElement] == Status.None) {\n            whitelistIndices.push(newElement);\n        }\n\n        whitelist[newElement] = Status.In;\n\n        emit AddedToWhitelist(newElement);\n    }\n\n    /**\n     * @notice Removes an address from the whitelist.\n     * @param elementToRemove the existing address to remove.\n     */\n    function removeFromWhitelist(address elementToRemove) external onlyOwner {\n        if (whitelist[elementToRemove] != Status.Out) {\n            whitelist[elementToRemove] = Status.Out;\n            emit RemovedFromWhitelist(elementToRemove);\n        }\n    }\n\n    /**\n     * @notice Checks whether an address is on the whitelist.\n     * @param elementToCheck the address to check.\n     * @return True if `elementToCheck` is on the whitelist, or False.\n     */\n    function isOnWhitelist(address elementToCheck) external view returns (bool) {\n        return whitelist[elementToCheck] == Status.In;\n    }\n\n    /**\n     * @notice Gets all addresses that are currently included in the whitelist.\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\n     * the empty index.\n     * @return activeWhitelist the list of addresses on the whitelist.\n     */\n    function getWhitelist() external view returns (address[] memory activeWhitelist) {\n        // Determine size of whitelist first\n        uint256 activeCount = 0;\n        for (uint256 i = 0; i \u003c whitelistIndices.length; i++) {\n            if (whitelist[whitelistIndices[i]] == Status.In) {\n                activeCount++;\n            }\n        }\n\n        // Populate whitelist\n        activeWhitelist = new address[](activeCount);\n        activeCount = 0;\n        for (uint256 i = 0; i \u003c whitelistIndices.length; i++) {\n            address addr = whitelistIndices[i];\n            if (whitelist[addr] == Status.In) {\n                activeWhitelist[activeCount] = addr;\n                activeCount++;\n            }\n        }\n    }\n}\n"},"AdministrateeInterface.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Interface that all financial contracts expose to the admin.\n */\ninterface AdministrateeInterface {\n    /**\n     * @notice Initiates the shutdown process, in case of an emergency.\n     */\n    function emergencyShutdown() external;\n\n    /**\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\n     */\n    function remargin() external;\n}\n"},"Arrays.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n   /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low \u003c high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] \u003e element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low \u003e 0 \u0026\u0026 array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"},"ConditionalEscrow.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Escrow.sol\";\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n */\nabstract contract ConditionalEscrow is Escrow {\n    /**\n     * @dev Returns whether an address is allowed to withdraw their funds. To be\n     * implemented by derived contracts.\n     * @param payee The destination address of the funds.\n     */\n    function withdrawalAllowed(address payee) public view virtual returns (bool);\n\n    function withdraw(address payable payee) public virtual override {\n        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n        super.withdraw(payee);\n    }\n}\n"},"Constants.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\n */\nlibrary OracleInterfaces {\n    bytes32 public constant Oracle = \"Oracle\";\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\n    bytes32 public constant Store = \"Store\";\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\n    bytes32 public constant Registry = \"Registry\";\n}\n"},"Context.sol":{"content":"pragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"ContractCreator.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./FinderInterface.sol\";\nimport \"./Registry.sol\";\n\n\n/**\n * @title Base contract for all financial contract creators\n */\nabstract contract ContractCreator {\n    address internal finderAddress;\n\n    constructor(address _finderAddress) public {\n        finderAddress = _finderAddress;\n    }\n\n    function _registerContract(address[] memory parties, address contractToRegister) internal {\n        FinderInterface finder = FinderInterface(finderAddress);\n        bytes32 registryInterface = \"Registry\";\n        Registry registry = Registry(finder.getImplementationAddress(registryInterface));\n        registry.registerContract(parties, contractToRegister);\n    }\n}\n"},"Counters.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"},"Create2.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as \u0027counterfactual interactions\u0027.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance \u003e= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract\u0027s address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(bytes20(_data \u003c\u003c 96));\n    }\n}\n"},"DesignatedVoting.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MultiRole.sol\";\nimport \"./Withdrawable.sol\";\nimport \"./VotingInterface.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./Constants.sol\";\n\n\n/**\n * @title Proxy to allow voting from another address.\n * @dev Allows a UMA token holder to designate another address to vote on their behalf.\n * Each voter must deploy their own instance of this contract.\n */\ncontract DesignatedVoting is Withdrawable {\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the Voter role. Is also permanently permissioned as the minter roll.\n        Voter // Can vote through this contract.\n    }\n\n    // Reference to the UMA Finder contract, allowing Voting upgrades to be performed\n    // without requiring any calls to this contract.\n    FinderInterface private finder;\n\n    /**\n     * @notice Construct the DesignatedVoting contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param ownerAddress address of the owner of the DesignatedVoting contract.\n     * @param voterAddress address to which the owner has delegated their voting power.\n     */\n    constructor(\n        address finderAddress,\n        address ownerAddress,\n        address voterAddress\n    ) public {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), ownerAddress);\n        _createExclusiveRole(uint256(Roles.Voter), uint256(Roles.Owner), voterAddress);\n        _setWithdrawRole(uint256(Roles.Owner));\n\n        finder = FinderInterface(finderAddress);\n    }\n\n    /****************************************\n     *   VOTING AND REWARD FUNCTIONALITY    *\n     ****************************************/\n\n    /**\n     * @notice Forwards a commit to Voting.\n     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().commitVote(identifier, time, hash);\n    }\n\n    /**\n     * @notice Forwards a batch commit to Voting.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(VotingInterface.Commitment[] calldata commits) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().batchCommit(commits);\n    }\n\n    /**\n     * @notice Forwards a reveal to Voting.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price used along with the `salt` to produce the `hash` during the commit phase.\n     * @param salt used along with the `price` to produce the `hash` during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().revealVote(identifier, time, price, salt);\n    }\n\n    /**\n     * @notice Forwards a batch reveal to Voting.\n     * @param reveals is an array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(VotingInterface.Reveal[] calldata reveals) external onlyRoleHolder(uint256(Roles.Voter)) {\n        _getVotingAddress().batchReveal(reveals);\n    }\n\n    /**\n     * @notice Forwards a reward retrieval to Voting.\n     * @dev Rewards are added to the tokens already held by this contract.\n     * @param roundId defines the round from which voting rewards will be retrieved from.\n     * @param toRetrieve an array of PendingRequests which rewards are retrieved from.\n     * @return amount of rewards that the user should receive.\n     */\n    function retrieveRewards(uint256 roundId, VotingInterface.PendingRequest[] memory toRetrieve)\n        public\n        onlyRoleHolder(uint256(Roles.Voter))\n        returns (FixedPoint.Unsigned memory)\n    {\n        return _getVotingAddress().retrieveRewards(address(this), roundId, toRetrieve);\n    }\n\n    function _getVotingAddress() private view returns (VotingInterface) {\n        return VotingInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n}\n"},"DesignatedVotingFactory.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./Withdrawable.sol\";\nimport \"./DesignatedVoting.sol\";\n\n\n/**\n * @title Factory to deploy new instances of DesignatedVoting and look up previously deployed instances.\n * @dev Allows off-chain infrastructure to look up a hot wallet\u0027s deployed DesignatedVoting contract.\n */\ncontract DesignatedVotingFactory is Withdrawable {\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Withdrawer // Can withdraw any ETH or ERC20 sent accidentally to this contract.\n    }\n\n    address private finder;\n    mapping(address =\u003e DesignatedVoting) public designatedVotingContracts;\n\n    /**\n     * @notice Construct the DesignatedVotingFactory contract.\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\n     */\n    constructor(address finderAddress) public {\n        finder = finderAddress;\n\n        _createWithdrawRole(uint256(Roles.Withdrawer), uint256(Roles.Withdrawer), msg.sender);\n    }\n\n    /**\n     * @notice Deploys a new `DesignatedVoting` contract.\n     * @param ownerAddress defines who will own the deployed instance of the designatedVoting contract.\n     * @return designatedVoting a new DesignatedVoting contract.\n     */\n    function newDesignatedVoting(address ownerAddress) external returns (DesignatedVoting) {\n        require(address(designatedVotingContracts[msg.sender]) == address(0), \"Duplicate hot key not permitted\");\n\n        DesignatedVoting designatedVoting = new DesignatedVoting(finder, ownerAddress, msg.sender);\n        designatedVotingContracts[msg.sender] = designatedVoting;\n        return designatedVoting;\n    }\n\n    /**\n     * @notice Associates a `DesignatedVoting` instance with `msg.sender`.\n     * @param designatedVotingAddress address to designate voting to.\n     * @dev This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter`\n     * address and wants that reflected here.\n     */\n    function setDesignatedVoting(address designatedVotingAddress) external {\n        require(address(designatedVotingContracts[msg.sender]) == address(0), \"Duplicate hot key not permitted\");\n        designatedVotingContracts[msg.sender] = DesignatedVoting(designatedVotingAddress);\n    }\n}\n"},"ECDSA.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature \u0027s\u0027 value\");\n        }\n\n        if (v != 27 \u0026\u0026 v != 28) {\n            revert(\"ECDSA: invalid signature \u0027v\u0027 value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"},"EnumerableMap.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity\u0027s\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -\u003e address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length \u003e index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n"},"EnumerableSet.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"ERC165.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027)) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it\u0027s supported.\n     */\n    mapping(bytes4 =\u003e bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"},"ERC165Checker.sol":{"content":"pragma solidity ^0.6.2;\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027)) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) \u0026\u0026\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) \u0026\u0026\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i \u003c interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success \u0026\u0026 result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool, bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length \u003c 32) return (false, false);\n        return (success, abi.decode(result, (bool)));\n    }\n}\n"},"ERC1820Implementer.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n\n    mapping(bytes32 =\u003e mapping(address =\u003e bool)) private _supportedInterfaces;\n\n    /**\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"},"ERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _balances;\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"},"ERC20Burnable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"},"ERC20Capped.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap) public {\n        require(cap \u003e 0, \"ERC20Capped: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @dev Returns the cap on the token\u0027s total supply.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) { // When minting tokens\n            require(totalSupply().add(amount) \u003c= _cap, \"ERC20Capped: cap exceeded\");\n        }\n    }\n}\n"},"ERC20Pausable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\nimport \"./Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"},"ERC20PresetMinterPauser.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./AccessControl.sol\";\nimport \"./Context.sol\";\nimport \"./ERC20.sol\";\nimport \"./ERC20Burnable.sol\";\nimport \"./ERC20Pausable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to aother accounts\n */\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"},"ERC20Snapshot.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Arrays.sol\";\nimport \"./Counters.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it\u0027s possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\nabstract contract ERC20Snapshot is ERC20 {\n    // Inspired by Jordi Baylina\u0027s MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using SafeMath for uint256;\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping (address =\u003e Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven\u0027t measured the actual numbers; if this is something you\u0027re interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _currentSnapshotId.current();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // _transfer, _mint and _burn are the only functions where the balances are modified, so it is there that the\n    // snapshots are updated. Note that the update happens _before_ the balance change, with the pre-modified value.\n    // The same is true for the total supply and _mint and _burn.\n    function _transfer(address from, address to, uint256 value) internal virtual override {\n        _updateAccountSnapshot(from);\n        _updateAccountSnapshot(to);\n\n        super._transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal virtual override {\n        _updateAccountSnapshot(account);\n        _updateTotalSupplySnapshot();\n\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal virtual override {\n        _updateAccountSnapshot(account);\n        _updateTotalSupplySnapshot();\n\n        super._burn(account, value);\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n        private view returns (bool, uint256)\n    {\n        require(snapshotId \u003e 0, \"ERC20Snapshot: id is 0\");\n        // solhint-disable-next-line max-line-length\n        require(snapshotId \u003c= _currentSnapshotId.current(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn\u0027t exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _currentSnapshotId.current();\n        if (_lastSnapshotId(snapshots.ids) \u003c currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n}\n"},"ERC721.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./ERC165.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./EnumerableSet.sol\";\nimport \"./EnumerableMap.sol\";\nimport \"./Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address =\u003e EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address =\u003e mapping (address =\u003e bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 =\u003e string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256(\u0027balanceOf(address)\u0027)) == 0x70a08231\n     *     bytes4(keccak256(\u0027ownerOf(uint256)\u0027)) == 0x6352211e\n     *     bytes4(keccak256(\u0027approve(address,uint256)\u0027)) == 0x095ea7b3\n     *     bytes4(keccak256(\u0027getApproved(uint256)\u0027)) == 0x081812fc\n     *     bytes4(keccak256(\u0027setApprovalForAll(address,bool)\u0027)) == 0xa22cb465\n     *     bytes4(keccak256(\u0027isApprovedForAll(address,address)\u0027)) == 0xe985e9c5\n     *     bytes4(keccak256(\u0027transferFrom(address,address,uint256)\u0027)) == 0x23b872dd\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256)\u0027)) == 0x42842e0e\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256,bytes)\u0027)) == 0xb88d4fde\n     *\n     *     =\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256(\u0027name()\u0027)) == 0x06fdde03\n     *     bytes4(keccak256(\u0027symbol()\u0027)) == 0x95d89b41\n     *     bytes4(keccak256(\u0027tokenURI(uint256)\u0027)) == 0xc87b56dd\n     *\n     *     =\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256(\u0027totalSupply()\u0027)) == 0x18160ddd\n     *     bytes4(keccak256(\u0027tokenOfOwnerByIndex(address,uint256)\u0027)) == 0x2f745c59\n     *     bytes4(keccak256(\u0027tokenByIndex(uint256)\u0027)) == 0x4f6ccce7\n     *\n     *     =\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID. May return an empty string.\n     *\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\n     * token\u0027s own URI (via {_setTokenURI}).\n     *\n     * If there is a base URI but no token URI, the token\u0027s ID will be used as\n     * its URI when appending it to the base URI. This pattern for autogenerated\n     * token URIs can lead to large gas savings.\n     *\n     * .Examples\n     * |===\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"token.uri/123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"\"\n     * | \"token.uri/\u003ctokenId\u003e\"\n     * |===\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length \u003e 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token\u0027s URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param operator operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     *\n     * Reverts if the token ID does not exist.\n     *\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\n     * `https://api.myproject.com/token/\u003cid\u003e`), use {_setBaseURI} to store\n     * it and save gas.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ));\n        if (!success) {\n            if (returndata.length \u003e 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n            }\n        } else {\n            bytes4 retval = abi.decode(returndata, (bytes4));\n            return (retval == _ERC721_RECEIVED);\n        }\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - when `from` is zero, `tokenId` will be minted for `to`.\n     * - when `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"},"ERC721Burnable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"},"ERC721Holder.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IERC721Receiver.sol\";\n\ncontract ERC721Holder is IERC721Receiver {\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"},"ERC721Pausable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ERC721.sol\";\nimport \"./Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"},"ERC721PresetMinterPauserAutoId.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./AccessControl.sol\";\nimport \"./Context.sol\";\nimport \"./Counters.sol\";\nimport \"./ERC721.sol\";\nimport \"./ERC721Burnable.sol\";\nimport \"./ERC721Pausable.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to aother accounts\n */\ncontract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE` and `MINTER_ROLE`to the account that\n     * deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n\n        _setBaseURI(baseURI);\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We can just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n}\n"},"ERC777.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address =\u003e uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    // We inline the result of the following hashes because Solidity doesn\u0027t resolve them at compile time.\n    // See https://github.com/ethereum/solidity/issues/4024.\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n    // This isn\u0027t ever read from - it\u0027s only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address =\u003e bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operators;\n    mapping(address =\u003e mapping(address =\u003e bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        address[] memory defaultOperators\n    ) public {\n        _name = name;\n        _symbol = symbol;\n\n        _defaultOperatorsArray = defaultOperators;\n        for (uint256 i = 0; i \u003c _defaultOperatorsArray.length; i++) {\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public override  {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view override returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] \u0026\u0026 !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public override  {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public override  {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n    public override\n    {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n   /**\n    * @dev See {IERC20-transferFrom}.\n    *\n    * Note that operator and allowance concepts are orthogonal: operators cannot\n    * call `transferFrom` (unless they have allowance), and accounts with\n    * allowance cannot call `operatorSend` (unless they are operators).\n    *\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n    */\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: transfer amount exceeds allowance\"));\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal virtual\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        internal\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        internal virtual\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        // Update state variables\n        _balances[from] = _balances[from].sub(amount, \"ERC777: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        _balances[from] = _balances[from].sub(amount, \"ERC777: transfer amount exceeds balance\");\n        _balances[to] = _balances[to].add(amount);\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    function _approve(address holder, address spender, uint256 value) internal {\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\n        // currently unnecessary.\n        //require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - when `from` is zero, `tokenId` will be minted for `to`.\n     * - when `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\n}\n"},"Escrow.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\n\n /**\n  * @title Escrow\n  * @dev Base escrow contract, holds funds designated for a payee until they\n  * withdraw them.\n  *\n  * Intended usage: This contract (and derived escrow contracts) should be a\n  * standalone contract, that only interacts with the contract that instantiated\n  * it. That way, it is guaranteed that all Ether will be handled according to\n  * the `Escrow` rules, and there is no need to check for payable functions or\n  * transfers in the inheritance tree. The contract that uses the escrow as its\n  * payment method should be its owner, and provide public methods redirecting\n  * to the escrow\u0027s deposit and withdraw.\n  */\ncontract Escrow is Ownable {\n    using SafeMath for uint256;\n    using Address for address payable;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address =\u003e uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     */\n    function deposit(address payee) public virtual payable onlyOwner {\n        uint256 amount = msg.value;\n        _deposits[payee] = _deposits[payee].add(amount);\n\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     */\n    function withdraw(address payable payee) public virtual onlyOwner {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.sendValue(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n}\n"},"ExpandedERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\nimport \"./MultiRole.sol\";\nimport \"./ExpandedIERC20.sol\";\n\n\n/**\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\n * be the owner who is capable of adding new roles.\n */\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\n    enum Roles {\n        // Can set the minter and burner.\n        Owner,\n        // Addresses that can mint new tokens.\n        Minter,\n        // Addresses that can burn tokens that address owns.\n        Burner\n    }\n\n    /**\n     * @notice Constructs the ExpandedERC20.\n     * @param _tokenName The name which describes the new token.\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally \u003c 5 chars.\n     * @param _tokenDecimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        uint8 _tokenDecimals\n    ) public ERC20(_tokenName, _tokenSymbol) {\n        _setupDecimals(_tokenDecimals);\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\n    }\n\n    /**\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\n     * @param recipient address to mint to.\n     * @param value amount of tokens to mint.\n     * @return True if the mint succeeded, or False.\n     */\n    function mint(address recipient, uint256 value)\n        external\n        override\n        onlyRoleHolder(uint256(Roles.Minter))\n        returns (bool)\n    {\n        _mint(recipient, value);\n        return true;\n    }\n\n    /**\n     * @dev Burns `value` tokens owned by `msg.sender`.\n     * @param value amount of tokens to burn.\n     */\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\n        _burn(msg.sender, value);\n    }\n}\n"},"ExpandedIERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\n\n\n/**\n * @title ERC20 interface that includes burn and mint methods.\n */\nabstract contract ExpandedIERC20 is IERC20 {\n    /**\n     * @notice Burns a specific amount of the caller\u0027s tokens.\n     * @dev Only burns the caller\u0027s tokens, so it is safe to leave this method permissionless.\n     */\n    function burn(uint256 value) external virtual;\n\n    /**\n     * @notice Mints tokens and adds them to the balance of the `to` address.\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\n     */\n    function mint(address to, uint256 value) external virtual returns (bool);\n}\n"},"ExpiringMultiParty.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./FixedPoint.sol\";\nimport \"./Liquidatable.sol\";\n\n\ncontract ExpiringMultiParty is Liquidatable {\n    constructor(ConstructorParams memory params) public Liquidatable(params) {}\n}\n"},"ExpiringMultiPartyCreator.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./ContractCreator.sol\";\nimport \"./Testable.sol\";\nimport \"./AddressWhitelist.sol\";\nimport \"./ExpiringMultiParty.sol\";\n\n\n/**\n * @title Expiring Multi Party Contract creator.\n * @notice Factory contract to create and register new instances of expiring multiparty contracts.\n * Responsible for constraining the parameters used to construct a new EMP.\n */\ncontract ExpiringMultiPartyCreator is ContractCreator, Testable {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *     EMP CREATOR DATA STRUCTURES      *\n     ****************************************/\n\n    struct Params {\n        uint256 expirationTimestamp;\n        address collateralAddress;\n        bytes32 priceFeedIdentifier;\n        string syntheticName;\n        string syntheticSymbol;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPct;\n        FixedPoint.Unsigned sponsorDisputeRewardPct;\n        FixedPoint.Unsigned disputerDisputeRewardPct;\n        FixedPoint.Unsigned minSponsorTokens;\n        address timerAddress;\n    }\n\n    /**\n     * @notice Deployment Configuration Constraints.\n     * @dev: These constraints can evolve over time and are initially constrained to conservative values\n     * in this first iteration of an EMP creator. Technically there is nothing in the ExpiringMultiParty\n     * contract requiring these constraints. However, because \"createExpiringMultiParty()\" is intended to\n     * be the only way to create valid financial contracts that are **registered** with the\n     * DVM (via \"_registerContract()\"), we can enforce deployment configurations here.\n     **/\n\n    // - Whitelist allowed collateral currencies.\n    // Note: before an instantiation of ExpiringMultipartyCreator is approved to register contracts, voters should\n    // ensure that the ownership of this collateralTokenWhitelist has been renounced (so it is effectively\n    // frozen). One could also set the owner to the address of the Governor contract, but voters may find that option\n    // less preferable since it would force them to take a more active role in managing this financial contract\n    // template.\n    AddressWhitelist public collateralTokenWhitelist;\n    // - Address of TokenFactory to pass into newly constructed ExpiringMultiParty contracts\n    address public tokenFactoryAddress;\n    // - Discretize expirations such that they must expire on the first of each month.\n    uint256[17] public VALID_EXPIRATION_TIMESTAMPS = [\n        1585699200, // 2020-04-01T00:00:00.000Z\n        1588291200, // 2020-05-01T00:00:00.000Z\n        1590969600, // 2020-06-01T00:00:00.000Z\n        1593561600, // 2020-07-01T00:00:00.000Z\n        1596240000, // 2020-08-01T00:00:00.000Z\n        1598918400, // 2020-09-01T00:00:00.000Z\n        1601510400, // 2020-10-01T00:00:00.000Z\n        1604188800, // 2020-11-01T00:00:00.000Z\n        1606780800, // 2020-12-01T00:00:00.000Z\n        1609459200, // 2021-01-01T00:00:00.000Z\n        1612137600, // 2021-02-01T00:00:00.000Z\n        1614556800, // 2021-03-01T00:00:00.000Z\n        1617235200, // 2021-04-01T00:00:00.000Z\n        1619827200, // 2021-05-01T00:00:00.000Z\n        1622505600, // 2021-06-01T00:00:00.000Z\n        1625097600 // 2021-07-01T00:00:00.000Z\n    ];\n    // - Time for pending withdrawal to be disputed: 60 minutes. Lower liveness increases sponsor usability.\n    // However, this parameter is a reflection of how long we expect it to take for liquidators to identify\n    // that a sponsor is undercollateralized and acquire the tokens needed to liquidate them. This is also a\n    // reflection of how long a malicious sponsor would need to maintain a lower-price manipulation to get\n    // their withdrawal processed maliciously (if set too low, it’s quite easy for malicious sponsors to\n    // request a withdrawal and spend gas to prevent other transactions from processing until the withdrawal\n    //  gets approved). Ultimately, liveness is a friction to be minimized, but not critical to system function.\n    uint256 public constant STRICT_WITHDRAWAL_LIVENESS = 3600;\n    // - Time for liquidation to be disputed: 60 minutes. Similar reasoning to withdrawal liveness.\n    // Lower liveness is more usable for liquidators. However, the parameter is a reflection of how\n    // long we expect it to take disputers to notice bad liquidations. Malicious liquidators would\n    // also need to attack the base chain for this long to prevent dispute transactions from processing.\n    uint256 public constant STRICT_LIQUIDATION_LIVENESS = 3600;\n\n    event CreatedExpiringMultiParty(address expiringMultiPartyAddress, address partyMemberAddress);\n\n    /**\n     * @notice Constructs the ExpiringMultiPartyCreator contract.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _collateralTokenWhitelist UMA protocol contract to track whitelisted collateral.\n     * @param _tokenFactoryAddress ERC20 token factory used to deploy synthetic token instances.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address _finderAddress,\n        address _collateralTokenWhitelist,\n        address _tokenFactoryAddress,\n        address _timerAddress\n    ) public ContractCreator(_finderAddress) Testable(_timerAddress) {\n        collateralTokenWhitelist = AddressWhitelist(_collateralTokenWhitelist);\n        tokenFactoryAddress = _tokenFactoryAddress;\n    }\n\n    /**\n     * @notice Creates an instance of expiring multi party and registers it within the registry.\n     * @dev caller is automatically registered as the first (and only) party member.\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\n     * @return address of the deployed ExpiringMultiParty contract\n     */\n    function createExpiringMultiParty(Params memory params) public returns (address) {\n        ExpiringMultiParty derivative = new ExpiringMultiParty(_convertParams(params));\n\n        address[] memory parties = new address[](1);\n        parties[0] = msg.sender;\n\n        _registerContract(parties, address(derivative));\n\n        emit CreatedExpiringMultiParty(address(derivative), msg.sender);\n\n        return address(derivative);\n    }\n\n    /****************************************\n     *          PRIVATE FUNCTIONS           *\n     ****************************************/\n\n    //  Returns if expiration timestamp is on hardcoded list.\n    function _isValidTimestamp(uint256 timestamp) private view returns (bool) {\n        for (uint256 i = 0; i \u003c VALID_EXPIRATION_TIMESTAMPS.length; i++) {\n            if (VALID_EXPIRATION_TIMESTAMPS[i] == timestamp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Converts createExpiringMultiParty params to ExpiringMultiParty constructor params.\n    function _convertParams(Params memory params)\n        private\n        view\n        returns (ExpiringMultiParty.ConstructorParams memory constructorParams)\n    {\n        // Known from creator deployment.\n        constructorParams.finderAddress = finderAddress;\n        constructorParams.tokenFactoryAddress = tokenFactoryAddress;\n\n        // Enforce configuration constrainments.\n        require(_isValidTimestamp(params.expirationTimestamp));\n        require(bytes(params.syntheticName).length != 0);\n        require(bytes(params.syntheticSymbol).length != 0);\n        constructorParams.withdrawalLiveness = STRICT_WITHDRAWAL_LIVENESS;\n        constructorParams.liquidationLiveness = STRICT_LIQUIDATION_LIVENESS;\n        require(collateralTokenWhitelist.isOnWhitelist(params.collateralAddress));\n\n        // Input from function call.\n        constructorParams.expirationTimestamp = params.expirationTimestamp;\n        constructorParams.collateralAddress = params.collateralAddress;\n        constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\n        constructorParams.syntheticName = params.syntheticName;\n        constructorParams.syntheticSymbol = params.syntheticSymbol;\n        constructorParams.collateralRequirement = params.collateralRequirement;\n        constructorParams.disputeBondPct = params.disputeBondPct;\n        constructorParams.sponsorDisputeRewardPct = params.sponsorDisputeRewardPct;\n        constructorParams.disputerDisputeRewardPct = params.disputerDisputeRewardPct;\n        constructorParams.minSponsorTokens = params.minSponsorTokens;\n        constructorParams.timerAddress = params.timerAddress;\n    }\n}\n"},"FeePayer.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./FixedPoint.sol\";\nimport \"./Testable.sol\";\nimport \"./StoreInterface.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./Constants.sol\";\n\n\n/**\n * @title FeePayer contract.\n * @notice Provides fee payment functionality for the ExpiringMultiParty contract.\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\n */\n\nabstract contract FeePayer is Testable {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeERC20 for IERC20;\n\n    /****************************************\n     *      FEE PAYER DATA STRUCTURES       *\n     ****************************************/\n\n    // The collateral currency used to back the positions in this contract.\n    IERC20 public collateralCurrency;\n\n    //  Finder contract used to look up addresses for UMA system contracts.\n    FinderInterface public finder;\n\n    // Tracks the last block time when the fees were paid.\n    uint256 public lastPaymentTime;\n\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\n    // For example:\n    // The cumulativeFeeMultiplier should start at 1.\n    // If a 1% fee is charged, the multiplier should update to .99.\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\n    event FinalFeesPaid(uint256 indexed amount);\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    // modifier that calls payFees().\n    modifier fees {\n        payFees();\n        _;\n    }\n\n    /**\n     * @notice Constructs the FeePayer contract. Called by child contracts.\n     * @param collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\n     * @param finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address collateralAddress,\n        address finderAddress,\n        address timerAddress\n    ) public Testable(timerAddress) {\n        collateralCurrency = IERC20(collateralAddress);\n        finder = FinderInterface(finderAddress);\n        lastPaymentTime = getCurrentTime();\n        cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\n    }\n\n    /****************************************\n     *        FEE PAYMENT FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Pays UMA DVM regular fees to the Store contract.\n     * @dev These must be paid periodically for the life of the contract. If the contract has not paid its\n     * regular fee in a week or mre then a late penalty is applied which is sent to the caller.\n     * @return totalPaid The amount of collateral that the contract paid (sum of the amount paid to the Store and the caller).\n     */\n    function payFees() public returns (FixedPoint.Unsigned memory totalPaid) {\n        StoreInterface store = _getStore();\n        uint256 time = getCurrentTime();\n        FixedPoint.Unsigned memory _pfc = pfc();\n\n        // Exit early if there is no pfc (thus, no fees to be paid).\n        if (_pfc.isEqual(0)) {\n            return totalPaid;\n        }\n\n        (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty) = store.computeRegularFee(\n            lastPaymentTime,\n            time,\n            _pfc\n        );\n        lastPaymentTime = time;\n\n        if (regularFee.isGreaterThan(0)) {\n            collateralCurrency.safeIncreaseAllowance(address(store), regularFee.rawValue);\n            store.payOracleFeesErc20(address(collateralCurrency), regularFee);\n        }\n\n        if (latePenalty.isGreaterThan(0)) {\n            collateralCurrency.safeTransfer(msg.sender, latePenalty.rawValue);\n        }\n\n        emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\n\n        totalPaid = regularFee.add(latePenalty);\n        FixedPoint.Unsigned memory effectiveFee = totalPaid.divCeil(_pfc);\n        cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee));\n    }\n\n    /**\n     * @notice Pays UMA DVM final fees to the Store contract.\n     * @dev This is a flat fee charged for each price request.\n     * @param payer address of who is paying the fees.\n     * @param amount the amount of collateral to send as the final fee.\n     */\n    function _payFinalFees(address payer, FixedPoint.Unsigned memory amount) internal {\n        if (amount.isEqual(0)) {\n            return;\n        }\n\n        if (payer != address(this)) {\n            // If the payer is not the contract pull the collateral from the payer.\n            collateralCurrency.safeTransferFrom(payer, address(this), amount.rawValue);\n        } else {\n            // If the payer is the contract, adjust the cumulativeFeeMultiplier to compensate.\n            FixedPoint.Unsigned memory _pfc = pfc();\n\n            // The final fee must be \u003c pfc or the fee will be larger than 100%.\n            require(_pfc.isGreaterThan(amount));\n\n            // Add the adjustment.\n            FixedPoint.Unsigned memory effectiveFee = amount.divCeil(pfc());\n            cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee));\n        }\n\n        emit FinalFeesPaid(amount.rawValue);\n\n        StoreInterface store = _getStore();\n        collateralCurrency.safeIncreaseAllowance(address(store), amount.rawValue);\n        store.payOracleFeesErc20(address(collateralCurrency), amount);\n    }\n\n    /**\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\n     * @dev Derived contracts are expected to implement this function so the payFees()\n     * method can correctly compute the owed regular fees.\n     */\n    function pfc() public virtual view returns (FixedPoint.Unsigned memory);\n\n    /****************************************\n     *         INTERNAL FUNCTIONS           *\n     ****************************************/\n\n    function _getStore() internal view returns (StoreInterface) {\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\n    }\n\n    function _computeFinalFees() internal returns (FixedPoint.Unsigned memory finalFees) {\n        StoreInterface store = _getStore();\n        return store.computeFinalFee(address(collateralCurrency));\n    }\n\n    // Returns the user\u0027s collateral minus any fees that have been subtracted since it was originally\n    // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\n    // value should be larger than the returned value.\n    function _getCollateral(FixedPoint.Unsigned memory rawCollateral)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory collateral)\n    {\n        return rawCollateral.mul(cumulativeFeeMultiplier);\n    }\n\n    // Converts a user-readable collateral value into a raw value that accounts for already-assessed\n    // fees. If any fees have been taken from this contract in the past, then the raw value will be\n    // larger than the user-readable value.\n    function _convertCollateral(FixedPoint.Unsigned memory collateral)\n        internal\n        view\n        returns (FixedPoint.Unsigned memory rawCollateral)\n    {\n        return collateral.div(cumulativeFeeMultiplier);\n    }\n\n    // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\n    // by dividing it by cumulativeFeeMutliplier. There is potential for this quotient to be floored, therefore rawCollateral\n    // is decreased by less than expected. Because this method is usually called in conjunction with an actual removal of collateral\n    // from this contract, return the fee-adjusted amount that the rawCollateral is decreased by so that the caller can\n    // minimize error between collateral removed and rawCollateral debited.\n    function _removeCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToRemove)\n        internal\n        returns (FixedPoint.Unsigned memory removedCollateral)\n    {\n        FixedPoint.Unsigned memory initialBalance = _getCollateral(rawCollateral);\n        FixedPoint.Unsigned memory adjustedCollateral = _convertCollateral(collateralToRemove);\n        rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\n        removedCollateral = initialBalance.sub(_getCollateral(rawCollateral));\n    }\n\n    // Increase rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\n    // by dividing it by cumulativeFeeMutliplier. There is potential for this quotient to be floored, therefore rawCollateral\n    // is increased by less than expected. Because this method is usually called in conjunction with an actual addition of collateral\n    // to this contract, return the fee-adjusted amount that the rawCollateral is increased by so that the caller can\n    // minimize error between collateral removed and rawCollateral credited.\n    // @dev: This return value exists only for the sake of symmetry with `_removeCollateral`. We don\u0027t actually use it because\n    // we are OK if more collateral is stored in the contract than is represented by `totalPositionCollateral`.\n    function _addCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToAdd)\n        internal\n        returns (FixedPoint.Unsigned memory addedCollateral)\n    {\n        FixedPoint.Unsigned memory initialBalance = _getCollateral(rawCollateral);\n        FixedPoint.Unsigned memory adjustedCollateral = _convertCollateral(collateralToAdd);\n        rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\n        addedCollateral = _getCollateral(rawCollateral).sub(initialBalance);\n    }\n}\n"},"FinancialContractsAdmin.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./AdministrateeInterface.sol\";\nimport \"./Ownable.sol\";\n\n\n/**\n * @title Admin for financial contracts in the UMA system.\n * @dev Allows appropriately permissioned admin roles to interact with financial contracts.\n */\ncontract FinancialContractsAdmin is Ownable {\n    /**\n     * @notice Calls emergency shutdown on the provided financial contract.\n     * @param financialContract address of the FinancialContract to be shut down.\n     */\n    function callEmergencyShutdown(address financialContract) external onlyOwner {\n        AdministrateeInterface administratee = AdministrateeInterface(financialContract);\n        administratee.emergencyShutdown();\n    }\n\n    /**\n     * @notice Calls remargin on the provided financial contract.\n     * @param financialContract address of the FinancialContract to be remargined.\n     */\n    function callRemargin(address financialContract) external onlyOwner {\n        AdministrateeInterface administratee = AdministrateeInterface(financialContract);\n        administratee.remargin();\n    }\n}\n"},"Finder.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Ownable.sol\";\nimport \"./FinderInterface.sol\";\n\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples of interfaces with implementations that Finder locates are the Oracle and Store interfaces.\n */\ncontract Finder is FinderInterface, Ownable {\n    mapping(bytes32 =\u003e address) public interfacesImplemented;\n\n    event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);\n\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 of the interface name that is either changed or registered.\n     * @param implementationAddress address of the implementation contract.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)\n        external\n        override\n        onlyOwner\n    {\n        interfacesImplemented[interfaceName] = implementationAddress;\n\n        emit InterfaceImplementationChanged(interfaceName, implementationAddress);\n    }\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the defined interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external override view returns (address) {\n        address implementationAddress = interfacesImplemented[interfaceName];\n        require(implementationAddress != address(0x0), \"Implementation not found\");\n        return implementationAddress;\n    }\n}\n"},"FinderInterface.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples are the Oracle or Store interfaces.\n */\ninterface FinderInterface {\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n     * @param implementationAddress address of the deployed contract that implements the interface.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the deployed contract that implements the interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\n}\n"},"FixedPoint.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\n\n\n/**\n * @title Library for fixed point arithmetic on uints\n */\nlibrary FixedPoint {\n    using SafeMath for uint256;\n\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\n    // Can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\n\n    struct Unsigned {\n        uint256 rawValue;\n    }\n\n    /**\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\n     * @param a uint to convert into a FixedPoint.\n     * @return the converted FixedPoint.\n     */\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue == fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue == b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a \u003e b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue \u003e b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a \u003e b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue \u003e fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a \u003e b`, or False.\n     */\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue \u003e b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a \u003e= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue \u003e= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a \u003e= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue \u003e= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a \u003e= b`, or False.\n     */\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue \u003e= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a \u003c b`, or False.\n     */\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue \u003c b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a \u003c b`, or False.\n     */\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue \u003c fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a \u003c b`, or False.\n     */\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue \u003c b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a \u003c= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue \u003c= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a \u003c= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue \u003c= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a \u003c= b`, or False.\n     */\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue \u003c= b.rawValue;\n    }\n\n    /**\n     * @notice The minimum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the minimum of `a` and `b`.\n     */\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue \u003c b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice The maximum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the maximum of `a` and `b`.\n     */\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue \u003e b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice Adds two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.add(b.rawValue));\n    }\n\n    /**\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return add(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.sub(b.rawValue));\n    }\n\n    /**\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return sub(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return sub(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\n        // stored internally as a uint256 ~10^59.\n        // 2. Results that can\u0027t be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\n        // would round to 3, but this computation produces the result 2.\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s and \"ceil\u0027s\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\n        if (mod != 0) {\n            return Unsigned(mulFloor.add(1));\n        } else {\n            return Unsigned(mulFloor);\n        }\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \"ceil\u0027s\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\n        // 10^41 is stored internally as a uint256 10^59.\n        // 2. Results that can\u0027t be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.div(b));\n    }\n\n    /**\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a uint256 numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return div(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned` and \"ceil\u0027s\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\n        uint256 divFloor = aScaled.div(b.rawValue);\n        uint256 mod = aScaled.mod(b.rawValue);\n        if (mod != 0) {\n            return Unsigned(divFloor.add(1));\n        } else {\n            return Unsigned(divFloor);\n        }\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \"ceil\u0027s\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Because it is possible that a quotient gets truncated, we can\u0027t just call \"Unsigned(a.rawValue.div(b))\"\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\n        // This creates the possibility of overflow if b is very large.\n        return divCeil(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n     * @dev This will \"floor\" the result.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return output is `a` to the power of `b`.\n     */\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\n        output = fromUnscaledUint(1);\n        for (uint256 i = 0; i \u003c b; i = i.add(1)) {\n            output = mul(output, a);\n        }\n    }\n}\n"},"FixedPointTest.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./FixedPoint.sol\";\n\n\n// Wraps the FixedPoint library for testing purposes.\ncontract FixedPointTest {\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for uint256;\n    using SafeMath for uint256;\n\n    function wrapFromUnscaledUint(uint256 a) external pure returns (uint256) {\n        return FixedPoint.fromUnscaledUint(a).rawValue;\n    }\n\n    function wrapIsEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isEqual(b);\n    }\n\n    function wrapIsGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsGreaterThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThan(b);\n    }\n\n    function wrapMixedIsGreaterThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isGreaterThanOrEqual(b);\n    }\n\n    function wrapMixedIsGreaterThanOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isGreaterThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsGreaterThanOrEqualOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isGreaterThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapIsLessThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThan(b);\n    }\n\n    function wrapMixedIsLessThanOrEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return FixedPoint.Unsigned(a).isLessThanOrEqual(b);\n    }\n\n    function wrapMixedIsLessThanOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isLessThan(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMixedIsLessThanOrEqualOpposite(uint256 a, uint256 b) external pure returns (bool) {\n        return a.isLessThanOrEqual(FixedPoint.Unsigned(b));\n    }\n\n    function wrapMin(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).min(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMax(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).max(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapAdd(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).add(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedAdd(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).add(b).rawValue;\n    }\n\n    function wrapSub(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).sub(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSub(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).sub(b).rawValue;\n    }\n\n    // The second uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedSubOpposite(uint256 a, uint256 b) external pure returns (uint256) {\n        return a.sub(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMul(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mul(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapMulCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mulCeil(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedMul(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mul(b).rawValue;\n    }\n\n    function wrapMixedMulCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).mulCeil(b).rawValue;\n    }\n\n    function wrapDiv(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).div(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    function wrapDivCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).divCeil(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDiv(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).div(b).rawValue;\n    }\n\n    function wrapMixedDivCeil(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).divCeil(b).rawValue;\n    }\n\n    // The second uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapMixedDivOpposite(uint256 a, uint256 b) external pure returns (uint256) {\n        return a.div(FixedPoint.Unsigned(b)).rawValue;\n    }\n\n    // The first uint256 is interpreted with a scaling factor and is converted to an `Unsigned` directly.\n    function wrapPow(uint256 a, uint256 b) external pure returns (uint256) {\n        return FixedPoint.Unsigned(a).pow(b).rawValue;\n    }\n}\n"},"Governor.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MultiRole.sol\";\nimport \"./FixedPoint.sol\";\nimport \"./Testable.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./OracleInterface.sol\";\nimport \"./Constants.sol\";\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n\n/**\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\n */\ncontract Governor is MultiRole, Testable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /****************************************\n     *     INTERNAL VARIABLES AND STORAGE   *\n     ****************************************/\n\n    enum Roles {\n        Owner, // Can set the proposer.\n        Proposer // Address that can make proposals.\n    }\n\n    struct Transaction {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    struct Proposal {\n        Transaction[] transactions;\n        uint256 requestTime;\n    }\n\n    FinderInterface private finder;\n    Proposal[] public proposals;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    // Emitted when a new proposal is created.\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\n\n    // Emitted when an existing proposal is executed.\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\n\n    /**\n     * @notice Construct the Governor contract.\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        address _finderAddress,\n        uint256 _startingId,\n        address _timerAddress\n    ) public Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\n\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\n        // other storage slots in the contract.\n        uint256 maxStartingId = 10**18;\n        require(_startingId \u003c= maxStartingId, \"Cannot set startingId larger than 10^18\");\n\n        // This just sets the initial length of the array to the startingId since modifying length directly has been\n        // disallowed in solidity 0.6.\n        assembly {\n            sstore(proposals_slot, _startingId)\n        }\n    }\n\n    /****************************************\n     *          PROPOSAL ACTIONS            *\n     ****************************************/\n\n    /**\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\n     * @param transactions list of transactions that are being proposed.\n     * @dev You can create the data portion of each transaction by doing the following:\n     * ```\n     * const truffleContractInstance = await TruffleContract.deployed()\n     * const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI()\n     * ```\n     * Note: this method must be public because of a solidity limitation that\n     * disallows structs arrays to be passed to external functions.\n     */\n    function propose(Transaction[] memory transactions) public onlyRoleHolder(uint256(Roles.Proposer)) {\n        uint256 id = proposals.length;\n        uint256 time = getCurrentTime();\n\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\n        // structs in storage to an an array of structs in memory is currently not implemented in solidity :/.\n\n        // Add a zero-initialized element to the proposals array.\n        proposals.push();\n\n        // Initialize the new proposal.\n        Proposal storage proposal = proposals[id];\n        proposal.requestTime = time;\n\n        // Initialize the transaction array.\n        for (uint256 i = 0; i \u003c transactions.length; i++) {\n            require(transactions[i].to != address(0), \"The `to` address cannot be 0x0\");\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\n            if (transactions[i].data.length \u003e 0) {\n                require(transactions[i].to.isContract(), \"EOA can\u0027t accept tx with data\");\n            }\n            proposal.transactions.push(transactions[i]);\n        }\n\n        bytes32 identifier = _constructIdentifier(id);\n\n        // Request a vote on this proposal in the DVM.\n        OracleInterface oracle = _getOracle();\n        IdentifierWhitelistInterface supportedIdentifiers = _getIdentifierWhitelist();\n        supportedIdentifiers.addSupportedIdentifier(identifier);\n\n        oracle.requestPrice(identifier, time);\n        supportedIdentifiers.removeSupportedIdentifier(identifier);\n\n        emit NewProposal(id, transactions);\n    }\n\n    /**\n     * @notice Executes a proposed governance action that has been approved by voters.\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\n     * @param id unique id for the executed proposal.\n     * @param transactionIndex unique transaction index for the executed proposal.\n     */\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable {\n        Proposal storage proposal = proposals[id];\n        int256 price = _getOracle().getPrice(_constructIdentifier(id), proposal.requestTime);\n\n        Transaction memory transaction = proposal.transactions[transactionIndex];\n\n        require(\n            transactionIndex == 0 || proposal.transactions[transactionIndex.sub(1)].to == address(0),\n            \"Previous tx not yet executed\"\n        );\n        require(transaction.to != address(0), \"Tx already executed\");\n        require(price != 0, \"Proposal was rejected\");\n        require(msg.value == transaction.value, \"Must send exact amount of ETH\");\n\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\n        delete proposal.transactions[transactionIndex];\n\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \"Tx execution failed\");\n\n        emit ProposalExecuted(id, transactionIndex);\n    }\n\n    /****************************************\n     *       GOVERNOR STATE GETTERS         *\n     ****************************************/\n\n    /**\n     * @notice Gets the total number of proposals (includes executed and non-executed).\n     * @return uint256 representing the current number of proposals.\n     */\n    function numProposals() external view returns (uint256) {\n        return proposals.length;\n    }\n\n    /**\n     * @notice Gets the proposal data for a particular id.\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time.\n     * @param id uniquely identify the identity of the proposal.\n     * @return proposal struct containing transactions[] and requestTime.\n     */\n    function getProposal(uint256 id) external view returns (Proposal memory) {\n        return proposals[id];\n    }\n\n    /****************************************\n     *      PRIVATE GETTERS AND FUNCTIONS   *\n     ****************************************/\n\n    function _executeCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) private returns (bool) {\n        // Mostly copied from:\n        // solhint-disable-next-line max-line-length\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\n        // solhint-disable-next-line no-inline-assembly\n\n        bool success;\n        assembly {\n            let inputData := add(data, 0x20)\n            let inputDataSize := mload(data)\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\n        }\n        return success;\n    }\n\n    function _getOracle() private view returns (OracleInterface) {\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    // Returns a UTF-8 identifier representing a particular admin proposal.\n    // The identifier is of the form \"Admin n\", where n is the proposal id provided.\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\n        bytes32 bytesId = _uintToUtf8(id);\n        return _addPrefix(bytesId, \"Admin \", 6);\n    }\n\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\n        bytes32 ret;\n        if (v == 0) {\n            // Handle 0 case explicitly.\n            ret = \"0\";\n        } else {\n            // Constants.\n            uint256 bitsPerByte = 8;\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases \u003e 10.\n            uint256 utf8NumberOffset = 48;\n            while (v \u003e 0) {\n                // Downshift the entire bytes32 to allow the new digit to be added at the \"front\" of the bytes32, which\n                // translates to the beginning of the UTF-8 representation.\n                ret = ret \u003e\u003e bitsPerByte;\n\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\n                uint256 leastSignificantDigit = v % base;\n\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\n\n                // The top bit of ret has already been cleared to make room for the new digit.\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\n                ret |= utf8Digit \u003c\u003c (31 * bitsPerByte);\n\n                // Divide v by the base to remove the digit that was just added.\n                v /= base;\n            }\n        }\n        return ret;\n    }\n\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\n    // `input` is the UTF-8 that should have the prefix prepended.\n    // `prefix` is the UTF-8 that should be prepended onto input.\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\n    // Notes:\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\n    //    by the bytes32 output.\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\n    function _addPrefix(\n        bytes32 input,\n        bytes32 prefix,\n        uint256 prefixLength\n    ) internal pure returns (bytes32) {\n        // Downshift `input` to open space at the \"front\" of the bytes32\n        bytes32 shiftedInput = input \u003e\u003e (prefixLength * 8);\n        return shiftedInput | prefix;\n    }\n}\n"},"GovernorTest.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./Governor.sol\";\n\n\n// GovernorTest exposes internal methods in the Governor for testing.\ncontract GovernorTest is Governor {\n    constructor(address _timerAddress) public Governor(address(0), 0, _timerAddress) {}\n\n    function addPrefix(\n        bytes32 input,\n        bytes32 prefix,\n        uint256 prefixLength\n    ) external pure returns (bytes32) {\n        return _addPrefix(input, prefix, prefixLength);\n    }\n\n    function uintToUtf8(uint256 v) external pure returns (bytes32 ret) {\n        return _uintToUtf8(v);\n    }\n\n    function constructIdentifier(uint256 id) external pure returns (bytes32 identifier) {\n        return _constructIdentifier(id);\n    }\n}\n"},"GSNRecipient.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IRelayRecipient.sol\";\nimport \"./IRelayHub.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\n * and enables GSN support on all contracts in the inheritance tree.\n *\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\n * provided by derived contracts. See the\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\n * information on how to use the pre-built {GSNRecipientSignature} and\n * {GSNRecipientERC20Fee}, or how to write your own.\n */\nabstract contract GSNRecipient is IRelayRecipient, Context {\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\n    address private _relayHub = 0xD216153c06E857cD7f72665E0aF1d7D82172F494;\n\n    uint256 constant private _RELAYED_CALL_ACCEPTED = 0;\n    uint256 constant private _RELAYED_CALL_REJECTED = 11;\n\n    // How much gas is forwarded to postRelayedCall\n    uint256 constant internal _POST_RELAYED_CALL_MAX_GAS = 100000;\n\n    /**\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\n     */\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\n\n    /**\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\n     */\n    function getHubAddr() public view override returns (address) {\n        return _relayHub;\n    }\n\n    /**\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there\u0027s no reason to not\n     * use the default instance.\n     *\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\n     */\n    function _upgradeRelayHub(address newRelayHub) internal virtual {\n        address currentRelayHub = _relayHub;\n        require(newRelayHub != address(0), \"GSNRecipient: new RelayHub is the zero address\");\n        require(newRelayHub != currentRelayHub, \"GSNRecipient: new RelayHub is the current one\");\n\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\n\n        _relayHub = newRelayHub;\n    }\n\n    /**\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\n     */\n    // This function is view for future-proofing, it may require reading from\n    // storage in the future.\n    function relayHubVersion() public view returns (string memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return \"1.0.0\";\n    }\n\n    /**\n     * @dev Withdraws the recipient\u0027s deposits in `RelayHub`.\n     *\n     * Derived contracts should expose this in an external interface with proper access control.\n     */\n    function _withdrawDeposits(uint256 amount, address payable payee) internal virtual {\n        IRelayHub(_relayHub).withdraw(amount, payee);\n    }\n\n    // Overrides for Context\u0027s functions: when called from RelayHub, sender and\n    // data require some pre-processing: the actual sender is stored at the end\n    // of the call data, which in turns means it needs to be removed from it\n    // when handling said data.\n\n    /**\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\n     */\n    function _msgSender() internal view virtual override returns (address payable) {\n        if (msg.sender != _relayHub) {\n            return msg.sender;\n        } else {\n            return _getRelayedCallSender();\n        }\n    }\n\n    /**\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\n     */\n    function _msgData() internal view virtual override returns (bytes memory) {\n        if (msg.sender != _relayHub) {\n            return msg.data;\n        } else {\n            return _getRelayedCallData();\n        }\n    }\n\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\n    // internal hook.\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function preRelayedCall(bytes memory context) public virtual override returns (bytes32) {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        return _preRelayedCall(context);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call preprocessing they may wish to do.\n     *\n     */\n    function _preRelayedCall(bytes memory context) internal virtual returns (bytes32);\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) public virtual override {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        _postRelayedCall(context, success, actualCharge, preRetVal);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call postprocessing they may wish to do.\n     *\n     */\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal virtual;\n\n    /**\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\n     * will be charged a fee by RelayHub\n     */\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\n        return _approveRelayedCall(\"\");\n    }\n\n    /**\n     * @dev See `GSNRecipient._approveRelayedCall`.\n     *\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\n     */\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_ACCEPTED, context);\n    }\n\n    /**\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\n     */\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_REJECTED + errorCode, \"\");\n    }\n\n    /*\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer\u0027s\n     * `serviceFee`.\n     */\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\n        // charged for 1.4 times the spent amount.\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\n    }\n\n    function _getRelayedCallSender() private pure returns (address payable result) {\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\n        // bytes. This can always be done due to the 32-byte prefix.\n\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\n        // easiest/most-efficient way to perform this operation.\n\n        // These fields are not accessible from assembly\n        bytes memory array = msg.data;\n        uint256 index = msg.data.length;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function _getRelayedCallData() private pure returns (bytes memory) {\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\n        // we must strip the last 20 bytes (length of an address type) from it.\n\n        uint256 actualDataLength = msg.data.length - 20;\n        bytes memory actualData = new bytes(actualDataLength);\n\n        for (uint256 i = 0; i \u003c actualDataLength; ++i) {\n            actualData[i] = msg.data[i];\n        }\n\n        return actualData;\n    }\n}\n"},"GSNRecipientERC20Fee.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./GSNRecipient.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that charges transaction fees in a special purpose ERC20\n * token, which we refer to as the gas payment token. The amount charged is exactly the amount of Ether charged to the\n * recipient. This means that the token is essentially pegged to the value of Ether.\n *\n * The distribution strategy of the gas payment token to users is not defined by this contract. It\u0027s a mintable token\n * whose only minter is the recipient, so the strategy must be implemented in a derived contract, making use of the\n * internal {_mint} function.\n */\ncontract GSNRecipientERC20Fee is GSNRecipient {\n    using SafeERC20 for __unstable__ERC20Owned;\n    using SafeMath for uint256;\n\n    enum GSNRecipientERC20FeeErrorCodes {\n        INSUFFICIENT_BALANCE\n    }\n\n    __unstable__ERC20Owned private _token;\n\n    /**\n     * @dev The arguments to the constructor are the details that the gas payment token will have: `name` and `symbol`. `decimals` is hard-coded to 18.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _token = new __unstable__ERC20Owned(name, symbol);\n    }\n\n    /**\n     * @dev Returns the gas payment token.\n     */\n    function token() public view returns (IERC20) {\n        return IERC20(_token);\n    }\n\n    /**\n     * @dev Internal function that mints the gas payment token. Derived contracts should expose this function in their public API, with proper access control mechanisms.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        _token.mint(account, amount);\n    }\n\n    /**\n     * @dev Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.\n     */\n    function acceptRelayedCall(\n        address,\n        address from,\n        bytes memory,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256,\n        uint256,\n        bytes memory,\n        uint256 maxPossibleCharge\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256, bytes memory)\n    {\n        if (_token.balanceOf(from) \u003c maxPossibleCharge) {\n            return _rejectRelayedCall(uint256(GSNRecipientERC20FeeErrorCodes.INSUFFICIENT_BALANCE));\n        }\n\n        return _approveRelayedCall(abi.encode(from, maxPossibleCharge, transactionFee, gasPrice));\n    }\n\n    /**\n     * @dev Implements the precharge to the user. The maximum possible charge (depending on gas limit, gas price, and\n     * fee) will be deducted from the user balance of gas payment token. Note that this is an overestimation of the\n     * actual charge, necessary because we cannot predict how much gas the execution will actually need. The remainder\n     * is returned to the user in {_postRelayedCall}.\n     */\n    function _preRelayedCall(bytes memory context) internal virtual override returns (bytes32) {\n        (address from, uint256 maxPossibleCharge) = abi.decode(context, (address, uint256));\n\n        // The maximum token charge is pre-charged from the user\n        _token.safeTransferFrom(from, address(this), maxPossibleCharge);\n    }\n\n    /**\n     * @dev Returns to the user the extra amount that was previously charged, once the actual execution cost is known.\n     */\n    function _postRelayedCall(bytes memory context, bool, uint256 actualCharge, bytes32) internal virtual override {\n        (address from, uint256 maxPossibleCharge, uint256 transactionFee, uint256 gasPrice) =\n            abi.decode(context, (address, uint256, uint256, uint256));\n\n        // actualCharge is an _estimated_ charge, which assumes postRelayedCall will use all available gas.\n        // This implementation\u0027s gas cost can be roughly estimated as 10k gas, for the two SSTORE operations in an\n        // ERC20 transfer.\n        uint256 overestimation = _computeCharge(_POST_RELAYED_CALL_MAX_GAS.sub(10000), gasPrice, transactionFee);\n        actualCharge = actualCharge.sub(overestimation);\n\n        // After the relayed call has been executed and the actual charge estimated, the excess pre-charge is returned\n        _token.safeTransfer(from, maxPossibleCharge.sub(actualCharge));\n    }\n}\n\n/**\n * @title __unstable__ERC20Owned\n * @dev An ERC20 token owned by another contract, which has minting permissions and can use transferFrom to receive\n * anyone\u0027s tokens. This contract is an internal helper for GSNRecipientERC20Fee, and should not be used\n * outside of this context.\n */\n// solhint-disable-next-line contract-name-camelcase\ncontract __unstable__ERC20Owned is ERC20, Ownable {\n    uint256 private constant _UINT256_MAX = 2**256 - 1;\n\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) { }\n\n    // The owner (GSNRecipientERC20Fee) can mint tokens\n    function mint(address account, uint256 amount) public onlyOwner {\n        _mint(account, amount);\n    }\n\n    // The owner has \u0027infinite\u0027 allowance for all token holders\n    function allowance(address tokenOwner, address spender) public view override returns (uint256) {\n        if (spender == owner()) {\n            return _UINT256_MAX;\n        } else {\n            return super.allowance(tokenOwner, spender);\n        }\n    }\n\n    // Allowance for the owner cannot be changed (it is always \u0027infinite\u0027)\n    function _approve(address tokenOwner, address spender, uint256 value) internal override {\n        if (spender == owner()) {\n            return;\n        } else {\n            super._approve(tokenOwner, spender, value);\n        }\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        if (recipient == owner()) {\n            _transfer(sender, recipient, amount);\n            return true;\n        } else {\n            return super.transferFrom(sender, recipient, amount);\n        }\n    }\n}\n"},"GSNRecipientSignature.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./GSNRecipient.sol\";\nimport \"./ECDSA.sol\";\n\n/**\n * @dev A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that allows relayed transactions through when they are\n * accompanied by the signature of a trusted signer. The intent is for this signature to be generated by a server that\n * performs validations off-chain. Note that nothing is charged to the user in this scheme. Thus, the server should make\n * sure to account for this in their economic and threat model.\n */\ncontract GSNRecipientSignature is GSNRecipient {\n    using ECDSA for bytes32;\n\n    address private _trustedSigner;\n\n    enum GSNRecipientSignatureErrorCodes {\n        INVALID_SIGNER\n    }\n\n    /**\n     * @dev Sets the trusted signer that is going to be producing signatures to approve relayed calls.\n     */\n    constructor(address trustedSigner) public {\n        require(trustedSigner != address(0), \"GSNRecipientSignature: trusted signer is the zero address\");\n        _trustedSigner = trustedSigner;\n    }\n\n    /**\n     * @dev Ensures that only transactions with a trusted signature can be relayed through the GSN.\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes memory encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes memory approvalData,\n        uint256\n    )\n        public\n        view\n        virtual\n        override\n        returns (uint256, bytes memory)\n    {\n        bytes memory blob = abi.encodePacked(\n            relay,\n            from,\n            encodedFunction,\n            transactionFee,\n            gasPrice,\n            gasLimit,\n            nonce, // Prevents replays on RelayHub\n            getHubAddr(), // Prevents replays in multiple RelayHubs\n            address(this) // Prevents replays in multiple recipients\n        );\n        if (keccak256(blob).toEthSignedMessageHash().recover(approvalData) == _trustedSigner) {\n            return _approveRelayedCall();\n        } else {\n            return _rejectRelayedCall(uint256(GSNRecipientSignatureErrorCodes.INVALID_SIGNER));\n        }\n    }\n\n    function _preRelayedCall(bytes memory) internal virtual override returns (bytes32) { }\n\n    function _postRelayedCall(bytes memory, bool, uint256, bytes32) internal virtual override { }\n}\n"},"IdentifierWhitelist.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./Ownable.sol\";\n\n\n/**\n * @title Stores a whitelist of supported identifiers that the oracle can provide prices for.\n */\ncontract IdentifierWhitelist is IdentifierWhitelistInterface, Ownable {\n    /****************************************\n     *     INTERNAL VARIABLES AND STORAGE   *\n     ****************************************/\n\n    mapping(bytes32 =\u003e bool) private supportedIdentifiers;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event SupportedIdentifierAdded(bytes32 indexed identifier);\n    event SupportedIdentifierRemoved(bytes32 indexed identifier);\n\n    /****************************************\n     *    ADMIN STATE MODIFYING FUNCTIONS   *\n     ****************************************/\n\n    /**\n     * @notice Adds the provided identifier as a supported identifier.\n     * @dev Price requests using this identifier will succeed after this call.\n     * @param identifier unique UTF-8 representation for the feed being added. Eg: BTC/USD.\n     */\n    function addSupportedIdentifier(bytes32 identifier) external override onlyOwner {\n        if (!supportedIdentifiers[identifier]) {\n            supportedIdentifiers[identifier] = true;\n            emit SupportedIdentifierAdded(identifier);\n        }\n    }\n\n    /**\n     * @notice Removes the identifier from the whitelist.\n     * @dev Price requests using this identifier will no longer succeed after this call.\n     * @param identifier unique UTF-8 representation for the feed being removed. Eg: BTC/USD.\n     */\n    function removeSupportedIdentifier(bytes32 identifier) external override onlyOwner {\n        if (supportedIdentifiers[identifier]) {\n            supportedIdentifiers[identifier] = false;\n            emit SupportedIdentifierRemoved(identifier);\n        }\n    }\n\n    /****************************************\n     *     WHITELIST GETTERS FUNCTIONS      *\n     ****************************************/\n\n    /**\n     * @notice Checks whether an identifier is on the whitelist.\n     * @param identifier unique UTF-8 representation for the feed being queried. Eg: BTC/USD.\n     * @return bool if the identifier is supported (or not).\n     */\n    function isIdentifierSupported(bytes32 identifier) external override view returns (bool) {\n        return supportedIdentifiers[identifier];\n    }\n}\n"},"IdentifierWhitelistInterface.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\n */\ninterface IdentifierWhitelistInterface {\n    /**\n     * @notice Adds the provided identifier as a supported identifier.\n     * @dev Price requests using this identifier will succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function addSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Removes the identifier from the whitelist.\n     * @dev Price requests using this identifier will no longer succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function removeSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Checks whether an identifier is on the whitelist.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     * @return bool if the identifier is supported (or not).\n     */\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\n}\n"},"IERC165.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC1820Implementer.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"},"IERC1820Registry.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``\u0027s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller\u0027s address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller\u0027s address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC721.sol":{"content":"pragma solidity ^0.6.2;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"},"IERC721Enumerable.sol":{"content":"pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    function totalSupply() external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"IERC721Metadata.sol":{"content":"pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\nabstract contract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public virtual returns (bytes4);\n}\n"},"IERC777.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller\u0027s account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account\u0027s operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"},"IERC777Recipient.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract\u0027s state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"},"IERC777Sender.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder\u0027s\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract\u0027s state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"},"IRelayHub.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\n * directly.\n *\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\n * how to deploy an instance of `RelayHub` on your local test network.\n */\ninterface IRelayHub {\n    // Relay management\n\n    /**\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\n     * cannot be its own owner.\n     *\n     * All Ether in this function call will be added to the relay\u0027s stake.\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\n     *\n     * Emits a {Staked} event.\n     */\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\n\n    /**\n     * @dev Emitted when a relay\u0027s stake or unstakeDelay are increased\n     */\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\n\n    /**\n     * @dev Registers the caller as a relay.\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\n     *\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\n     * `transactionFee` is not enforced by {relayCall}.\n     *\n     * Emits a {RelayAdded} event.\n     */\n    function registerRelay(uint256 transactionFee, string calldata url) external;\n\n    /**\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\n     * {RelayRemoved} events) lets a client discover the list of available relays.\n     */\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\n\n    /**\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\n     *\n     * Can only be called by the owner of the relay. After the relay\u0027s `unstakeDelay` has elapsed, {unstake} will be\n     * callable.\n     *\n     * Emits a {RelayRemoved} event.\n     */\n    function removeRelayByOwner(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\n     */\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\n\n    /** Deletes the relay from the system, and gives back its stake to the owner.\n     *\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\n     *\n     * Emits an {Unstaked} event.\n     */\n    function unstake(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\n     */\n    event Unstaked(address indexed relay, uint256 stake);\n\n    // States a relay can be in\n    enum RelayState {\n        Unknown, // The relay is unknown to the system: it has never been staked for\n        Staked, // The relay has been staked for, but it is not yet active\n        Registered, // The relay has registered itself, and is active (can relay calls)\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\n    }\n\n    /**\n     * @dev Returns a relay\u0027s status. Note that relays can be deleted when unstaked or penalized, causing this function\n     * to return an empty entry.\n     */\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\n\n    // Balance management\n\n    /**\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\n     *\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\n     *\n     * Emits a {Deposited} event.\n     */\n    function depositFor(address target) external payable;\n\n    /**\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\n     */\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\n\n    /**\n     * @dev Returns an account\u0027s deposits. These can be either a contracts\u0027s funds, or a relay owner\u0027s revenue.\n     */\n    function balanceOf(address target) external view returns (uint256);\n\n    /**\n     * Withdraws from an account\u0027s balance, sending it back to it. Relay owners call this to retrieve their revenue, and\n     * contracts can use it to reduce their funding.\n     *\n     * Emits a {Withdrawn} event.\n     */\n    function withdraw(uint256 amount, address payable dest) external;\n\n    /**\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\n     */\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\n\n    // Relaying\n\n    /**\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\n     * Multiple things must be true for this to happen:\n     *  - all arguments must be signed for by the sender (`from`)\n     *  - the sender\u0027s nonce must be the current one\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\n     *\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\n     * code if it returns one in {acceptRelayedCall}.\n     */\n    function canRelay(\n        address relay,\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external view returns (uint256 status, bytes memory recipientContext);\n\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\n    enum PreconditionCheck {\n        OK,                         // All checks passed, the call can be relayed\n        WrongSignature,             // The transaction to relay is not signed by requested sender\n        WrongNonce,                 // The provided nonce has already been used by the sender\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\n    }\n\n    /**\n     * @dev Relays a transaction.\n     *\n     * For this to succeed, multiple conditions must be met:\n     *  - {canRelay} must `return PreconditionCheck.OK`\n     *  - the sender must be a registered relay\n     *  - the transaction\u0027s gas price must be larger or equal to the one that was requested by the sender\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\n     * recipient) use all gas available to them\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\n     * spent)\n     *\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\n     * function and {postRelayedCall} will be called in that order.\n     *\n     * Parameters:\n     *  - `from`: the client originating the request\n     *  - `to`: the target {IRelayRecipient} contract\n     *  - `encodedFunction`: the function call to relay, including data\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\n     *  - `gasPrice`: gas price the client is willing to pay\n     *  - `gasLimit`: gas to forward when calling the encoded function\n     *  - `nonce`: client\u0027s nonce\n     *  - `signature`: client\u0027s signature over all previous params, plus the relay and RelayHub addresses\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\n     * `RelayHub`, but it still can be used for e.g. a signature.\n     *\n     * Emits a {TransactionRelayed} event.\n     */\n    function relayCall(\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external;\n\n    /**\n     * @dev Emitted when an attempt to relay a call failed.\n     *\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\n     * actual relayed call was not executed, and the recipient not charged.\n     *\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\n     */\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\n\n    /**\n     * @dev Emitted when a transaction is relayed.\n     * Useful when monitoring a relay\u0027s operation and relayed calls to a contract\n     *\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\n     *\n     * `charge` is the Ether value deducted from the recipient\u0027s balance, paid to the relay\u0027s owner.\n     */\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\n\n    // Reason error codes for the TransactionRelayed event\n    enum RelayCallStatus {\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient\u0027s balance changing\n    }\n\n    /**\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\n     * spend up to `relayedCallStipend` gas.\n     */\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\n\n    /**\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\n     */\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\n\n     // Relay penalization.\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\n    // reporter with half of the relay\u0027s stake. The other half is burned so that, even if the relay penalizes itself, it\n    // still loses half of its stake.\n\n    /**\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\n     * different data (gas price, gas limit, etc. may be different).\n     *\n     * The (unsigned) transaction data and signature for both transactions must be provided.\n     */\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\n\n    /**\n     * @dev Penalize a relay that sent a transaction that didn\u0027t target ``RelayHub``\u0027s {registerRelay} or {relayCall}.\n     */\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\n\n    /**\n     * @dev Emitted when a relay is penalized.\n     */\n    event Penalized(address indexed relay, address sender, uint256 amount);\n\n    /**\n     * @dev Returns an account\u0027s nonce in `RelayHub`.\n     */\n    function getNonce(address from) external view returns (uint256);\n}\n\n"},"IRelayRecipient.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\n *\n * TIP: You don\u0027t need to write an implementation yourself! Inherit from {GSNRecipient} instead.\n */\ninterface IRelayRecipient {\n    /**\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\n     */\n    function getHubAddr() external view returns (address);\n\n    /**\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\n     *\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\n     * and the transaction executed with a gas price of at least `gasPrice`. ``relay``\u0027s fee is `transactionFee`, and the\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender\u0027s (`from`) nonce for\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\n     * over all or some of the previous values.\n     *\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\n     *\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\n     * rejected. A regular revert will also trigger a rejection.\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata approvalData,\n        uint256 maxPossibleCharge\n    )\n        external\n        view\n        returns (uint256, bytes memory);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\n     * pre-charge the sender of the transaction.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\n     *\n     * Returns a value to be passed to {postRelayedCall}.\n     *\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\n     * will not be executed, but the recipient will still be charged for the transaction\u0027s cost.\n     */\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\n     * contract-specific bookkeeping.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}\u0027s return value.\n     *\n     *\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\n     * transaction\u0027s cost.\n     */\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\n}\n"},"LeveragedReturnCalculator.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ReturnCalculatorInterface.sol\";\nimport \"./Withdrawable.sol\";\nimport \"./SignedSafeMath.sol\";\n\n\n/**\n * @title Computes return values based on a fixed leverage.\n */\ncontract LeveragedReturnCalculator is ReturnCalculatorInterface, Withdrawable {\n    using SignedSafeMath for int256;\n\n    // Leverage value. Negative values return the leveraged short return.\n    // Examples:\n    // 1 -\u003e unlevered long\n    // 2 -\u003e 2x levered long\n    // -1 -\u003e unlevered short\n    // -2 -\u003e 2x levered short\n    int256 internal leverageMultiplier;\n    int256 private constant FP_SCALING_FACTOR = 10**18;\n\n    enum Roles { Governance, Withdraw }\n\n    constructor(int256 _leverageMultiplier) public {\n        require(_leverageMultiplier != 0);\n        leverageMultiplier = _leverageMultiplier;\n        _createExclusiveRole(uint256(Roles.Governance), uint256(Roles.Governance), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdraw), uint256(Roles.Governance), msg.sender);\n    }\n\n    function computeReturn(int256 oldPrice, int256 newPrice) external override view returns (int256 assetReturn) {\n        if (oldPrice == 0) {\n            // To avoid a divide-by-zero, just return 0 instead of hitting an exception.\n            return 0;\n        }\n\n        // Compute the underlying asset return: +1% would be 1.01 (* 1 ether).\n        int256 underlyingAssetReturn = newPrice.mul(FP_SCALING_FACTOR).div(oldPrice);\n\n        // Compute the RoR of the underlying asset and multiply by leverageMultiplier to get the modified return.\n        assetReturn = underlyingAssetReturn.sub(FP_SCALING_FACTOR).mul(leverageMultiplier);\n\n        // If oldPrice is \u003c 0, we need to flip the sign to keep returns positively correlated with\n        // leverageMultiplier * price diffs.\n        if (oldPrice \u003c 0) {\n            assetReturn = assetReturn.mul(-1);\n        }\n    }\n\n    function leverage() external override view returns (int256 _leverage) {\n        return leverageMultiplier;\n    }\n}\n"},"Liquidatable.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./FixedPoint.sol\";\nimport \"./PricelessPositionManager.sol\";\n\n\n/**\n@title Liquidatable\n@notice Adds logic to a position-managing contract that enables callers to\nliquidate an undercollateralized position.\n@dev The liquidation has a liveness period before expiring successfully, during which\nsomeone can \"dispute\" the liquidation, which sends a price request to the relevant\nOracle to settle the final collateralization ratio based on a DVM price. The\ncontract enforces dispute rewards in order to incentivize disputers to correctly\ndispute false liquidations and compensate position sponsors who had their position\nincorrectly liquidated. Importantly, a prospective disputer must deposit a dispute\nbond that they can lose in the case of an unsuccessful dispute.\n*/\ncontract Liquidatable is PricelessPositionManager {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /****************************************\n     *     LIQUIDATION DATA STRUCTURES      *\n     ****************************************/\n\n    // Because of the check in withdrawable(), the order of these enum values should not change.\n    enum Status { Uninitialized, PreDispute, PendingDispute, DisputeSucceeded, DisputeFailed }\n\n    struct LiquidationData {\n        // Following variables set upon creation of liquidation:\n        address sponsor; // Address of the liquidated position\u0027s sponsor\n        address liquidator; // Address who created this liquidation\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\n        // Following variables determined by the position that is being liquidated:\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic Tokens required to be burned by liquidator to initiate dispute\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\n        // Amount of collateral being liquidated, which could be different from\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\n        FixedPoint.Unsigned liquidatedCollateral;\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\n        FixedPoint.Unsigned rawUnitCollateral;\n        // Following variable set upon initiation of a dispute:\n        address disputer; // Person who is disputing a liquidation\n        // Following variable set upon a resolution of a dispute:\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\n        FixedPoint.Unsigned finalFee;\n    }\n\n    // Define the contract\u0027s constructor parameters as a struct to enable more variables to be specified.\n    // This is required to enable more params, over and above Solidity\u0027s limits.\n    struct ConstructorParams {\n        // Params for PricelessPositionManager only.\n        uint256 expirationTimestamp;\n        uint256 withdrawalLiveness;\n        address collateralAddress;\n        address finderAddress;\n        address tokenFactoryAddress;\n        address timerAddress;\n        bytes32 priceFeedIdentifier;\n        string syntheticName;\n        string syntheticSymbol;\n        // Params specifically for Liquidatable.\n        uint256 liquidationLiveness;\n        FixedPoint.Unsigned collateralRequirement;\n        FixedPoint.Unsigned disputeBondPct;\n        FixedPoint.Unsigned sponsorDisputeRewardPct;\n        FixedPoint.Unsigned disputerDisputeRewardPct;\n        FixedPoint.Unsigned minSponsorTokens;\n    }\n\n    // Liquidations are unique by ID per sponsor\n    mapping(address =\u003e LiquidationData[]) public liquidations;\n\n    // Total collateral in liquidation.\n    FixedPoint.Unsigned public rawLiquidationCollateral;\n\n    // Immutable contract parameters.\n\n    // Amount of time for pending liquidation before expiry\n    uint256 public liquidationLiveness;\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\n    FixedPoint.Unsigned public collateralRequirement;\n    // Percent of a Liquidation/Position\u0027s lockedCollateral to be deposited by a potential disputer\n    // Represented as a multiplier, for example 1.5e18 = \"150%\" and 0.05e18 = \"5%\"\n    FixedPoint.Unsigned public disputeBondPct;\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multipler, see above\n    FixedPoint.Unsigned public sponsorDisputeRewardPct;\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\n    // Represented as a multipler, see above\n    FixedPoint.Unsigned public disputerDisputeRewardPct;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event LiquidationCreated(\n        address indexed sponsor,\n        address indexed liquidator,\n        uint256 indexed liquidationId,\n        uint256 tokensOutstanding,\n        uint256 lockedCollateral,\n        uint256 liquidatedCollateral\n    );\n    event LiquidationDisputed(\n        address indexed sponsor,\n        address indexed liquidator,\n        address indexed disputer,\n        uint256 liquidationId,\n        uint256 disputeBondAmount\n    );\n    event DisputeSettled(\n        address indexed caller,\n        address indexed sponsor,\n        address indexed liquidator,\n        address disputer,\n        uint256 liquidationId,\n        bool DisputeSucceeded\n    );\n    event LiquidationWithdrawn(address caller, uint256 withdrawalAmount, Status liquidationStatus);\n\n    /****************************************\n     *              MODIFIERS               *\n     ****************************************/\n\n    modifier disputable(uint256 liquidationId, address sponsor) {\n        _disputable(liquidationId, sponsor);\n        _;\n    }\n\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\n        _withdrawable(liquidationId, sponsor);\n        _;\n    }\n\n    /**\n     * @notice Constructs the liquidatable contract.\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\n     * are fed directly into the `PricelessPositionManager\u0027s constructor within the inheritance tree.\n     */\n    constructor(ConstructorParams memory params)\n        public\n        PricelessPositionManager(\n            params.expirationTimestamp,\n            params.withdrawalLiveness,\n            params.collateralAddress,\n            params.finderAddress,\n            params.priceFeedIdentifier,\n            params.syntheticName,\n            params.syntheticSymbol,\n            params.tokenFactoryAddress,\n            params.minSponsorTokens,\n            params.timerAddress\n        )\n    {\n        require(params.collateralRequirement.isGreaterThan(1));\n        require(params.sponsorDisputeRewardPct.add(params.disputerDisputeRewardPct).isLessThan(1));\n\n        // Set liquidatable specific variables.\n        liquidationLiveness = params.liquidationLiveness;\n        collateralRequirement = params.collateralRequirement;\n        disputeBondPct = params.disputeBondPct;\n        sponsorDisputeRewardPct = params.sponsorDisputeRewardPct;\n        disputerDisputeRewardPct = params.disputerDisputeRewardPct;\n    }\n\n    /****************************************\n     *        LIQUIDATION FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Liquidates the sponsor\u0027s position if the caller has enough\n     * synthetic tokens to retire the position\u0027s outstanding tokens.\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor.\n     * @param sponsor address to liquidate.\n     * @param collateralPerToken abort the liquidation if the position\u0027s collateral per token exceeds this value.\n     * @param maxTokensToLiquidate max number of tokes to liquidate.\n     * @return liquidationId of the newly created liquidation.\n     */\n    function createLiquidation(\n        address sponsor,\n        FixedPoint.Unsigned calldata collateralPerToken,\n        FixedPoint.Unsigned calldata maxTokensToLiquidate\n    )\n        external\n        fees()\n        onlyPreExpiration()\n        returns (\n            uint256 liquidationId,\n            FixedPoint.Unsigned memory tokensLiquidated,\n            FixedPoint.Unsigned memory finalFeeBond\n        )\n    {\n        // Retrieve Position data for sponsor\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        tokensLiquidated = FixedPoint.min(maxTokensToLiquidate, positionToLiquidate.tokensOutstanding);\n        // TODO: Limit liquidations from being too small or very close to 100% without being exactly 100%.\n        FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\n\n        // Starting values for the Position being liquidated.\n        // If withdrawal request amount is \u003e position\u0027s collateral, then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\n        FixedPoint.Unsigned memory startCollateral = _getCollateral(positionToLiquidate.rawCollateral);\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\n        }\n\n        // Scoping to get rid of a stack too deep error.\n        {\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\n\n            // Check the max price constraint to ensure that the Position\u0027s collateralization ratio hasn\u0027t increased beyond\n            // what the liquidator was willing to liquidate at.\n            // collateralPerToken \u003e= startCollateralNetOfWithdrawal / startTokens.\n            require(collateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal));\n        }\n\n        // The actual amount of collateral that gets moved to the liquidation.\n        FixedPoint.Unsigned memory lockedCollateral = startCollateral.mul(ratio);\n        // For purposes of disputes, it\u0027s actually this liquidatedCollateral value that\u0027s used. This value is net of\n        // withdrawal requests.\n        FixedPoint.Unsigned memory liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\n        // Part of the withdrawal request is also removed. Ideally:\n        // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\n        FixedPoint.Unsigned memory withdrawalAmountToRemove = positionToLiquidate.withdrawalRequestAmount.mul(ratio);\n\n        // Compute final fee at time of liquidation.\n        finalFeeBond = _computeFinalFees();\n\n        // Construct liquidation object.\n        // Note: all dispute-related values are just zeroed out until a dispute occurs.\n        // liquidationId is the index of the new LiquidationData that we will push into the array,\n        // which is equal to the current length of the array pre-push.\n        liquidationId = liquidations[sponsor].length;\n        liquidations[sponsor].push(\n            LiquidationData({\n                sponsor: sponsor,\n                liquidator: msg.sender,\n                state: Status.PreDispute,\n                liquidationTime: getCurrentTime(),\n                tokensOutstanding: tokensLiquidated,\n                lockedCollateral: lockedCollateral,\n                liquidatedCollateral: liquidatedCollateral,\n                rawUnitCollateral: _convertCollateral(FixedPoint.fromUnscaledUint(1)),\n                disputer: address(0),\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\n                finalFee: finalFeeBond\n            })\n        );\n\n        // Adjust the sponsor\u0027s remaining position.\n        _reduceSponsorPosition(sponsor, tokensLiquidated, lockedCollateral, withdrawalAmountToRemove);\n\n        // Add to the global liquidation collateral count.\n        _addCollateral(rawLiquidationCollateral, lockedCollateral.add(finalFeeBond));\n\n        // Destroy tokens\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensLiquidated.rawValue);\n        tokenCurrency.burn(tokensLiquidated.rawValue);\n\n        // Pull final fee from liquidator.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), finalFeeBond.rawValue);\n\n        emit LiquidationCreated(\n            sponsor,\n            msg.sender,\n            liquidationId,\n            tokensLiquidated.rawValue,\n            lockedCollateral.rawValue,\n            liquidatedCollateral.rawValue\n        );\n    }\n\n    /**\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\n     * and pay a fixed final fee charged on each price request.\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\n     * @param liquidationId of the disputed liquidation.\n     * @param sponsor the address of the sponsor who\u0027s liquidation is being disputed.\n     */\n    function dispute(uint256 liquidationId, address sponsor)\n        external\n        disputable(liquidationId, sponsor)\n        fees()\n        returns (FixedPoint.Unsigned memory totalPaid)\n    {\n        LiquidationData storage disputedLiquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\n        FixedPoint.Unsigned memory disputeBondAmount = disputedLiquidation.lockedCollateral.mul(disputeBondPct).mul(\n            _getCollateral(disputedLiquidation.rawUnitCollateral)\n        );\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\n\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), disputeBondAmount.rawValue);\n\n        // Request a price from DVM,\n        // Liquidation is pending dispute until DVM returns a price\n        disputedLiquidation.state = Status.PendingDispute;\n        disputedLiquidation.disputer = msg.sender;\n\n        // Enqueue a request with the DVM.\n        _requestOraclePrice(disputedLiquidation.liquidationTime);\n\n        // Pay a final fee.\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\n\n        emit LiquidationDisputed(\n            sponsor,\n            disputedLiquidation.liquidator,\n            msg.sender,\n            liquidationId,\n            disputeBondAmount.rawValue\n        );\n\n        return disputeBondAmount.add(disputedLiquidation.finalFee);\n    }\n\n    /**\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\n     * the sponsor, liquidator, and/or disputer can call this method to receive payments.\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment\n     * If the dispute FAILED: only the liquidator can receive payment\n     * Once all collateral is withdrawn, delete the liquidation data.\n     * @param liquidationId uniquely identifies the sponsor\u0027s liquidation.\n     * @param sponsor address of the sponsor associated with the liquidation.\n     * @return amountWithdrawn the total amount of underlying returned from the liquidation.\n     */\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\n        public\n        withdrawable(liquidationId, sponsor)\n        fees()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        require(\n            (msg.sender == liquidation.disputer) ||\n                (msg.sender == liquidation.liquidator) ||\n                (msg.sender == liquidation.sponsor)\n        );\n\n        // Settles the liquidation if necessary.\n        // Note: this will fail if the price has not resolved yet.\n        _settle(liquidationId, sponsor);\n\n        // Calculate rewards as a function of the TRV. Note: all payouts are scaled by the unit collateral value so\n        // all payouts are charged the fees pro rata.\n        FixedPoint.Unsigned memory feeAttenuation = _getCollateral(liquidation.rawUnitCollateral);\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation\n            .tokensOutstanding\n            .mul(liquidation.settlementPrice)\n            .mul(feeAttenuation);\n        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPct.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPct.mul(tokenRedemptionValue);\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPct);\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);\n\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\n        // Based on the state, different parties of a liquidation can withdraw different amounts.\n        // Once a caller has been paid their address deleted from the struct.\n        // This prevents them from being paid multiple from times the same liquidation.\n        FixedPoint.Unsigned memory withdrawalAmount;\n        if (liquidation.state == Status.DisputeSucceeded) {\n            // If the dispute is successful then all three users can withdraw from the contract.\n            if (msg.sender == liquidation.disputer) {\n                // Pay DISPUTER: disputer reward + dispute bond + returned final fee\n                FixedPoint.Unsigned memory payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);\n                withdrawalAmount = withdrawalAmount.add(payToDisputer);\n                delete liquidation.disputer;\n            }\n\n            if (msg.sender == liquidation.sponsor) {\n                // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\n                FixedPoint.Unsigned memory remainingCollateral = collateral.sub(tokenRedemptionValue);\n                FixedPoint.Unsigned memory payToSponsor = sponsorDisputeReward.add(remainingCollateral);\n                withdrawalAmount = withdrawalAmount.add(payToSponsor);\n                delete liquidation.sponsor;\n            }\n\n            if (msg.sender == liquidation.liquidator) {\n                // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\n                // If TRV \u003e Collateral, then subtract rewards from collateral\n                // NOTE: This should never be below zero since we prevent (sponsorDisputePct+disputerDisputePct) \u003e= 0 in\n                // the constructor when these params are set\n                FixedPoint.Unsigned memory payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(\n                    disputerDisputeReward\n                );\n                withdrawalAmount = withdrawalAmount.add(payToLiquidator);\n                delete liquidation.liquidator;\n            }\n\n            // Free up space once all collateral is withdrawn\n            if (\n                liquidation.disputer == address(0) \u0026\u0026\n                liquidation.sponsor == address(0) \u0026\u0026\n                liquidation.liquidator == address(0)\n            ) {\n                delete liquidations[sponsor][liquidationId];\n            }\n            // In the case of a failed dispute only the liquidator can withdraw.\n        } else if (liquidation.state == Status.DisputeFailed \u0026\u0026 msg.sender == liquidation.liquidator) {\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\n            withdrawalAmount = collateral.add(disputeBondAmount).add(finalFee);\n            delete liquidations[sponsor][liquidationId];\n            // If the state is pre-dispute but time has passed liveness then the dispute failed and the liquidator can withdraw\n        } else if (liquidation.state == Status.PreDispute \u0026\u0026 msg.sender == liquidation.liquidator) {\n            // Pay LIQUIDATOR: collateral + returned final fee\n            withdrawalAmount = collateral.add(finalFee);\n            delete liquidations[sponsor][liquidationId];\n        }\n\n        require(withdrawalAmount.isGreaterThan(0));\n        amountWithdrawn = _removeCollateral(rawLiquidationCollateral, withdrawalAmount);\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n\n        emit LiquidationWithdrawn(msg.sender, amountWithdrawn.rawValue, liquidation.state);\n    }\n\n    /**\n     * @dev This overrides pfc() so the Liquidatable contract can report its profit from corruption.\n     */\n    function pfc() public override view returns (FixedPoint.Unsigned memory) {\n        return super.pfc().add(_getCollateral(rawLiquidationCollateral));\n    }\n\n    function getLiquidations(address sponsor) external view returns (LiquidationData[] memory) {\n        return liquidations[sponsor];\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS          *\n     ****************************************/\n\n    // This settles a liquidation if it is in the PendingDispute state. If not, it will immediately return.\n    // If the liquidation is in the PendingDispute state, but a price is not available, this will revert.\n    function _settle(uint256 liquidationId, address sponsor) internal {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n\n        // Settlement only happens when state == PendingDispute and will only happen once per liquidation.\n        // If this liquidation is not ready to be settled, this method should return immediately.\n        if (liquidation.state != Status.PendingDispute) {\n            return;\n        }\n\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\n        liquidation.settlementPrice = _getOraclePrice(liquidation.liquidationTime);\n\n        // Find the value of the tokens in the underlying collateral.\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation.tokensOutstanding.mul(\n            liquidation.settlementPrice\n        );\n\n        // The required collateral is the value of the tokens in underlying * required collateral ratio.\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue.mul(collateralRequirement);\n\n        // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\n        bool disputeSucceeded = liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\n        liquidation.state = disputeSucceeded ? Status.DisputeSucceeded : Status.DisputeFailed;\n\n        emit DisputeSettled(\n            msg.sender,\n            sponsor,\n            liquidation.liquidator,\n            liquidation.disputer,\n            liquidationId,\n            disputeSucceeded\n        );\n    }\n\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\n        internal\n        view\n        returns (LiquidationData storage liquidation)\n    {\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\n\n        // Revert if the caller is attempting to access an invalid liquidation (one that has never been created or one\n        // has never been initialized).\n        require(\n            liquidationId \u003c liquidationArray.length \u0026\u0026 liquidationArray[liquidationId].state != Status.Uninitialized\n        );\n        return liquidationArray[liquidationId];\n    }\n\n    function _getLiquidationExpiry(LiquidationData storage liquidation) internal view returns (uint256) {\n        return liquidation.liquidationTime.add(liquidationLiveness);\n    }\n\n    /**\n     * @dev These internal functions are supposed to act identically to modifiers, but re-used modifiers\n     * unnecessarily increase contract bytecode size.\n     * source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n     */\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        require((getCurrentTime() \u003c _getLiquidationExpiry(liquidation)) \u0026\u0026 (liquidation.state == Status.PreDispute));\n    }\n\n    function _withdrawable(uint256 liquidationId, address sponsor) internal view {\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\n        Status state = liquidation.state;\n\n        // Must be disputed or the liquidation has passed expiry.\n        require(\n            (state \u003e Status.PreDispute) ||\n                ((_getLiquidationExpiry(liquidation) \u003c= getCurrentTime()) \u0026\u0026 (state == Status.PreDispute))\n        );\n    }\n}\n"},"ManualPriceFeed.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Testable.sol\";\nimport \"./Withdrawable.sol\";\nimport \"./PriceFeedInterface.sol\";\n\n\n/**\n * @title Implementation of PriceFeedInterface with the ability to manually push prices.\n */\ncontract ManualPriceFeed is PriceFeedInterface, Withdrawable, Testable {\n    using SafeMath for uint256;\n\n    // A single price update.\n    struct PriceTick {\n        uint256 timestamp;\n        int256 price;\n    }\n\n    // Mapping from identifier to the latest price for that identifier.\n    mapping(bytes32 =\u003e PriceTick) private prices;\n\n    // Ethereum timestamp tolerance.\n    // Note: this is technically the amount of time that a block timestamp can be *ahead* of the current time. However,\n    // we are assuming that blocks will never get more than this amount *behind* the current time. The only requirement\n    // limiting how early the timestamp can be is that it must have a later timestamp than its parent. However,\n    // this bound will probably work reasonably well in both directions.\n    uint256 private constant BLOCK_TIMESTAMP_TOLERANCE = 900;\n\n    enum Roles { Governance, Writer, Withdraw }\n\n    constructor(address _timerAddress) public Testable(_timerAddress) {\n        _createExclusiveRole(uint256(Roles.Governance), uint256(Roles.Governance), msg.sender);\n        _createExclusiveRole(uint256(Roles.Writer), uint256(Roles.Governance), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdraw), uint256(Roles.Governance), msg.sender);\n    }\n\n    /**\n     * @notice Adds a new price to the series for a given identifier.\n     * @dev The pushed publishTime must be later than the last time pushed so far.\n     */\n    function pushLatestPrice(\n        bytes32 identifier,\n        uint256 publishTime,\n        int256 newPrice\n    ) external onlyRoleHolder(uint256(Roles.Writer)) {\n        require(publishTime \u003c= getCurrentTime().add(BLOCK_TIMESTAMP_TOLERANCE));\n        require(publishTime \u003e prices[identifier].timestamp);\n        prices[identifier] = PriceTick(publishTime, newPrice);\n        emit PriceUpdated(identifier, publishTime, newPrice);\n    }\n\n    /**\n     * @notice Whether this feed has ever published any prices for this identifier.\n     */\n    function isIdentifierSupported(bytes32 identifier) external override view returns (bool isSupported) {\n        isSupported = _isIdentifierSupported(identifier);\n    }\n\n    function latestPrice(bytes32 identifier) external override view returns (uint256 publishTime, int256 price) {\n        require(_isIdentifierSupported(identifier));\n        publishTime = prices[identifier].timestamp;\n        price = prices[identifier].price;\n    }\n\n    function _isIdentifierSupported(bytes32 identifier) private view returns (bool isSupported) {\n        isSupported = prices[identifier].timestamp \u003e 0;\n    }\n}\n"},"Math.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"},"MerkleProof.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i \u003c proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash \u003c= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"},"Migrations.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Used internally by Truffle migrations.\n * @dev See https://www.trufflesuite.com/docs/truffle/getting-started/running-migrations#initial-migration for details.\n */\ncontract Migrations {\n    address public owner;\n    uint256 public last_completed_migration;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier restricted() {\n        if (msg.sender == owner) _;\n    }\n\n    function setCompleted(uint256 completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}\n"},"MockAdministratee.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./AdministrateeInterface.sol\";\n\n\n// A mock implementation of AdministrateeInterface, taking the place of a financial contract.\ncontract MockAdministratee is AdministrateeInterface {\n    uint256 public timesRemargined;\n    uint256 public timesEmergencyShutdown;\n\n    function remargin() external override {\n        timesRemargined++;\n    }\n\n    function emergencyShutdown() external override {\n        timesEmergencyShutdown++;\n    }\n}\n"},"MockOracle.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./Testable.sol\";\nimport \"./OracleInterface.sol\";\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./Constants.sol\";\n\n\n// A mock oracle used for testing.\ncontract MockOracle is OracleInterface, Testable {\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\n    struct Price {\n        bool isAvailable;\n        int256 price;\n        // Time the verified price became available.\n        uint256 verifiedTime;\n    }\n\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\n    // not yet available.\n    struct QueryIndex {\n        bool isValid;\n        uint256 index;\n    }\n\n    // Represents a (identifier, time) point that has been queried.\n    struct QueryPoint {\n        bytes32 identifier;\n        uint256 time;\n    }\n\n    // Reference to the Finder.\n    FinderInterface private finder;\n\n    // Conceptually we want a (time, identifier) -\u003e price map.\n    mapping(bytes32 =\u003e mapping(uint256 =\u003e Price)) private verifiedPrices;\n\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\n    // Can we generalize this data structure?\n    mapping(bytes32 =\u003e mapping(uint256 =\u003e QueryIndex)) private queryIndices;\n    QueryPoint[] private requestedPrices;\n\n    constructor(address _finderAddress, address _timerAddress) public Testable(_timerAddress) {\n        finder = FinderInterface(_finderAddress);\n    }\n\n    // Enqueues a request (if a request isn\u0027t already present) for the given (identifier, time) pair.\n\n    function requestPrice(bytes32 identifier, uint256 time) external override {\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time];\n        if (!lookup.isAvailable \u0026\u0026 !queryIndices[identifier][time].isValid) {\n            // New query, enqueue it for review.\n            queryIndices[identifier][time] = QueryIndex(true, requestedPrices.length);\n            requestedPrices.push(QueryPoint(identifier, time));\n        }\n    }\n\n    // Pushes the verified price for a requested query.\n    function pushPrice(\n        bytes32 identifier,\n        uint256 time,\n        int256 price\n    ) external {\n        verifiedPrices[identifier][time] = Price(true, price, getCurrentTime());\n\n        QueryIndex storage queryIndex = queryIndices[identifier][time];\n        require(queryIndex.isValid, \"Can\u0027t push prices that haven\u0027t been requested\");\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\n        // the contents of the last index (unless it is the last index).\n        uint256 indexToReplace = queryIndex.index;\n        delete queryIndices[identifier][time];\n        uint256 lastIndex = requestedPrices.length - 1;\n        if (lastIndex != indexToReplace) {\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\n            queryIndices[queryToCopy.identifier][queryToCopy.time].index = indexToReplace;\n            requestedPrices[indexToReplace] = queryToCopy;\n        }\n    }\n\n    // Checks whether a price has been resolved.\n    function hasPrice(bytes32 identifier, uint256 time) external override view returns (bool) {\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time];\n        return lookup.isAvailable;\n    }\n\n    // Gets a price that has already been resolved.\n    function getPrice(bytes32 identifier, uint256 time) external override view returns (int256) {\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\n        Price storage lookup = verifiedPrices[identifier][time];\n        require(lookup.isAvailable);\n        return lookup.price;\n    }\n\n    // Gets the queries that still need verified prices.\n    function getPendingQueries() external view returns (QueryPoint[] memory) {\n        return requestedPrices;\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"},"MultiRole.sol":{"content":"pragma solidity ^0.6.0;\n\n\nlibrary Exclusive {\n    struct RoleMembership {\n        address member;\n    }\n\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\n        return roleMembership.member == memberToCheck;\n    }\n\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\n        require(newMember != address(0x0), \"Cannot set an exclusive role to 0x0\");\n        roleMembership.member = newMember;\n    }\n\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\n        return roleMembership.member;\n    }\n\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\n        resetMember(roleMembership, initialMember);\n    }\n}\n\n\nlibrary Shared {\n    struct RoleMembership {\n        mapping(address =\u003e bool) members;\n    }\n\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\n        return roleMembership.members[memberToCheck];\n    }\n\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\n        require(memberToAdd != address(0x0), \"Cannot add 0x0 to a shared role\");\n        roleMembership.members[memberToAdd] = true;\n    }\n\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\n        roleMembership.members[memberToRemove] = false;\n    }\n\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\n        for (uint256 i = 0; i \u003c initialMembers.length; i++) {\n            addMember(roleMembership, initialMembers[i]);\n        }\n    }\n}\n\n\n/**\n * @title Base class to manage permissions for the derived class.\n */\nabstract contract MultiRole {\n    using Exclusive for Exclusive.RoleMembership;\n    using Shared for Shared.RoleMembership;\n\n    enum RoleType { Invalid, Exclusive, Shared }\n\n    struct Role {\n        uint256 managingRole;\n        RoleType roleType;\n        Exclusive.RoleMembership exclusiveRoleMembership;\n        Shared.RoleMembership sharedRoleMembership;\n    }\n\n    mapping(uint256 =\u003e Role) private roles;\n\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\n\n    /**\n     * @notice Reverts unless the caller is a member of the specified roleId.\n     */\n    modifier onlyRoleHolder(uint256 roleId) {\n        require(holdsRole(roleId, msg.sender), \"Sender does not hold required role\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\n     */\n    modifier onlyRoleManager(uint256 roleId) {\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \"Can only be called by a role manager\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\n     */\n    modifier onlyExclusive(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Exclusive, \"Must be called on an initialized Exclusive role\");\n        _;\n    }\n\n    /**\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\n     */\n    modifier onlyShared(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Shared, \"Must be called on an initialized Shared role\");\n        _;\n    }\n\n    /**\n     * @notice Whether `memberToCheck` is a member of roleId.\n     * @dev Reverts if roleId does not correspond to an initialized role.\n     * @param roleId the Role to check.\n     * @param memberToCheck the address to check.\n     * @return True if `memberToCheck` is a member of `roleId`.\n     */\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\n        Role storage role = roles[roleId];\n        if (role.roleType == RoleType.Exclusive) {\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\n        } else if (role.roleType == RoleType.Shared) {\n            return role.sharedRoleMembership.isMember(memberToCheck);\n        }\n        revert(\"Invalid roleId\");\n    }\n\n    /**\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\n     * initialized, ExclusiveRole.\n     * @param roleId the ExclusiveRole membership to modify.\n     * @param newMember the new ExclusiveRole member.\n     */\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\n    }\n\n    /**\n     * @notice Gets the current holder of the exclusive role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\n     * @param roleId the ExclusiveRole membership to check.\n     * @return the address of the current ExclusiveRole member.\n     */\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\n        return roles[roleId].exclusiveRoleMembership.getMember();\n    }\n\n    /**\n     * @notice Adds `newMember` to the shared role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\n     * managing role for `roleId`.\n     * @param roleId the SharedRole membership to modify.\n     * @param newMember the new SharedRole member.\n     */\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\n        roles[roleId].sharedRoleMembership.addMember(newMember);\n        emit AddedSharedMember(roleId, newMember, msg.sender);\n    }\n\n    /**\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\n     * managing role for `roleId`.\n     * @param roleId the SharedRole membership to modify.\n     * @param memberToRemove the current SharedRole member to remove.\n     */\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\n    }\n\n    /**\n     * @notice Removes caller from the role, `roleId`.\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\n     * initialized, SharedRole.\n     * @param roleId the SharedRole membership to modify.\n     */\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice Reverts if `roleId` is not initialized.\n     */\n    modifier onlyValidRole(uint256 roleId) {\n        require(roles[roleId].roleType != RoleType.Invalid, \"Attempted to use an invalid roleId\");\n        _;\n    }\n\n    /**\n     * @notice Reverts if `roleId` is initialized.\n     */\n    modifier onlyInvalidRole(uint256 roleId) {\n        require(roles[roleId].roleType == RoleType.Invalid, \"Cannot use a pre-existing role\");\n        _;\n    }\n\n    /**\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\n     * `initialMembers` will be immediately added to the role.\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\n     * initialized.\n     */\n    function _createSharedRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address[] memory initialMembers\n    ) internal onlyInvalidRole(roleId) {\n        Role storage role = roles[roleId];\n        role.roleType = RoleType.Shared;\n        role.managingRole = managingRoleId;\n        role.sharedRoleMembership.init(initialMembers);\n        require(\n            roles[managingRoleId].roleType != RoleType.Invalid,\n            \"Attempted to use an invalid role to manage a shared role\"\n        );\n    }\n\n    /**\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\n     * `initialMember` will be immediately added to the role.\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\n     * initialized.\n     */\n    function _createExclusiveRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address initialMember\n    ) internal onlyInvalidRole(roleId) {\n        Role storage role = roles[roleId];\n        role.roleType = RoleType.Exclusive;\n        role.managingRole = managingRoleId;\n        role.exclusiveRoleMembership.init(initialMember);\n        require(\n            roles[managingRoleId].roleType != RoleType.Invalid,\n            \"Attempted to use an invalid role to manage an exclusive role\"\n        );\n    }\n}\n"},"MultiRoleTest.sol":{"content":"/*\n  MultiRoleTest contract.\n*/\n\npragma solidity ^0.6.0;\n\nimport \"./MultiRole.sol\";\n\n\n// The purpose of this contract is to make the MultiRole creation methods externally callable for testing purposes.\ncontract MultiRoleTest is MultiRole {\n    function createSharedRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address[] calldata initialMembers\n    ) external {\n        _createSharedRole(roleId, managingRoleId, initialMembers);\n    }\n\n    function createExclusiveRole(\n        uint256 roleId,\n        uint256 managingRoleId,\n        address initialMember\n    ) external {\n        _createExclusiveRole(roleId, managingRoleId, initialMember);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function revertIfNotHoldingRole(uint256 roleId) external view onlyRoleHolder(roleId) {}\n}\n"},"OracleInterface.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\ninterface OracleInterface {\n    /**\n     * @notice Enqueues a request (if a request isn\u0027t already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     */\n    function requestPrice(bytes32 identifier, uint256 time) external;\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(bytes32 identifier, uint256 time) external view returns (bool);\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n    function getPrice(bytes32 identifier, uint256 time) external view returns (int256);\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"Pausable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"PaymentSplitter.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n */\ncontract PaymentSplitter is Context {\n    using SafeMath for uint256;\n\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address =\u003e uint256) private _shares;\n    mapping(address =\u003e uint256) private _released;\n    address[] private _payees;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor (address[] memory payees, uint256[] memory shares) public payable {\n        // solhint-disable-next-line max-line-length\n        require(payees.length == shares.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length \u003e 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i \u003c payees.length; i++) {\n            _addPayee(payees[i], shares[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it\u0027s possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive () external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] \u003e 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance.add(_totalReleased);\n        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] = _released[account].add(payment);\n        _totalReleased = _totalReleased.add(payment);\n\n        account.transfer(payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ \u003e 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares.add(shares_);\n        emit PayeeAdded(account, shares_);\n    }\n}\n"},"PriceFeedInterface.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title This interface allows contracts to query unverified prices.\n */\ninterface PriceFeedInterface {\n    /**\n     * @notice An event fired when a price is published.\n     */\n    event PriceUpdated(bytes32 indexed identifier, uint256 indexed time, int256 price);\n\n    /**\n     * @notice Whether this PriceFeeds provides prices for the given identifier.\n     */\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool isSupported);\n\n    /**\n     * @notice Gets the latest time-price pair at which a price was published.\n     * @dev Will revert if no prices have been published for this identifier.\n     */\n    function latestPrice(bytes32 identifier) external view returns (uint256 publishTime, int256 price);\n}\n"},"PricelessPositionManager.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./FixedPoint.sol\";\nimport \"./ExpandedIERC20.sol\";\n\nimport \"./OracleInterface.sol\";\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./AdministrateeInterface.sol\";\nimport \"./Constants.sol\";\n\nimport \"./TokenFactory.sol\";\nimport \"./FeePayer.sol\";\n\n\n/**\n * @title Financial contract with priceless position management.\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\n */\n\ncontract PricelessPositionManager is FeePayer, AdministrateeInterface {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ExpandedIERC20;\n\n    /****************************************\n     *  PRICELESS POSITION DATA STRUCTURES  *\n     ****************************************/\n\n    // Enum to store the state of the PricelessPositionManager. Set on expiration or emergency shutdown.\n    enum ContractState { Open, ExpiredPriceRequested, ExpiredPriceReceived }\n    ContractState public contractState;\n\n    // Represents a single sponsor\u0027s position. All collateral is held by this contract.\n    // This struct acts is bookkeeping for how much of that collateral is allocated to each sponsor.\n    struct PositionData {\n        FixedPoint.Unsigned tokensOutstanding;\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `requestPassTimestamp != 0`.\n        uint256 requestPassTimestamp;\n        FixedPoint.Unsigned withdrawalRequestAmount;\n        // Raw collateral value. This value should never be accessed directly -- always use _getCollateral().\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\n        FixedPoint.Unsigned rawCollateral;\n    }\n\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\n    mapping(address =\u003e PositionData) public positions;\n\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\n    // global collateralization ratio without iterating over all positions.\n    FixedPoint.Unsigned public totalTokensOutstanding;\n\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\n    // _getCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\n\n    // Synthetic token created by this contract.\n    ExpandedIERC20 public tokenCurrency;\n\n    // Unique identifier for DVM price feed ticker.\n    bytes32 public priceIdentifer;\n    // Time that this contract expires. Should not change post-construction unless a emergency shutdown occurs.\n    uint256 public expirationTimestamp;\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\n    uint256 public withdrawalLiveness;\n\n    // Minimum number of tokens in a sponsor\u0027s position.\n    FixedPoint.Unsigned public minSponsorTokens;\n\n    // The expiry price pulled from the DVM.\n    FixedPoint.Unsigned public expiryPrice;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event Transfer(address indexed oldSponsor, address indexed newSponsor);\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);\n    event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);\n    event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event NewSponsor(address indexed sponsor);\n    event EndedSponsor(address indexed sponsor);\n    event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\n    event ContractExpired(address indexed caller);\n    event SettleExpiredPosition(\n        address indexed caller,\n        uint256 indexed collateralReturned,\n        uint256 indexed tokensBurned\n    );\n    event EmergencyShutdown(address indexed caller, uint256 originalExpirationTimestamp, uint256 shutdownTimestamp);\n\n    /****************************************\n     *               MODIFIERS              *\n     ****************************************/\n\n    modifier onlyPreExpiration() {\n        _onlyPreExpiration();\n        _;\n    }\n\n    modifier onlyPostExpiration() {\n        _onlyPostExpiration();\n        _;\n    }\n\n    modifier onlyCollateralizedPosition(address sponsor) {\n        _onlyCollateralizedPosition(sponsor);\n        _;\n    }\n\n    // Check that the current state of the pricelessPositionManager is Open.\n    // This prevents multiple calls to `expire` and `EmergencyShutdown` post expiration.\n    modifier onlyOpenState() {\n        _onlyOpenState();\n        _;\n    }\n\n    /**\n     * @notice Construct the PricelessPositionManager\n     * @param _expirationTimestamp unix timestamp of when the contract will expire.\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\n     * @param _priceIdentifier registered in the DVM for the synthetic.\n     * @param _syntheticName name for the token contract that will be deployed.\n     * @param _syntheticSymbol symbol for the token contract that will be deployed.\n     * @param _tokenFactoryAddress deployed UMA token factory to create the synthetic token.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        uint256 _expirationTimestamp,\n        uint256 _withdrawalLiveness,\n        address _collateralAddress,\n        address _finderAddress,\n        bytes32 _priceIdentifier,\n        string memory _syntheticName,\n        string memory _syntheticSymbol,\n        address _tokenFactoryAddress,\n        FixedPoint.Unsigned memory _minSponsorTokens,\n        address _timerAddress\n    ) public FeePayer(_collateralAddress, _finderAddress, _timerAddress) {\n        expirationTimestamp = _expirationTimestamp;\n        withdrawalLiveness = _withdrawalLiveness;\n        TokenFactory tf = TokenFactory(_tokenFactoryAddress);\n        tokenCurrency = tf.createToken(_syntheticName, _syntheticSymbol, 18);\n        minSponsorTokens = _minSponsorTokens;\n\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier));\n\n        priceIdentifer = _priceIdentifier;\n    }\n\n    /****************************************\n     *          POSITION FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Transfers ownership of the caller\u0027s current position to `newSponsorAddress`.\n     * @dev Transferring positions can only occur if the recipient does not already have a position.\n     * @param newSponsorAddress is the address to which the position will be transferred.\n     */\n    function transfer(address newSponsorAddress) public onlyPreExpiration() {\n        require(_getCollateral(positions[newSponsorAddress].rawCollateral).isEqual(FixedPoint.fromUnscaledUint(0)));\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp == 0);\n        positions[newSponsorAddress] = positionData;\n        delete positions[msg.sender];\n\n        emit Transfer(msg.sender, newSponsorAddress);\n        emit NewSponsor(newSponsorAddress);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the sponsor\u0027s position.\n     * @dev Increases the collateralization level of a position after creation.\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor\u0027s position.\n     */\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public onlyPreExpiration() fees() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp == 0);\n        _addCollateral(positionData.rawCollateral, collateralAmount);\n        _addCollateral(rawTotalPositionCollateral, collateralAmount);\n\n        // Move collateral currency from sender to contract.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n\n        emit Deposit(msg.sender, collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor\u0027s position to the sponsor.\n     * @dev Reverts if the withdrawal puts this position\u0027s collateralization ratio below the global\n     * collateralization ratio. In that case, use `requestWithdrawawal`. Might not withdraw the full requested\n     * amount in order to account for precision loss.\n     * @param collateralAmount is the amount of collateral to withdraw.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\n        public\n        onlyPreExpiration()\n        fees()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp == 0);\n\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\n        require(_checkPositionCollateralization(positionData));\n        // We elect to withdraw the amount that the global collateral is decreased by,\n        // rather than the individual position\u0027s collateral, because we need to maintain the invariant that\n        // the global collateral is always \u003c= the collateral owned by the contract to avoid reverts on withdrawals.\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, collateralAmount);\n\n        // Move collateral currency from contract to sender.\n        // Note that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\n        // instead of the user requested amount. This eliminates precision loss that could occur\n        // where the user withdraws more collateral than rawCollateral is decremented by.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\n    }\n\n    /**\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw\n     * `collateralAmount` from their position.\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\n     * @param collateralAmount the amount of collateral requested to withdraw\n     */\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount) public onlyPreExpiration() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp == 0);\n\n        // Make sure the proposed expiration of this request is not post-expiry.\n        uint256 requestPassTime = getCurrentTime() + withdrawalLiveness;\n        require(requestPassTime \u003c= expirationTimestamp);\n\n        // Update the position object for the user.\n        positionData.requestPassTimestamp = requestPassTime;\n        positionData.withdrawalRequestAmount = collateralAmount;\n\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\n    }\n\n    /**\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\n     * @dev Might not withdraw the full requested amount in order to account for precision loss.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    // TODO: Decide whether to fold this functionality into withdraw() method above.\n    function withdrawPassedRequest()\n        external\n        onlyPreExpiration()\n        fees()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp \u003c= getCurrentTime());\n\n        // If withdrawal request amount is \u003e position collateral, then withdraw the full collateral amount.\n        FixedPoint.Unsigned memory amountToWithdraw = positionData.withdrawalRequestAmount;\n        if (positionData.withdrawalRequestAmount.isGreaterThan(_getCollateral(positionData.rawCollateral))) {\n            amountToWithdraw = _getCollateral(positionData.rawCollateral);\n        }\n\n        _removeCollateral(positionData.rawCollateral, amountToWithdraw);\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, amountToWithdraw);\n\n        // Transfer approved withdrawal amount from the contract to the caller.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\n\n        // Reset withdrawal request\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\n        positionData.requestPassTimestamp = 0;\n    }\n\n    /**\n     * @notice Cancels a pending withdrawal request.\n     */\n    function cancelWithdrawal() external onlyPreExpiration() {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp != 0);\n\n        emit RequestWithdrawalCanceled(msg.sender, positionData.withdrawalRequestAmount.rawValue);\n\n        // Reset withdrawal request\n        positionData.requestPassTimestamp = 0;\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\n    }\n\n    /**\n     * @notice Pulls `collateralAmount` into the sponsor\u0027s position and mints `numTokens` of `tokenCurrency`.\n     * @dev Reverts if the minting these tokens would put the position\u0027s collateralization ratio below the\n     * global collateralization ratio.\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\n     * @param numTokens is the number of tokens to mint from the position.\n     */\n    function create(FixedPoint.Unsigned memory collateralAmount, FixedPoint.Unsigned memory numTokens)\n        public\n        onlyPreExpiration()\n        fees()\n    {\n        require(_checkCollateralization(collateralAmount, numTokens));\n\n        PositionData storage positionData = positions[msg.sender];\n        require(positionData.requestPassTimestamp == 0);\n        if (positionData.tokensOutstanding.isEqual(0)) {\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens));\n            emit NewSponsor(msg.sender);\n        }\n        _addCollateral(positionData.rawCollateral, collateralAmount);\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\n\n        _addCollateral(rawTotalPositionCollateral, collateralAmount);\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\n\n        // Transfer tokens into the contract from caller and mint the caller synthetic tokens.\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue), \"Minting synthetic tokens failed\");\n\n        emit PositionCreated(msg.sender, collateralAmount.rawValue, numTokens.rawValue);\n    }\n\n    /**\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\n     * in order to account for precision loss.\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function redeem(FixedPoint.Unsigned memory numTokens)\n        public\n        onlyPreExpiration()\n        fees()\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\n    {\n        PositionData storage positionData = _getPositionData(msg.sender);\n        require(positionData.requestPassTimestamp == 0);\n        require(!numTokens.isGreaterThan(positionData.tokensOutstanding));\n\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\n        FixedPoint.Unsigned memory collateralRedeemed = fractionRedeemed.mul(\n            _getCollateral(positionData.rawCollateral)\n        );\n\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\n        } else {\n            // Decrease the sponsors position size of collateral and tokens.\n            _removeCollateral(positionData.rawCollateral, collateralRedeemed);\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\n            require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\n            positionData.tokensOutstanding = newTokenCount;\n\n            // Decrease the contract\u0027s collateral and tokens.\n            amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, collateralRedeemed);\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\n        }\n\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\n        tokenCurrency.burn(numTokens.rawValue);\n\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\n    }\n\n    /**\n     * @notice After a contract has passed expiry all token holders can redeem their tokens for\n     * underlying at the prevailing price defined by the DVM from the `expire` function.\n     * @dev This Burns all tokens from the caller of `tokenCurrency` and sends back the proportional\n     * amount of `collateralCurrency`. Might not redeem the full proportional amount of collateral\n     * in order to account for precision loss.\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\n     */\n    function settleExpired() external onlyPostExpiration() fees() returns (FixedPoint.Unsigned memory amountWithdrawn) {\n        // If the contract state is open and onlyPostExpiration passed then `expire()` has not yet been called.\n        require(contractState != ContractState.Open);\n\n        // Get the current settlement price and store it. If it is not resolved will revert.\n        if (contractState != ContractState.ExpiredPriceReceived) {\n            expiryPrice = _getOraclePrice(expirationTimestamp);\n            contractState = ContractState.ExpiredPriceReceived;\n        }\n\n        // Get caller\u0027s tokens balance and calculate amount of underlying entitled to them.\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\n        FixedPoint.Unsigned memory totalRedeemableCollateral = tokensToRedeem.mul(expiryPrice);\n\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\n        PositionData storage positionData = positions[msg.sender];\n        if (_getCollateral(positionData.rawCollateral).isGreaterThan(0)) {\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying.\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral = positionData.tokensOutstanding.mul(expiryPrice);\n            FixedPoint.Unsigned memory positionCollateral = _getCollateral(positionData.rawCollateral);\n\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\n            FixedPoint.Unsigned memory positionRedeemableCollateral = tokenDebtValueInCollateral.isLessThan(\n                positionCollateral\n            )\n                ? positionCollateral.sub(tokenDebtValueInCollateral)\n                : FixedPoint.Unsigned(0);\n\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\n            totalRedeemableCollateral = totalRedeemableCollateral.add(positionRedeemableCollateral);\n\n            // Reset the position state as all the value has been removed after settlement.\n            delete positions[msg.sender];\n        }\n\n        // Take the min of the remaining collateral and the collateral \"owed\". If the contract is undercapitalized,\n        // the caller will get as much collateral as the contract can pay out.\n        FixedPoint.Unsigned memory payout = FixedPoint.min(\n            _getCollateral(rawTotalPositionCollateral),\n            totalRedeemableCollateral\n        );\n\n        // Decrement total contract collateral and outstanding debt.\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\n\n        // Transfer tokens \u0026 collateral and burn the redeemed tokens.\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensToRedeem.rawValue);\n        tokenCurrency.burn(tokensToRedeem.rawValue);\n\n        emit SettleExpiredPosition(msg.sender, amountWithdrawn.rawValue, tokensToRedeem.rawValue);\n    }\n\n    /****************************************\n     *        GLOBAL STATE FUNCTIONS        *\n     ****************************************/\n\n    /**\n     * @notice Locks contract state in expired and requests oracle price.\n     * @dev this function can only be called once the contract is expired and cant be re-called\n     * due to the state modifiers applied on it.\n     */\n    function expire() external onlyPostExpiration() onlyOpenState() fees() {\n        contractState = ContractState.ExpiredPriceRequested;\n\n        // The final fee for this request is paid out of the contract rather than by the caller.\n        _payFinalFees(address(this), _computeFinalFees());\n        _requestOraclePrice(expirationTimestamp);\n\n        emit ContractExpired(msg.sender);\n    }\n\n    /**\n     * @notice Premature contract settlement under emergency circumstances.\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\n     * to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested`\n     * which prevents re-entry into this function or the `expire` function. No fees are paid when calling\n     * `emergencyShutdown` as the governor who would call the function would also receive the fees.\n     */\n    function emergencyShutdown() external override onlyPreExpiration() onlyOpenState() {\n        require(msg.sender == _getFinancialContractsAdminAddress());\n\n        contractState = ContractState.ExpiredPriceRequested;\n        // Expiratory time now becomes the current time (emergency shutdown time).\n        // Price requested at this time stamp. `settleExpired` can now withdraw at this timestamp.\n        uint256 oldExpirationTimestamp = expirationTimestamp;\n        expirationTimestamp = getCurrentTime();\n        _requestOraclePrice(expirationTimestamp);\n\n        emit EmergencyShutdown(msg.sender, oldExpirationTimestamp, expirationTimestamp);\n    }\n\n    // TODO is this how we want this function to be implemented?\n    function remargin() external override onlyPreExpiration() {\n        return;\n    }\n\n    /**\n     * @notice Accessor method for a sponsor\u0027s collateral.\n     * @dev This is necessary because the struct returned by the positions() method shows\n     * rawCollateral, which isn\u0027t a user-readable value.\n     * @param sponsor address whose collateral amount is retrieved.\n     */\n    function getCollateral(address sponsor) external view returns (FixedPoint.Unsigned memory) {\n        // Note: do a direct access to avoid the validity check.\n        return _getCollateral(positions[sponsor].rawCollateral);\n    }\n\n    /**\n     * @notice Accessor method for the total collateral stored within the PricelessPositionManager.\n     */\n    function totalPositionCollateral() external view returns (FixedPoint.Unsigned memory) {\n        return _getCollateral(rawTotalPositionCollateral);\n    }\n\n    /**\n     * @dev This overrides pfc() so the PricelessPositionManager can report its profit from corruption.\n     */\n    function pfc() public virtual override view returns (FixedPoint.Unsigned memory) {\n        return _getCollateral(rawTotalPositionCollateral);\n    }\n\n    /****************************************\n     *          INTERNAL FUNCTIONS         *\n     ****************************************/\n\n    function _reduceSponsorPosition(\n        address sponsor,\n        FixedPoint.Unsigned memory tokensToRemove,\n        FixedPoint.Unsigned memory collateralToRemove,\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\n    ) internal {\n        PositionData storage positionData = _getPositionData(sponsor);\n\n        // If the entire position is being removed, delete it instead.\n        if (\n            tokensToRemove.isEqual(positionData.tokensOutstanding) \u0026\u0026\n            _getCollateral(positionData.rawCollateral).isEqual(collateralToRemove)\n        ) {\n            _deleteSponsorPosition(sponsor);\n            return;\n        }\n\n        // Decrease the sponsor\u0027s collateral, tokens, and withdrawal request.\n        _removeCollateral(positionData.rawCollateral, collateralToRemove);\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(tokensToRemove);\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\n        positionData.tokensOutstanding = newTokenCount;\n\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount.sub(withdrawalAmountToRemove);\n\n        // Decrease the contract\u0027s global counters of collateral and tokens.\n        _removeCollateral(rawTotalPositionCollateral, collateralToRemove);\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\n    }\n\n    function _deleteSponsorPosition(address sponsor) internal returns (FixedPoint.Unsigned memory) {\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\n\n        FixedPoint.Unsigned memory startingGlobalCollateral = _getCollateral(rawTotalPositionCollateral);\n\n        // Remove the collateral and outstanding from the overall total position.\n        FixedPoint.Unsigned memory remainingRawCollateral = positionToLiquidate.rawCollateral;\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(remainingRawCollateral);\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\n\n        // Reset the sponsors position to have zero outstanding and collateral.\n        delete positions[sponsor];\n\n        emit EndedSponsor(sponsor);\n\n        // Return fee-adjusted amount of collateral deleted from position.\n        return startingGlobalCollateral.sub(_getCollateral(rawTotalPositionCollateral));\n    }\n\n    function _getPositionData(address sponsor)\n        internal\n        view\n        onlyCollateralizedPosition(sponsor)\n        returns (PositionData storage)\n    {\n        return positions[sponsor];\n    }\n\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n\n    function _getOracle() internal view returns (OracleInterface) {\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\n    }\n\n    function _getStoreAddress() internal view returns (address) {\n        return finder.getImplementationAddress(OracleInterfaces.Store);\n    }\n\n    function _getFinancialContractsAdminAddress() internal view returns (address) {\n        return finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\n    }\n\n    function _requestOraclePrice(uint256 requestedTime) internal {\n        OracleInterface oracle = _getOracle();\n        oracle.requestPrice(priceIdentifer, requestedTime);\n    }\n\n    function _getOraclePrice(uint256 requestedTime) internal view returns (FixedPoint.Unsigned memory) {\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\n        OracleInterface oracle = _getOracle();\n        require(oracle.hasPrice(priceIdentifer, requestedTime), \"Can only get a price once the DVM has resolved\");\n        int256 oraclePrice = oracle.getPrice(priceIdentifer, requestedTime);\n\n        // For now we don\u0027t want to deal with negative prices in positions.\n        if (oraclePrice \u003c 0) {\n            oraclePrice = 0;\n        }\n        return FixedPoint.Unsigned(_safeUintCast(oraclePrice));\n    }\n\n    function _checkPositionCollateralization(PositionData storage positionData) private view returns (bool) {\n        return _checkCollateralization(_getCollateral(positionData.rawCollateral), positionData.tokensOutstanding);\n    }\n\n    function _checkCollateralization(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        view\n        returns (bool)\n    {\n        FixedPoint.Unsigned memory global = _getCollateralizationRatio(\n            _getCollateral(rawTotalPositionCollateral),\n            totalTokensOutstanding\n        );\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(collateral, numTokens);\n        return !global.isGreaterThan(thisChange);\n    }\n\n    function _getCollateralizationRatio(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\n        private\n        pure\n        returns (FixedPoint.Unsigned memory ratio)\n    {\n        if (!numTokens.isGreaterThan(0)) {\n            return FixedPoint.fromUnscaledUint(0);\n        } else {\n            return collateral.div(numTokens);\n        }\n    }\n\n    function _safeUintCast(int256 value) private pure returns (uint256 result) {\n        require(value \u003e= 0, \"uint256 underflow\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev These internal functions are supposed to act identically to modifiers, but re-used modifiers\n     * unnecessarily increase contract bytecode size.\n     * source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\n     */\n    function _onlyOpenState() internal view {\n        require(contractState == ContractState.Open);\n    }\n\n    function _onlyPreExpiration() internal view {\n        require(getCurrentTime() \u003c expirationTimestamp);\n    }\n\n    function _onlyPostExpiration() internal view {\n        require(getCurrentTime() \u003e= expirationTimestamp);\n    }\n\n    function _onlyCollateralizedPosition(address sponsor) internal view {\n        require(_getCollateral(positions[sponsor].rawCollateral).isGreaterThan(0));\n    }\n}\n"},"PullPayment.sol":{"content":"pragma solidity ^0.6.2;\n\nimport \"./Escrow.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn\u0027t interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity\u0027s `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\ncontract PullPayment {\n    Escrow private _escrow;\n\n    constructor () internal {\n        _escrow = new Escrow();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor\u0027s address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        // solhint-disable-previous-line no-unused-vars\n\n        // TODO: remove the previous linter directive once\n        // https://github.com/protofire/solhint/issues/170 is fixed\n        _escrow.deposit{ value: amount }(dest);\n    }\n}\n"},"ReentrancyChecker.sol":{"content":"pragma solidity ^0.6.0;\n\n\n// The Reentrancy Checker causes failures if it is successfully able to re-enter a contract.\n// How to use:\n// 1. Call setTransactionData with the transaction data you want the Reentrancy Checker to reenter the calling\n//    contract with.\n// 2. Get the calling contract to call into the reentrancy checker with any call. The fallback function will receive\n//    this call and reenter the contract with the transaction data provided in 1. If that reentrancy call does not\n//    revert, then the reentrancy checker reverts the initial call, likely causeing the entire transaction to revert.\n//\n// Note: the reentrancy checker has a guard to prevent an infinite cycle of reentrancy. Inifinite cycles will run out\n// of gas in all cases, potentially causing a revert when the contract is adequately protected from reentrancy.\ncontract ReentrancyChecker {\n    bytes public txnData;\n    bool hasBeenCalled;\n\n    // Used to prevent infinite cycles where the reentrancy is cycled forever.\n    modifier skipIfReentered {\n        if (hasBeenCalled) {\n            return;\n        }\n        hasBeenCalled = true;\n        _;\n        hasBeenCalled = false;\n    }\n\n    function setTransactionData(bytes memory _txnData) public {\n        txnData = _txnData;\n    }\n\n    function _executeCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) private returns (bool success) {\n        // Mostly copied from:\n        // solhint-disable-next-line max-line-length\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n            let inputData := add(data, 0x20)\n            let inputDataSize := mload(data)\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\n        }\n    }\n\n    fallback() external skipIfReentered {\n        // Attampt to re-enter with the set txnData.\n        bool success = _executeCall(msg.sender, 0, txnData);\n\n        // Fail if the call succeeds because that means the re-entrancy was successful.\n        require(!success, \"Re-entrancy was successful\");\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction\u0027s gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n"},"RefundEscrow.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ConditionalEscrow.sol\";\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n * parties.\n * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n * @dev The owner account (that is, the contract that instantiates this\n * contract) may deposit, close the deposit period, and allow for either\n * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n * with `RefundEscrow` will be made through the owner contract.\n */\ncontract RefundEscrow is ConditionalEscrow {\n    enum State { Active, Refunding, Closed }\n\n    event RefundsClosed();\n    event RefundsEnabled();\n\n    State private _state;\n    address payable private _beneficiary;\n\n    /**\n     * @dev Constructor.\n     * @param beneficiary The beneficiary of the deposits.\n     */\n    constructor (address payable beneficiary) public {\n        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n        _beneficiary = beneficiary;\n        _state = State.Active;\n    }\n\n    /**\n     * @return The current state of the escrow.\n     */\n    function state() public view returns (State) {\n        return _state;\n    }\n\n    /**\n     * @return The beneficiary of the escrow.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @dev Stores funds that may later be refunded.\n     * @param refundee The address funds will be sent to if a refund occurs.\n     */\n    function deposit(address refundee) public payable virtual override {\n        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n        super.deposit(refundee);\n    }\n\n    /**\n     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n     * further deposits.\n     */\n    function close() public onlyOwner virtual {\n        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n        _state = State.Closed;\n        emit RefundsClosed();\n    }\n\n    /**\n     * @dev Allows for refunds to take place, rejecting further deposits.\n     */\n    function enableRefunds() public onlyOwner virtual {\n        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n        _state = State.Refunding;\n        emit RefundsEnabled();\n    }\n\n    /**\n     * @dev Withdraws the beneficiary\u0027s funds.\n     */\n    function beneficiaryWithdraw() public virtual {\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n        _beneficiary.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n     * \u0027payee\u0027 argument, but we ignore it here since the condition is global, not per-payee.\n     */\n    function withdrawalAllowed(address) public view override returns (bool) {\n        return _state == State.Refunding;\n    }\n}\n"},"Registry.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./MultiRole.sol\";\nimport \"./RegistryInterface.sol\";\n\nimport \"./SafeMath.sol\";\n\n\n/**\n * @title Registry for financial contracts and approved financial contract creators.\n * @dev Maintains a whitelist of financial contract creators that are allowed\n * to register new financial contracts and stores party members of a financial contract.\n */\ncontract Registry is RegistryInterface, MultiRole {\n    using SafeMath for uint256;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles {\n        Owner, // The owner manages the set of ContractCreators.\n        ContractCreator // Can register financial contracts.\n    }\n\n    // This enum is required because a `WasValid` state is required\n    // to ensure that financial contracts cannot be re-registered.\n    enum Validity { Invalid, Valid }\n\n    // Local information about a contract.\n    struct FinancialContract {\n        Validity valid;\n        uint128 index;\n    }\n\n    struct Party {\n        address[] contracts; // Each financial contract address is stored in this array.\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\n        mapping(address =\u003e uint256) contractIndex;\n    }\n\n    // Array of all contracts that are approved to use the UMA Oracle.\n    address[] public registeredContracts;\n\n    // Map of financial contract contracts to the associated FinancialContract struct.\n    mapping(address =\u003e FinancialContract) public contractMap;\n\n    // Map each party member to their their associated Party struct.\n    mapping(address =\u003e Party) private partyMap;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\n    event PartyAdded(address indexed contractAddress, address indexed party);\n    event PartyRemoved(address indexed contractAddress, address indexed party);\n\n    /**\n     * @notice Construct the Registry contract.\n     */\n    constructor() public {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        // Start with no contract creators registered.\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\n    }\n\n    /****************************************\n     *        REGISTRATION FUNCTIONS        *\n     ****************************************/\n\n    /**\n     * @notice Registers a new financial contract.\n     * @dev Only authorized contract creators can call this method.\n     * @param parties array of addresses who become parties in the contract.\n     * @param contractAddress address of the contract against which the parties are registered.\n     */\n    function registerContract(address[] calldata parties, address contractAddress)\n        external\n        override\n        onlyRoleHolder(uint256(Roles.ContractCreator))\n    {\n        FinancialContract storage financialContract = contractMap[contractAddress];\n        require(contractMap[contractAddress].valid == Validity.Invalid, \"Can only register once\");\n\n        // Store contract address as a registered contract.\n        registeredContracts.push(contractAddress);\n\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\n        financialContract.index = uint128(registeredContracts.length.sub(1));\n\n        // For all parties in the array add them to the contract\u0027s parties.\n        financialContract.valid = Validity.Valid;\n        for (uint256 i = 0; i \u003c parties.length; i = i.add(1)) {\n            _addPartyToContract(parties[i], contractAddress);\n        }\n\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\n    }\n\n    /**\n     * @notice Adds a party member to the calling contract.\n     * @dev msg.sender will be used to determine the contract that this party is added to.\n     * @param party new party for the calling contract.\n     */\n    function addPartyToContract(address party) external override {\n        address contractAddress = msg.sender;\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Can only add to valid contract\");\n\n        _addPartyToContract(party, contractAddress);\n    }\n\n    /**\n     * @notice Removes a party member from the calling contract.\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\n     * @param partyAddress address to be removed from the calling contract.\n     */\n    function removePartyFromContract(address partyAddress) external override {\n        address contractAddress = msg.sender;\n        Party storage party = partyMap[partyAddress];\n        uint256 numberOfContracts = party.contracts.length;\n\n        require(numberOfContracts != 0, \"Party has no contracts\");\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Remove only from valid contract\");\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \"Can only remove existing party\");\n\n        // Index of the current location of the contract to remove.\n        uint256 deleteIndex = party.contractIndex[contractAddress];\n\n        // Store the last contract\u0027s address to update the lookup map.\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\n\n        // Swap the contract to be removed with the last contract.\n        party.contracts[deleteIndex] = lastContractAddress;\n\n        // Update the lookup index with the new location.\n        party.contractIndex[lastContractAddress] = deleteIndex;\n\n        // Pop the last contract from the array and update the lookup map.\n        party.contracts.pop();\n        delete party.contractIndex[contractAddress];\n\n        emit PartyRemoved(contractAddress, partyAddress);\n    }\n\n    /****************************************\n     *         REGISTRY STATE GETTERS       *\n     ****************************************/\n\n    /**\n     * @notice Returns whether the contract has been registered with the registry.\n     * @dev If it is registered, it is an authorized participant in the UMA system.\n     * @param contractAddress address of the financial contract.\n     * @return bool indicates whether the contract is registered.\n     */\n    function isContractRegistered(address contractAddress) external override view returns (bool) {\n        return contractMap[contractAddress].valid == Validity.Valid;\n    }\n\n    /**\n     * @notice Returns a list of all contracts that are associated with a particular party.\n     * @param party address of the party.\n     * @return an array of the contracts the party is registered to.\n     */\n    function getRegisteredContracts(address party) external override view returns (address[] memory) {\n        return partyMap[party].contracts;\n    }\n\n    /**\n     * @notice Returns all registered contracts.\n     * @return all registered contract addresses within the system.\n     */\n    function getAllRegisteredContracts() external override view returns (address[] memory) {\n        return registeredContracts;\n    }\n\n    /**\n     * @notice checks if an address is a party of a contract.\n     * @param party party to check.\n     * @param contractAddress address to check against the party.\n     * @return bool indicating if the address is a party of the contract.\n     */\n    function isPartyMemberOfContract(address party, address contractAddress) public override view returns (bool) {\n        uint256 index = partyMap[party].contractIndex[contractAddress];\n        return partyMap[party].contracts.length \u003e index \u0026\u0026 partyMap[party].contracts[index] == contractAddress;\n    }\n\n    /****************************************\n     *           INTERNAL FUNCTIONS         *\n     ****************************************/\n\n    function _addPartyToContract(address party, address contractAddress) internal {\n        require(!isPartyMemberOfContract(party, contractAddress), \"Can only register a party once\");\n        uint256 contractIndex = partyMap[party].contracts.length;\n        partyMap[party].contracts.push(contractAddress);\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\n\n        emit PartyAdded(contractAddress, party);\n    }\n}\n"},"RegistryInterface.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Interface for a registry of contracts and contract creators.\n */\ninterface RegistryInterface {\n    /**\n     * @notice Registers a new contract.\n     * @dev Only authorized contract creators can call this method.\n     * @param parties an array of addresses who become parties in the contract.\n     * @param contractAddress defines the address of the deployed contract.\n     */\n    function registerContract(address[] calldata parties, address contractAddress) external;\n\n    /**\n     * @notice Returns whether the contract has been registered with the registry.\n     * @dev If it is registered, it is an authorized participant in the UMA system.\n     * @param contractAddress address of the contract.\n     * @return bool indicates whether the contract is registered.\n     */\n    function isContractRegistered(address contractAddress) external view returns (bool);\n\n    /**\n     * @notice Returns a list of all contracts that are associated with a particular party.\n     * @param party address of the party.\n     * @return an array of the contracts the party is registered to.\n     */\n    function getRegisteredContracts(address party) external view returns (address[] memory);\n\n    /**\n     * @notice Returns all registered contracts.\n     * @return all registered contract addresses within the system.\n     */\n    function getAllRegisteredContracts() external view returns (address[] memory);\n\n    /**\n     * @notice Adds a party to the calling contract.\n     * @dev msg.sender must be the contract to which the party member is added.\n     * @param party address to be added to the contract.\n     */\n    function addPartyToContract(address party) external;\n\n    /**\n     * @notice Removes a party member to the calling contract.\n     * @dev msg.sender must be the contract to which the party member is added.\n     * @param party address to be removed from the contract.\n     */\n    function removePartyFromContract(address party) external;\n\n    /**\n     * @notice checks if an address is a party in a contract.\n     * @param party party to check.\n     * @param contractAddress address to check against the party.\n     * @return bool indicating if the address is a party of the contract.\n     */\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\n}\n"},"ResultComputation.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./FixedPoint.sol\";\n\n\n/**\n * @title Computes vote results.\n * @dev The result is the mode of the added votes. Otherwise, the vote is unresolved.\n */\nlibrary ResultComputation {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *   INTERNAL LIBRARY DATA STRUCTURE    *\n     ****************************************/\n\n    struct Data {\n        // Maps price to number of tokens that voted for that price.\n        mapping(int256 =\u003e FixedPoint.Unsigned) voteFrequency;\n        // The total votes that have been added.\n        FixedPoint.Unsigned totalVotes;\n        // The price that is the current mode, i.e., the price with the highest frequency in `voteFrequency`.\n        int256 currentMode;\n    }\n\n    /****************************************\n     *            VOTING FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Adds a new vote to be used when computing the result.\n     * @param data contains information to which the vote is applied.\n     * @param votePrice value specified in the vote for the given `numberTokens`.\n     * @param numberTokens number of tokens that voted on the `votePrice`.\n     */\n    function addVote(\n        Data storage data,\n        int256 votePrice,\n        FixedPoint.Unsigned memory numberTokens\n    ) internal {\n        data.totalVotes = data.totalVotes.add(numberTokens);\n        data.voteFrequency[votePrice] = data.voteFrequency[votePrice].add(numberTokens);\n        if (\n            votePrice != data.currentMode \u0026\u0026\n            data.voteFrequency[votePrice].isGreaterThan(data.voteFrequency[data.currentMode])\n        ) {\n            data.currentMode = votePrice;\n        }\n    }\n\n    /****************************************\n     *        VOTING STATE GETTERS          *\n     ****************************************/\n\n    /**\n     * @notice Returns whether the result is resolved, and if so, what value it resolved to.\n     * @dev `price` should be ignored if `isResolved` is false.\n     * @param data contains information against which the `minVoteThreshold` is applied.\n     * @param minVoteThreshold min (exclusive) number of tokens that must have voted for the result to be valid. Can be\n     * used to enforce a minimum voter participation rate, regardless of how the votes are distributed.\n     * @return isResolved indicates if the price has been resolved correctly.\n     * @return price the price that the dvm resolved to.\n     */\n    function getResolvedPrice(Data storage data, FixedPoint.Unsigned memory minVoteThreshold)\n        internal\n        view\n        returns (bool isResolved, int256 price)\n    {\n        FixedPoint.Unsigned memory modeThreshold = FixedPoint.fromUnscaledUint(50).div(100);\n\n        if (\n            data.totalVotes.isGreaterThan(minVoteThreshold) \u0026\u0026\n            data.voteFrequency[data.currentMode].div(data.totalVotes).isGreaterThan(modeThreshold)\n        ) {\n            // `modeThreshold` and `minVoteThreshold` are exceeded, so the current mode is the resolved price.\n            isResolved = true;\n            price = data.currentMode;\n        } else {\n            isResolved = false;\n        }\n    }\n\n    /**\n     * @notice Checks whether a `voteHash` is considered correct.\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\n     * @param data contains information against which the `voteHash` is checked.\n     * @param voteHash committed hash submitted by the voter.\n     * @return bool true if the vote was correct.\n     */\n    function wasVoteCorrect(Data storage data, bytes32 voteHash) internal view returns (bool) {\n        return voteHash == keccak256(abi.encode(data.currentMode));\n    }\n\n    /**\n     * @notice Gets the total number of tokens whose votes are considered correct.\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\n     * @param data contains all votes against which the correctly voted tokens are counted.\n     * @return FixedPoint.Unsigned which indicates the frequency of the correctly voted tokens.\n     */\n    function getTotalCorrectlyVotedTokens(Data storage data) internal view returns (FixedPoint.Unsigned memory) {\n        return data.voteFrequency[data.currentMode];\n    }\n}\n"},"ResultComputationTest.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./ResultComputation.sol\";\nimport \"./FixedPoint.sol\";\n\n\n// Wraps the library ResultComputation for testing purposes.\ncontract ResultComputationTest {\n    using ResultComputation for ResultComputation.Data;\n\n    ResultComputation.Data public data;\n\n    function wrapAddVote(int256 votePrice, uint256 numberTokens) external {\n        data.addVote(votePrice, FixedPoint.Unsigned(numberTokens));\n    }\n\n    function wrapGetResolvedPrice(uint256 minVoteThreshold) external view returns (bool isResolved, int256 price) {\n        return data.getResolvedPrice(FixedPoint.Unsigned(minVoteThreshold));\n    }\n\n    function wrapWasVoteCorrect(bytes32 revealHash) external view returns (bool) {\n        return data.wasVoteCorrect(revealHash);\n    }\n\n    function wrapGetTotalCorrectlyVotedTokens() external view returns (uint256) {\n        return data.getTotalCorrectlyVotedTokens().rawValue;\n    }\n}\n"},"ReturnCalculatorInterface.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Computes the synthetic asset return based on the underlying asset\u0027s return.\n * @dev Different implementations can compute different return structures.\n */\ninterface ReturnCalculatorInterface {\n    /**\n     * @notice Computes the synthetic asset return when the underlying asset price changes from `oldPrice` to\n     * `newPrice`.\n     * @dev This can be implemented in many different ways, but a simple one would just be levering (or multiplying)\n     * the return by some fixed integer.\n     */\n    function computeReturn(int256 oldPrice, int256 newPrice) external view returns (int256 assetReturn);\n\n    /**\n     * @notice Gets the effective leverage for the return calculator.\n     * @dev If there is no sensible leverage value for a return calculator, this method should return 1.\n     */\n    function leverage() external view returns (int256 _leverage);\n}\n"},"SafeCast.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity\u0027s uintXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n *\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity\u0027s `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value \u003c 2**128, \"SafeCast: value doesn\\\u0027t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity\u0027s `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value \u003c 2**64, \"SafeCast: value doesn\\\u0027t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity\u0027s `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value \u003c 2**32, \"SafeCast: value doesn\\\u0027t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity\u0027s `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value \u003c 2**16, \"SafeCast: value doesn\\\u0027t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity\u0027s `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value \u003c 2**8, \"SafeCast: value doesn\\\u0027t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value \u003e= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value \u003c 2**255, \"SafeCast: value doesn\u0027t fit in an int256\");\n        return int256(value);\n    }\n}\n"},"SafeERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"SignedSafeMath.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Multiplies two signed integers, reverts on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 \u0026\u0026 b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 \u0026\u0026 a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two signed integers, reverts on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two signed integers, reverts on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"},"Store.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./FixedPoint.sol\";\nimport \"./MultiRole.sol\";\nimport \"./Withdrawable.sol\";\nimport \"./Testable.sol\";\nimport \"./StoreInterface.sol\";\n\n\n/**\n * @title An implementation of Store that can accept Oracle fees in ETH or any arbitrary ERC20 token.\n */\ncontract Store is StoreInterface, Withdrawable, Testable {\n    using SafeMath for uint256;\n    using FixedPoint for FixedPoint.Unsigned;\n    using FixedPoint for uint256;\n    using SafeERC20 for IERC20;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    enum Roles { Owner, Withdrawer }\n\n    FixedPoint.Unsigned public fixedOracleFeePerSecondPerPfc; // Percentage of 1 E.g., .1 is 10% Oracle fee.\n    FixedPoint.Unsigned public weeklyDelayFeePerSecondPerPfc; // Percentage of 1 E.g., .1 is 10% weekly delay fee.\n\n    mapping(address =\u003e FixedPoint.Unsigned) public finalFees;\n    uint256 public constant SECONDS_PER_WEEK = 604800;\n\n    /****************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event NewFixedOracleFeePerSecondPerPfc(FixedPoint.Unsigned newOracleFee);\n    event NewWeeklyDelayFeePerSecondPerPfc(FixedPoint.Unsigned newWeeklyDelayFeePerSecondPerPfc);\n    event NewFinalFee(FixedPoint.Unsigned newFinalFee);\n\n    /**\n     * @notice Construct the Store contract.\n     */\n    constructor(\n        FixedPoint.Unsigned memory _fixedOracleFeePerSecondPerPfc,\n        FixedPoint.Unsigned memory _weeklyDelayFeePerSecondPerPfc,\n        address _timerAddress\n    ) public Testable(_timerAddress) {\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdrawer), uint256(Roles.Owner), msg.sender);\n        setFixedOracleFeePerSecondPerPfc(_fixedOracleFeePerSecondPerPfc);\n        setWeeklyDelayFeePerSecondPerPfc(_weeklyDelayFeePerSecondPerPfc);\n    }\n\n    /****************************************\n     *  ORACLE FEE CALCULATION AND PAYMENT  *\n     ****************************************/\n\n    /**\n     * @notice Pays Oracle fees in ETH to the store.\n     * @dev To be used by contracts whose margin currency is ETH.\n     */\n    function payOracleFees() external override payable {\n        require(msg.value \u003e 0, \"Value sent can\u0027t be zero\");\n    }\n\n    /**\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\n     * @param erc20Address address of the ERC20 token used to pay the fee.\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\n     */\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external override {\n        IERC20 erc20 = IERC20(erc20Address);\n        require(amount.isGreaterThan(0), \"Amount sent can\u0027t be zero\");\n        erc20.safeTransferFrom(msg.sender, address(this), amount.rawValue);\n    }\n\n    /**\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\n     * @dev The late penalty is similar to the regular fee in that is is charged per second over the period between\n     * startTime and endTime. The late penalty percentage increases over time as follows:\n     * - 0-1 week since startTime: no late penalty\n     * - 1-2 weeks since startTime: 1x late penalty percentage is applied\n     * - 2-3 weeks since startTime: 2x late penalty percentage is applied\n     * - ...\n     * @param startTime defines the beginning time from which the fee is paid.\n     * @param endTime end time until which the fee is paid.\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\n     * @return latePenalty penalty percentage, if any, for paying the fee after the deadline.\n     */\n    function computeRegularFee(\n        uint256 startTime,\n        uint256 endTime,\n        FixedPoint.Unsigned calldata pfc\n    ) external override view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty) {\n        uint256 timeDiff = endTime.sub(startTime);\n\n        // Multiply by the unscaled `timeDiff` first, to get more accurate results.\n        regularFee = pfc.mul(timeDiff).mul(fixedOracleFeePerSecondPerPfc);\n\n        // Compute how long ago the start time was to compute the delay penalty.\n        uint256 paymentDelay = getCurrentTime().sub(startTime);\n\n        // Compute the additional percentage (per second) that will be charged because of the penalty.\n        // Note: if less than a week has gone by since the startTime, paymentDelay / SECONDS_PER_WEEK will truncate to\n        // 0, causing no penalty to be charged.\n        FixedPoint.Unsigned memory penaltyPercentagePerSecond = weeklyDelayFeePerSecondPerPfc.mul(\n            paymentDelay.div(SECONDS_PER_WEEK)\n        );\n\n        // Apply the penaltyPercentagePerSecond to the payment period.\n        latePenalty = pfc.mul(timeDiff).mul(penaltyPercentagePerSecond);\n    }\n\n    /**\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\n     * @param currency token used to pay the final fee.\n     * @return finalFee amount due denominated in units of `currency`.\n     */\n    function computeFinalFee(address currency) external override view returns (FixedPoint.Unsigned memory) {\n        return finalFees[currency];\n    }\n\n    /****************************************\n     *   ADMIN STATE MODIFYING FUNCTIONS    *\n     ****************************************/\n\n    /**\n     * @notice Sets a new oracle fee per second.\n     * @param newFixedOracleFeePerSecondPerPfc new fee per second charged to use the oracle.\n     */\n    function setFixedOracleFeePerSecondPerPfc(FixedPoint.Unsigned memory newFixedOracleFeePerSecondPerPfc)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        // Oracle fees at or over 100% don\u0027t make sense.\n        require(newFixedOracleFeePerSecondPerPfc.isLessThan(1), \"Fee must be \u003c 100% per second.\");\n        fixedOracleFeePerSecondPerPfc = newFixedOracleFeePerSecondPerPfc;\n        emit NewFixedOracleFeePerSecondPerPfc(newFixedOracleFeePerSecondPerPfc);\n    }\n\n    /**\n     * @notice Sets a new weekly delay fee.\n     * @param newWeeklyDelayFeePerSecondPerPfc fee escalation per week of late fee payment.\n     */\n    function setWeeklyDelayFeePerSecondPerPfc(FixedPoint.Unsigned memory newWeeklyDelayFeePerSecondPerPfc)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        require(newWeeklyDelayFeePerSecondPerPfc.isLessThan(1), \"weekly delay fee must be \u003c 100%\");\n        weeklyDelayFeePerSecondPerPfc = newWeeklyDelayFeePerSecondPerPfc;\n        emit NewWeeklyDelayFeePerSecondPerPfc(newWeeklyDelayFeePerSecondPerPfc);\n    }\n\n    /**\n     * @notice Sets a new final fee for a particular currency.\n     * @param currency defines the token currency used to pay the final fee.\n     * @param newFinalFee final fee amount.\n     */\n    function setFinalFee(address currency, FixedPoint.Unsigned memory newFinalFee)\n        public\n        onlyRoleHolder(uint256(Roles.Owner))\n    {\n        finalFees[currency] = newFinalFee;\n        emit NewFinalFee(newFinalFee);\n    }\n}\n"},"StoreInterface.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC20.sol\";\nimport \"./FixedPoint.sol\";\n\n\n/**\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\n */\ninterface StoreInterface {\n    /**\n     * @notice Pays Oracle fees in ETH to the store.\n     * @dev To be used by contracts whose margin currency is ETH.\n     */\n    function payOracleFees() external payable;\n\n    /**\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\n     * @param erc20Address address of the ERC20 token used to pay the fee.\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\n     */\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\n\n    /**\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\n     * @param startTime defines the beginning time from which the fee is paid.\n     * @param endTime end time until which the fee is paid.\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\n     * @return latePenalty for paying the fee after the deadline.\n     */\n    function computeRegularFee(\n        uint256 startTime,\n        uint256 endTime,\n        FixedPoint.Unsigned calldata pfc\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\n\n    /**\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\n     * @param currency token used to pay the final fee.\n     * @return finalFee amount due.\n     */\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\n}\n"},"Strings.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"},"SyntheticToken.sol":{"content":"pragma solidity ^0.6.0;\nimport \"./ExpandedERC20.sol\";\n\n\n/**\n * @title Burnable and mintable ERC20.\n * @dev The contract deployer will initially be the only minter and burner as well as the owner  who\n * is capable of adding new roles.\n */\n\ncontract SyntheticToken is ExpandedERC20 {\n    /**\n     * @notice Constructs the SyntheticToken.\n     * @param tokenName The name which describes the new token.\n     * @param tokenSymbol The ticker abbreviation of the name. Ideally \u003c 5 chars.\n     * @param tokenDecimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals\n    ) public ExpandedERC20(tokenName, tokenSymbol, tokenDecimals) {}\n\n    /**\n     * @notice Add Minter role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Minter role is added.\n     */\n    function addMinter(address account) external {\n        addMember(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Remove Minter role from account.\n     * @dev The caller must have the Owner role.\n     * @param account The address from which the Minter role is removed.\n     */\n    function removeMinter(address account) external {\n        removeMember(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Add Burner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The address to which the Burner role is added.\n     */\n    function addBurner(address account) external {\n        addMember(uint256(Roles.Burner), account);\n    }\n\n    /**\n     * @notice Removes Burner role from account.\n     * @dev The caller must have the Owner role.\n     * @param account The address from which the Burner role is removed.\n     */\n    function removeBurner(address account) external {\n        removeMember(uint256(Roles.Burner), account);\n    }\n\n    /**\n     * @notice Reset Owner role to account.\n     * @dev The caller must have the Owner role.\n     * @param account The new holder of the Owner role.\n     */\n    function resetOwner(address account) external {\n        resetMember(uint256(Roles.Owner), account);\n    }\n\n    /**\n     * @notice Checks if a given account holds the Minter role.\n     * @param account The address which is checked for the Minter role.\n     * @return bool True if the provided account is a Minter.\n     */\n    function isMinter(address account) public view returns (bool) {\n        return holdsRole(uint256(Roles.Minter), account);\n    }\n\n    /**\n     * @notice Checks if a given account holds the Burner role.\n     * @param account The address which is checked for the Burner role.\n     * @return bool True if the provided account is a Burner.\n     */\n    function isBurner(address account) public view returns (bool) {\n        return holdsRole(uint256(Roles.Burner), account);\n    }\n}\n"},"Testable.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Timer.sol\";\n\n\n/**\n * @title Base class that provides time overrides, but only if being run in test mode.\n */\nabstract contract Testable {\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0.\n    // Note: this variable should be set on construction and never modified.\n    address public timerAddress;\n\n    /**\n     * @notice Constructs the Testable contract. Called by child contracts.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(address _timerAddress) internal {\n        timerAddress = _timerAddress;\n    }\n\n    /**\n     * @notice Reverts if not running in test mode.\n     */\n    modifier onlyIfTest {\n        require(timerAddress != address(0x0));\n        _;\n    }\n\n    /**\n     * @notice Sets the current time.\n     * @dev Will revert if not running in test mode.\n     * @param time timestamp to set current Tesable time to.\n     */\n    function setCurrentTime(uint256 time) external onlyIfTest {\n        Timer(timerAddress).setCurrentTime(time);\n    }\n\n    /**\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\n     * Otherwise, it will return the block timestamp.\n     * @return uint for the current Testable timestamp.\n     */\n    function getCurrentTime() public view returns (uint256) {\n        if (timerAddress != address(0x0)) {\n            return Timer(timerAddress).getCurrentTime();\n        } else {\n            return now; // solhint-disable-line not-rely-on-time\n        }\n    }\n}\n"},"TestableTest.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Testable.sol\";\n\n\n// TestableTest is derived from the abstract contract Testable for testing purposes.\ncontract TestableTest is Testable {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _timerAddress) public Testable(_timerAddress) {}\n\n    function getTestableTimeAndBlockTime() external view returns (uint256 testableTime, uint256 blockTime) {\n        // solhint-disable-next-line not-rely-on-time\n        return (getCurrentTime(), now);\n    }\n}\n"},"TestnetERC20.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\n\n\n/**\n * @title An implementation of ERC20 with the same interface as the Compound project\u0027s testnet tokens (mainly DAI)\n * @dev This contract can be deployed or the interface can be used to communicate with Compound\u0027s ERC20 tokens.  Note:\n * this token should never be used to store real value since it allows permissionless minting.\n */\ncontract TestnetERC20 is ERC20 {\n    /**\n     * @notice Constructs the TestnetERC20.\n     * @param _name The name which describes the new token.\n     * @param _symbol The ticker abbreviation of the name. Ideally \u003c 5 chars.\n     * @param _decimals The number of decimals to define token precision.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) public ERC20(_name, _symbol) {\n        _setupDecimals(_decimals);\n    }\n\n    // Sample token information.\n\n    /**\n     * @notice Mints value tokens to the owner address.\n     * @param ownerAddress the address to mint to.\n     * @param value the amount of tokens to mint.\n     */\n    function allocateTo(address ownerAddress, uint256 value) external {\n        _mint(ownerAddress, value);\n    }\n}\n"},"Timer.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Universal store of current contract time for testing environments.\n */\ncontract Timer {\n    uint256 private currentTime;\n\n    constructor() public {\n        currentTime = now; // solhint-disable-line not-rely-on-time\n    }\n\n    /**\n     * @notice Sets the current time.\n     * @dev Will revert if not running in test mode.\n     * @param time timestamp to set `currentTime` to.\n     */\n    function setCurrentTime(uint256 time) external {\n        currentTime = time;\n    }\n\n    /**\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\n     * Otherwise, it will return the block timestamp.\n     * @return uint256 for the current Testable timestamp.\n     */\n    function getCurrentTime() public view returns (uint256) {\n        return currentTime;\n    }\n}\n"},"TokenFactory.sol":{"content":"pragma solidity ^0.6.0;\nimport \"./SyntheticToken.sol\";\nimport \"./ExpandedIERC20.sol\";\n\n\n/**\n * @title Factory for creating new mintable and burnable tokens.\n */\n\ncontract TokenFactory {\n    /**\n     * @notice Create a new token and return to the caller.\n     * @dev The caller will become the only minter and burner and the new owner capable of adding new roles.\n     * @param tokenName used to describe the new token.\n     * @param tokenSymbol short ticker abbreviation of the name. Ideally \u003c 5 chars.\n     * @param tokenDecimals used to define the precision used in the tokens numerical representation.\n     * @return newToken an instance of the newly created token interface.\n     */\n    function createToken(\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals\n    ) external returns (ExpandedIERC20 newToken) {\n        SyntheticToken mintableToken = new SyntheticToken(tokenName, tokenSymbol, tokenDecimals);\n        mintableToken.addMinter(msg.sender);\n        mintableToken.addBurner(msg.sender);\n        mintableToken.resetOwner(msg.sender);\n        newToken = ExpandedIERC20(address(mintableToken));\n    }\n}\n"},"TokenizedDerivative.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./ExpandedIERC20.sol\";\nimport \"./FixedPoint.sol\";\nimport \"./AdministrateeInterface.sol\";\nimport \"./OracleInterface.sol\";\nimport \"./StoreInterface.sol\";\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./Constants.sol\";\nimport \"./PriceFeedInterface.sol\";\nimport \"./ReturnCalculatorInterface.sol\";\n\nimport \"./SafeMath.sol\";\nimport \"./SignedSafeMath.sol\";\nimport \"./ERC20.sol\";\nimport \"./IERC20.sol\";\n\n\nlibrary TokenizedDerivativeParams {\n    enum ReturnType { Linear, Compound }\n\n    struct ConstructorParams {\n        address sponsor;\n        address finderAddress;\n        address priceFeedAddress;\n        uint256 defaultPenalty; // Percentage of margin requirement * 10^18\n        uint256 supportedMove; // Expected percentage move in the underlying price that the long is protected against.\n        bytes32 product;\n        uint256 fixedYearlyFee; // Percentage of nav * 10^18\n        uint256 disputeDeposit; // Percentage of margin requirement * 10^18\n        address returnCalculator;\n        uint256 startingTokenPrice;\n        uint256 expiry;\n        address marginCurrency;\n        uint256 withdrawLimit; // Percentage of derivativeStorage.shortBalance * 10^18\n        ReturnType returnType;\n        uint256 startingUnderlyingPrice;\n        uint256 creationTime;\n    }\n}\n\n\n/**\n * @title Tokenized Derivative Storage\n * @dev This library name is shortened due to it being used so often.\n */\nlibrary TDS {\n    enum State {\n        // The contract is active, and tokens can be created and redeemed. Margin can be added and withdrawn (as long as\n        // it exceeds required levels). Remargining is allowed. Created contracts immediately begin in this state.\n        // Possible state transitions: Disputed, Expired, Defaulted.\n        Live,\n        // Disputed, Expired, Defaulted, and Emergency are Frozen states. In a Frozen state, the contract is frozen in\n        // time awaiting a resolution by the Oracle. No tokens can be created or redeemed. Margin cannot be withdrawn.\n        // The resolution of these states moves the contract to the Settled state. Remargining is not allowed.\n\n        // The sponsor has disputed the price feed output. If the dispute is valid (i.e., the NAV calculated from the\n        // Oracle price differs from the NAV calculated from the price feed), the dispute fee is added to the short\n        // account. Otherwise, the dispute fee is added to the long margin account.\n        // Possible state transitions: Settled.\n        Disputed,\n        // Contract expiration has been reached.\n        // Possible state transitions: Settled.\n        Expired,\n        // The short margin account is below its margin requirement. The sponsor can choose to confirm the default and\n        // move to Settle without waiting for the Oracle. Default penalties will be assessed when the contract moves to\n        // Settled.\n        // Possible state transitions: Settled.\n        Defaulted,\n        // UMA has manually triggered a shutdown of the account.\n        // Possible state transitions: Settled.\n        Emergency,\n        // Token price is fixed. Tokens can be redeemed by anyone. All short margin can be withdrawn. Tokens can\u0027t be\n        // created, and contract can\u0027t remargin.\n        // Possible state transitions: None.\n        Settled\n    }\n\n    // The state of the token at a particular time. The state gets updated on remargin.\n    struct TokenState {\n        int256 underlyingPrice;\n        int256 tokenPrice;\n        uint256 time;\n    }\n\n    // The information in the following struct is only valid if in the midst of a Dispute.\n    struct Dispute {\n        int256 disputedNav;\n        uint256 deposit;\n    }\n\n    struct WithdrawThrottle {\n        uint256 startTime;\n        uint256 remainingWithdrawal;\n    }\n\n    struct FixedParameters {\n        // Fixed contract parameters.\n        uint256 defaultPenalty; // Percentage of margin requirement * 10^18\n        uint256 supportedMove; // Expected percentage move that the long is protected against.\n        uint256 disputeDeposit; // Percentage of margin requirement * 10^18\n        uint256 fixedFeePerSecond; // Percentage of nav*10^18\n        uint256 withdrawLimit; // Percentage of derivativeStorage.shortBalance*10^18\n        bytes32 product;\n        TokenizedDerivativeParams.ReturnType returnType;\n        uint256 initialTokenUnderlyingRatio;\n        uint256 creationTime;\n        string symbol;\n    }\n\n    struct ExternalAddresses {\n        // Other addresses/contracts\n        address sponsor;\n        address apDelegate;\n        FinderInterface finder;\n        PriceFeedInterface priceFeed;\n        ReturnCalculatorInterface returnCalculator;\n        IERC20 marginCurrency;\n    }\n\n    struct Storage {\n        FixedParameters fixedParameters;\n        ExternalAddresses externalAddresses;\n        // Balances\n        int256 shortBalance;\n        int256 longBalance;\n        State state;\n        uint256 endTime;\n        // The NAV of the contract always reflects the transition from (`prev`, `current`).\n        // In the case of a remargin, a `latest` price is retrieved from the price feed, and we shift\n        // `current` -\u003e `prev` and `latest` -\u003e `current` (and then recompute).\n        // In the case of a dispute, `current` might change (which is why we have to hold on to `prev`).\n        TokenState referenceTokenState;\n        TokenState currentTokenState;\n        int256 nav; // Net asset value is measured in Wei\n        Dispute disputeInfo;\n        // Only populated once the contract enters a frozen state.\n        int256 defaultPenaltyAmount;\n        WithdrawThrottle withdrawThrottle;\n    }\n}\n\n\n/**\n * @dev Implements the functionality of `TokenizedDerivative` by operating on the data contained in a `TDS.Storage`.\n */\nlibrary TokenizedDerivativeUtils {\n    using TokenizedDerivativeUtils for TDS.Storage;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n    using FixedPoint for FixedPoint.Unsigned;\n\n    uint256 private constant SECONDS_PER_DAY = 86400;\n    uint256 private constant SECONDS_PER_YEAR = 31536000;\n    uint256 private constant INT_MAX = 2**255 - 1;\n    uint256 private constant UINT_FP_SCALING_FACTOR = 10**18;\n    int256 private constant INT_FP_SCALING_FACTOR = 10**18;\n\n    // Note that we can\u0027t have the symbol parameter be `indexed` due to:\n    // TypeError: Indexed reference types cannot yet be used with ABIEncoderV2.\n    // An event emitted when the NAV of the contract changes.\n    event NavUpdated(string symbol, int256 newNav, int256 newTokenPrice);\n    // An event emitted when the contract enters the Default state on a remargin.\n    event Default(string symbol, uint256 defaultTime, int256 defaultNav);\n    // An event emitted when the contract settles.\n    event Settled(string symbol, uint256 settleTime, int256 finalNav);\n    // An event emitted when the contract expires.\n    event Expired(string symbol, uint256 expiryTime);\n    // An event emitted when the contract\u0027s NAV is disputed by the sponsor.\n    event Disputed(string symbol, uint256 timeDisputed, int256 navDisputed);\n    // An event emitted when the contract enters emergency shutdown.\n    event EmergencyShutdownTransition(string symbol, uint256 shutdownTime);\n    // An event emitted when tokens are created.\n    event TokensCreated(string symbol, uint256 numTokensCreated);\n    // An event emitted when tokens are redeemed.\n    event TokensRedeemed(string symbol, uint256 numTokensRedeemed);\n    // An event emitted when margin currency is deposited.\n    event Deposited(string symbol, uint256 amount);\n    // An event emitted when margin currency is withdrawn.\n    event Withdrawal(string symbol, uint256 amount);\n\n    modifier onlySponsor(TDS.Storage storage s) {\n        require(msg.sender == s.externalAddresses.sponsor);\n        _;\n    }\n\n    modifier onlyAdmin(TDS.Storage storage s) {\n        require(msg.sender == _getAdminAddress(s));\n        _;\n    }\n\n    modifier onlySponsorOrAdmin(TDS.Storage storage s) {\n        require(msg.sender == s.externalAddresses.sponsor || msg.sender == _getAdminAddress(s));\n        _;\n    }\n\n    modifier onlySponsorOrApDelegate(TDS.Storage storage s) {\n        require(msg.sender == s.externalAddresses.sponsor || msg.sender == s.externalAddresses.apDelegate);\n        _;\n    }\n\n    function _depositAndCreateTokens(\n        TDS.Storage storage s,\n        uint256 marginForPurchase,\n        uint256 tokensToPurchase\n    ) external onlySponsorOrApDelegate(s) {\n        s._remarginInternal();\n\n        int256 newTokenNav = _computeNavForTokens(s.currentTokenState.tokenPrice, tokensToPurchase);\n\n        if (newTokenNav \u003c 0) {\n            newTokenNav = 0;\n        }\n\n        uint256 positiveTokenNav = _safeUintCast(newTokenNav);\n\n        // Get any refund due to sending more margin than the argument indicated (should only be able to happen in the\n        // ETH case).\n        uint256 refund = s._pullSentMargin(marginForPurchase);\n\n        // Subtract newTokenNav from amount sent.\n        uint256 depositAmount = marginForPurchase.sub(positiveTokenNav);\n\n        // Deposit additional margin into the short account.\n        s._depositInternal(depositAmount);\n\n        // The _createTokensInternal call returns any refund due to the amount sent being larger than the amount\n        // required to purchase the tokens, so we add that to the running refund. This should be 0 in this case,\n        // but we leave this here in case of some refund being generated due to rounding errors or any bugs to ensure\n        // the sender never loses money.\n        refund = refund.add(s._createTokensInternal(tokensToPurchase, positiveTokenNav));\n\n        // Send the accumulated refund.\n        s._sendMargin(refund);\n    }\n\n    function _redeemTokens(TDS.Storage storage s, uint256 tokensToRedeem) external {\n        require(s.state == TDS.State.Live || s.state == TDS.State.Settled);\n        require(tokensToRedeem \u003e 0);\n\n        if (s.state == TDS.State.Live) {\n            require(msg.sender == s.externalAddresses.sponsor || msg.sender == s.externalAddresses.apDelegate);\n            s._remarginInternal();\n            require(s.state == TDS.State.Live);\n        }\n\n        ExpandedIERC20 thisErc20Token = ExpandedIERC20(address(this));\n\n        uint256 initialSupply = _totalSupply();\n        require(initialSupply \u003e 0);\n\n        _pullAuthorizedTokens(thisErc20Token, tokensToRedeem);\n        thisErc20Token.burn(tokensToRedeem);\n        emit TokensRedeemed(s.fixedParameters.symbol, tokensToRedeem);\n\n        // Value of the tokens is just the percentage of all the tokens multiplied by the balance of the investor\n        // margin account.\n        uint256 tokenPercentage = tokensToRedeem.mul(UINT_FP_SCALING_FACTOR).div(initialSupply);\n        uint256 tokenMargin = _takePercentage(_safeUintCast(s.longBalance), tokenPercentage);\n\n        s.longBalance = s.longBalance.sub(_safeIntCast(tokenMargin));\n        assert(s.longBalance \u003e= 0);\n        s.nav = _computeNavForTokens(s.currentTokenState.tokenPrice, _totalSupply());\n\n        s._sendMargin(tokenMargin);\n    }\n\n    function _dispute(TDS.Storage storage s, uint256 depositMargin) external onlySponsor(s) {\n        require(s.state == TDS.State.Live, \"Contract must be Live to dispute\");\n\n        uint256 requiredDeposit = _safeUintCast(\n            _takePercentage(s._getRequiredMargin(s.currentTokenState), s.fixedParameters.disputeDeposit)\n        );\n\n        uint256 sendInconsistencyRefund = s._pullSentMargin(depositMargin);\n\n        require(depositMargin \u003e= requiredDeposit);\n        uint256 overpaymentRefund = depositMargin.sub(requiredDeposit);\n\n        s.state = TDS.State.Disputed;\n        s.endTime = s.currentTokenState.time;\n        s.disputeInfo.disputedNav = s.nav;\n        s.disputeInfo.deposit = requiredDeposit;\n\n        // Store the default penalty in case the dispute pushes the sponsor into default.\n        s.defaultPenaltyAmount = s._computeDefaultPenalty();\n        emit Disputed(s.fixedParameters.symbol, s.endTime, s.nav);\n\n        s._requestOraclePrice(s.endTime);\n\n        // Add the two types of refunds:\n        // 1. The refund for ETH sent if it was \u003e depositMargin.\n        // 2. The refund for depositMargin \u003e requiredDeposit.\n        s._sendMargin(sendInconsistencyRefund.add(overpaymentRefund));\n    }\n\n    function _withdraw(TDS.Storage storage s, uint256 amount) external onlySponsor(s) {\n        // Remargin before allowing a withdrawal, but only if in the live state.\n        if (s.state == TDS.State.Live) {\n            s._remarginInternal();\n        }\n\n        // Make sure either in Live or Settled after any necessary remargin.\n        require(s.state == TDS.State.Live || s.state == TDS.State.Settled);\n\n        // If the contract has been settled or is in prefunded state then can\n        // withdraw up to full balance. If the contract is in live state then\n        // must leave at least the required margin. Not allowed to withdraw in\n        // other states.\n        int256 withdrawableAmount;\n        if (s.state == TDS.State.Settled) {\n            withdrawableAmount = s.shortBalance;\n        } else {\n            // Update throttling snapshot and verify that this withdrawal doesn\u0027t go past the throttle limit.\n            uint256 currentTime = s.currentTokenState.time;\n            if (s.withdrawThrottle.startTime \u003c= currentTime.sub(SECONDS_PER_DAY)) {\n                // We\u0027ve passed the previous s.withdrawThrottle window. Start new one.\n                s.withdrawThrottle.startTime = currentTime;\n                s.withdrawThrottle.remainingWithdrawal = _takePercentage(\n                    _safeUintCast(s.shortBalance),\n                    s.fixedParameters.withdrawLimit\n                );\n            }\n\n            int256 marginMaxWithdraw = s.shortBalance.sub(s._getRequiredMargin(s.currentTokenState));\n            int256 throttleMaxWithdraw = _safeIntCast(s.withdrawThrottle.remainingWithdrawal);\n\n            // Take the smallest of the two withdrawal limits.\n            withdrawableAmount = throttleMaxWithdraw \u003c marginMaxWithdraw ? throttleMaxWithdraw : marginMaxWithdraw;\n\n            // Note: this line alone implicitly ensures the withdrawal throttle is not violated, but the above\n            // ternary is more explicit.\n            s.withdrawThrottle.remainingWithdrawal = s.withdrawThrottle.remainingWithdrawal.sub(amount);\n        }\n\n        // Can only withdraw the allowed amount.\n        require(withdrawableAmount \u003e= _safeIntCast(amount), \"Attempting to withdraw more than allowed\");\n\n        // Transfer amount - Note: important to `-=` before the send so that the\n        // function can not be called multiple times while waiting for transfer\n        // to return.\n        s.shortBalance = s.shortBalance.sub(_safeIntCast(amount));\n        emit Withdrawal(s.fixedParameters.symbol, amount);\n        s._sendMargin(amount);\n    }\n\n    function _acceptPriceAndSettle(TDS.Storage storage s) external onlySponsor(s) {\n        // Right now, only confirming prices in the defaulted state.\n        require(s.state == TDS.State.Defaulted);\n\n        // Remargin on agreed upon price.\n        s._settleAgreedPrice();\n    }\n\n    function _setApDelegate(TDS.Storage storage s, address _apDelegate) external onlySponsor(s) {\n        s.externalAddresses.apDelegate = _apDelegate;\n    }\n\n    // Moves the contract into the Emergency state, where it waits on an Oracle price for the most recent remargin time.\n    function _emergencyShutdown(TDS.Storage storage s) external onlyAdmin(s) {\n        require(s.state == TDS.State.Live);\n        s.state = TDS.State.Emergency;\n        s.endTime = s.currentTokenState.time;\n        s.defaultPenaltyAmount = s._computeDefaultPenalty();\n        emit EmergencyShutdownTransition(s.fixedParameters.symbol, s.endTime);\n        s._requestOraclePrice(s.endTime);\n    }\n\n    function _settle(TDS.Storage storage s) external {\n        s._settleInternal();\n    }\n\n    function _createTokens(\n        TDS.Storage storage s,\n        uint256 marginForPurchase,\n        uint256 tokensToPurchase\n    ) external onlySponsorOrApDelegate(s) {\n        // Returns any refund due to sending more margin than the argument indicated (should only be able to happen in\n        // the ETH case).\n        uint256 refund = s._pullSentMargin(marginForPurchase);\n\n        // The _createTokensInternal call returns any refund due to the amount sent being larger than the amount\n        // required to purchase the tokens, so we add that to the running refund.\n        refund = refund.add(s._createTokensInternal(tokensToPurchase, marginForPurchase));\n\n        // Send the accumulated refund.\n        s._sendMargin(refund);\n    }\n\n    function _deposit(TDS.Storage storage s, uint256 marginToDeposit) external onlySponsor(s) {\n        // Only allow the s.externalAddresses.sponsor to deposit margin.\n        uint256 refund = s._pullSentMargin(marginToDeposit);\n        s._depositInternal(marginToDeposit);\n\n        // Send any refund due to sending more margin than the argument indicated (should only be able to happen in the\n        // ETH case).\n        s._sendMargin(refund);\n    }\n\n    function _remargin(TDS.Storage storage s) external onlySponsorOrAdmin(s) {\n        s._remarginInternal();\n    }\n\n    function _withdrawUnexpectedErc20(\n        TDS.Storage storage s,\n        address erc20Address,\n        uint256 amount\n    ) external onlySponsor(s) {\n        if (address(s.externalAddresses.marginCurrency) == erc20Address) {\n            uint256 currentBalance = s.externalAddresses.marginCurrency.balanceOf(address(this));\n            int256 totalBalances = s.shortBalance.add(s.longBalance);\n            assert(totalBalances \u003e= 0);\n            uint256 withdrawableAmount = currentBalance.sub(_safeUintCast(totalBalances)).sub(s.disputeInfo.deposit);\n            require(withdrawableAmount \u003e= amount);\n        }\n\n        IERC20 erc20 = IERC20(erc20Address);\n        require(erc20.transfer(msg.sender, amount));\n    }\n\n    // Returns the expected net asset value (NAV) of the contract using the latest available Price Feed price.\n    function _calcNAV(TDS.Storage storage s) external view returns (int256 navNew) {\n        (TDS.TokenState memory newTokenState, ) = s._calcNewTokenStateAndBalance();\n        navNew = _computeNavForTokens(newTokenState.tokenPrice, _totalSupply());\n    }\n\n    // Returns the expected value of each the outstanding tokens of the contract using the latest available Price Feed\n    // price.\n    function _calcTokenValue(TDS.Storage storage s) external view returns (int256 newTokenValue) {\n        (TDS.TokenState memory newTokenState, ) = s._calcNewTokenStateAndBalance();\n        newTokenValue = newTokenState.tokenPrice;\n    }\n\n    // Returns the expected balance of the short margin account using the latest available Price Feed price.\n    function _calcShortMarginBalance(TDS.Storage storage s) external view returns (int256 newShortMarginBalance) {\n        (, newShortMarginBalance) = s._calcNewTokenStateAndBalance();\n    }\n\n    function _calcExcessMargin(TDS.Storage storage s) external view returns (int256 newExcessMargin) {\n        (TDS.TokenState memory newTokenState, int256 newShortMarginBalance) = s._calcNewTokenStateAndBalance();\n        // If the contract is in/will be moved to a settled state, the margin requirement will be 0.\n        int256 requiredMargin = newTokenState.time \u003e= s.endTime ? 0 : s._getRequiredMargin(newTokenState);\n        return newShortMarginBalance.sub(requiredMargin);\n    }\n\n    function _getCurrentRequiredMargin(TDS.Storage storage s) external view returns (int256 requiredMargin) {\n        if (s.state == TDS.State.Settled) {\n            // No margin needs to be maintained when the contract is settled.\n            return 0;\n        }\n\n        return s._getRequiredMargin(s.currentTokenState);\n    }\n\n    function _canBeSettled(TDS.Storage storage s) external view returns (bool canBeSettled) {\n        TDS.State currentState = s.state;\n\n        if (currentState == TDS.State.Settled) {\n            return false;\n        }\n\n        // Technically we should also check if price will default the contract, but that isn\u0027t a normal flow of\n        // operations that we want to simulate: we want to discourage the sponsor remargining into a default.\n        (uint256 priceFeedTime, ) = s._getLatestPrice();\n        if (currentState == TDS.State.Live \u0026\u0026 (priceFeedTime \u003c s.endTime)) {\n            return false;\n        }\n\n        return OracleInterface(_getOracleAddress(s)).hasPrice(s.fixedParameters.product, s.endTime);\n    }\n\n    function _getUpdatedUnderlyingPrice(TDS.Storage storage s)\n        external\n        view\n        returns (int256 underlyingPrice, uint256 time)\n    {\n        (TDS.TokenState memory newTokenState, ) = s._calcNewTokenStateAndBalance();\n        return (newTokenState.underlyingPrice, newTokenState.time);\n    }\n\n    // Contract initializer. Should only be called at construction.\n    // Note: Must be a public function because structs cannot be passed as calldata (required data type for external\n    // functions).\n    function _initialize(\n        TDS.Storage storage s,\n        TokenizedDerivativeParams.ConstructorParams memory params,\n        string memory symbol\n    ) public {\n        s._setFixedParameters(params, symbol);\n        s._setExternalAddresses(params);\n\n        // Keep the starting token price relatively close to FP_SCALING_FACTOR to prevent users from unintentionally\n        // creating rounding or overflow errors.\n        require(params.startingTokenPrice \u003e= UINT_FP_SCALING_FACTOR.div(10**9));\n        require(params.startingTokenPrice \u003c= UINT_FP_SCALING_FACTOR.mul(10**9));\n\n        // TODO(mrice32): we should have an ideal start time rather than blindly polling.\n        (uint256 latestTime, int256 latestUnderlyingPrice) = s.externalAddresses.priceFeed.latestPrice(\n            s.fixedParameters.product\n        );\n\n        // If nonzero, take the user input as the starting price.\n        if (params.startingUnderlyingPrice != 0) {\n            latestUnderlyingPrice = _safeIntCast(params.startingUnderlyingPrice);\n        }\n\n        require(latestUnderlyingPrice \u003e 0);\n        require(latestTime != 0);\n\n        // Keep the ratio in case it\u0027s needed for margin computation.\n        s.fixedParameters.initialTokenUnderlyingRatio = params.startingTokenPrice.mul(UINT_FP_SCALING_FACTOR).div(\n            _safeUintCast(latestUnderlyingPrice)\n        );\n        require(s.fixedParameters.initialTokenUnderlyingRatio != 0);\n\n        // Set end time to max value of uint256 to implement no expiry.\n        if (params.expiry == 0) {\n            s.endTime = ~uint256(0);\n        } else {\n            require(params.expiry \u003e= latestTime);\n            s.endTime = params.expiry;\n        }\n\n        s.nav = s._computeInitialNav(latestUnderlyingPrice, latestTime, params.startingTokenPrice);\n\n        s.state = TDS.State.Live;\n    }\n\n    function _getOracleAddress(TDS.Storage storage s) internal view returns (address) {\n        return s.externalAddresses.finder.getImplementationAddress(OracleInterfaces.Oracle);\n    }\n\n    function _getIdentifierWhitelistAddress(TDS.Storage storage s) internal view returns (address) {\n        return s.externalAddresses.finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist);\n    }\n\n    function _getStoreAddress(TDS.Storage storage s) internal view returns (address) {\n        return s.externalAddresses.finder.getImplementationAddress(OracleInterfaces.Store);\n    }\n\n    function _getAdminAddress(TDS.Storage storage s) internal view returns (address) {\n        return s.externalAddresses.finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\n    }\n\n    function _calcNewTokenStateAndBalance(TDS.Storage storage s)\n        internal\n        view\n        returns (TDS.TokenState memory newTokenState, int256 newShortMarginBalance)\n    {\n        // TODO: there\u0027s a lot of repeated logic in this method from elsewhere in the contract. It should be extracted\n        // so the logic can be written once and used twice. However, much of this was written post-audit, so it was\n        // deemed preferable not to modify any state changing code that could potentially introduce new security\n        // bugs. This should be done before the next contract audit.\n\n        if (s.state == TDS.State.Settled) {\n            // If the contract is Settled, just return the current contract state.\n            return (s.currentTokenState, s.shortBalance);\n        }\n\n        // Grab the price feed pricetime.\n        (uint256 priceFeedTime, int256 priceFeedPrice) = s._getLatestPrice();\n\n        bool isContractLive = s.state == TDS.State.Live;\n        bool isContractPostExpiry = priceFeedTime \u003e= s.endTime;\n\n        // If the time hasn\u0027t advanced since the last remargin, short circuit and return the most recently computed\n        // values.\n        if (isContractLive \u0026\u0026 priceFeedTime \u003c= s.currentTokenState.time) {\n            return (s.currentTokenState, s.shortBalance);\n        }\n\n        // Determine which previous price state to use when computing the new NAV.\n        // If the contract is live, we use the reference for the linear return type or if the contract will immediately\n        // move to expiry.\n        bool shouldUseReferenceTokenState = isContractLive \u0026\u0026\n            (s.fixedParameters.returnType == TokenizedDerivativeParams.ReturnType.Linear || isContractPostExpiry);\n        TDS.TokenState memory lastTokenState = (\n            shouldUseReferenceTokenState ? s.referenceTokenState : s.currentTokenState\n        );\n\n        // Use the oracle settlement price/time if the contract is frozen or will move to expiry on the next remargin.\n        (uint256 recomputeTime, int256 recomputePrice) = !isContractLive || isContractPostExpiry\n            ? (s.endTime, OracleInterface(_getOracleAddress(s)).getPrice(s.fixedParameters.product, s.endTime))\n            : (priceFeedTime, priceFeedPrice);\n\n        // Init the returned short balance to the current short balance.\n        newShortMarginBalance = s.shortBalance;\n\n        // Subtract the oracle fees from the short balance.\n        newShortMarginBalance = isContractLive\n            ? newShortMarginBalance.sub(\n                _safeIntCast(s._computeExpectedOracleFees(s.currentTokenState.time, recomputeTime))\n            )\n            : newShortMarginBalance;\n\n        // Compute the new NAV\n        newTokenState = s._computeNewTokenState(lastTokenState, recomputePrice, recomputeTime);\n        int256 navNew = _computeNavForTokens(newTokenState.tokenPrice, _totalSupply());\n        newShortMarginBalance = newShortMarginBalance.sub(_getLongDiff(navNew, s.longBalance, newShortMarginBalance));\n\n        bool inDefault = !s._satisfiesMarginRequirement(newShortMarginBalance, newTokenState);\n        // If the contract is about to enter a frozen state (i.e., either expiry or default), then an Oracle final fee\n        // will need to be paid.\n        if (isContractLive \u0026\u0026 (isContractPostExpiry || inDefault)) {\n            uint256 oracleFinalFee = s._computeOracleFinalFee(newShortMarginBalance);\n            newShortMarginBalance = newShortMarginBalance.sub(_safeIntCast(oracleFinalFee));\n        }\n\n        // If the contract is frozen or will move into expiry, we need to settle it, which means adding the default\n        // penalty and dispute deposit if necessary.\n        if (!isContractLive || isContractPostExpiry) {\n            // Subtract default penalty (if necessary) from the short balance.\n            if (inDefault) {\n                int256 expectedDefaultPenalty = isContractLive ? s._computeDefaultPenalty() : s._getDefaultPenalty();\n                int256 defaultPenalty = (newShortMarginBalance \u003c expectedDefaultPenalty)\n                    ? newShortMarginBalance\n                    : expectedDefaultPenalty;\n                newShortMarginBalance = newShortMarginBalance.sub(defaultPenalty);\n            }\n\n            // Add the dispute deposit to the short balance if necessary.\n            if (s.state == TDS.State.Disputed \u0026\u0026 navNew != s.disputeInfo.disputedNav) {\n                int256 depositValue = _safeIntCast(s.disputeInfo.deposit);\n                newShortMarginBalance = newShortMarginBalance.add(depositValue);\n            }\n        }\n    }\n\n    function _computeInitialNav(\n        TDS.Storage storage s,\n        int256 latestUnderlyingPrice,\n        uint256 latestTime,\n        uint256 startingTokenPrice\n    ) internal returns (int256 navNew) {\n        int256 unitNav = _safeIntCast(startingTokenPrice);\n        s.referenceTokenState = TDS.TokenState(latestUnderlyingPrice, unitNav, latestTime);\n        s.currentTokenState = TDS.TokenState(latestUnderlyingPrice, unitNav, latestTime);\n        // Starting NAV is always 0 in the TokenizedDerivative case.\n        navNew = 0;\n    }\n\n    function _setExternalAddresses(TDS.Storage storage s, TokenizedDerivativeParams.ConstructorParams memory params)\n        internal\n    {\n        // Note: not all \"ERC20\" tokens conform exactly to this interface (BNB, OMG, etc). The most common way that\n        // tokens fail to conform is that they do not return a bool from certain state-changing operations. This\n        // contract was not designed to work with those tokens because of the additional complexity they would\n        // introduce.\n        s.externalAddresses.marginCurrency = IERC20(params.marginCurrency);\n\n        s.externalAddresses.returnCalculator = ReturnCalculatorInterface(params.returnCalculator);\n        s.externalAddresses.finder = FinderInterface(params.finderAddress);\n        s.externalAddresses.priceFeed = PriceFeedInterface(params.priceFeedAddress);\n\n        // Verify that the price feed and Oracle support the given s.fixedParameters.product.\n        IdentifierWhitelistInterface supportedIdentifiers = IdentifierWhitelistInterface(\n            _getIdentifierWhitelistAddress(s)\n        );\n        require(supportedIdentifiers.isIdentifierSupported(params.product));\n        require(s.externalAddresses.priceFeed.isIdentifierSupported(params.product));\n\n        s.externalAddresses.sponsor = params.sponsor;\n    }\n\n    function _setFixedParameters(\n        TDS.Storage storage s,\n        TokenizedDerivativeParams.ConstructorParams memory params,\n        string memory symbol\n    ) internal {\n        // Ensure only valid enum values are provided.\n        require(\n            params.returnType == TokenizedDerivativeParams.ReturnType.Compound ||\n                params.returnType == TokenizedDerivativeParams.ReturnType.Linear\n        );\n\n        // Fee must be 0 if the returnType is linear.\n        require(params.returnType == TokenizedDerivativeParams.ReturnType.Compound || params.fixedYearlyFee == 0);\n\n        // The default penalty must be less than the required margin.\n        require(params.defaultPenalty \u003c= UINT_FP_SCALING_FACTOR);\n\n        s.fixedParameters.returnType = params.returnType;\n        s.fixedParameters.defaultPenalty = params.defaultPenalty;\n        s.fixedParameters.product = params.product;\n        s.fixedParameters.fixedFeePerSecond = params.fixedYearlyFee.div(SECONDS_PER_YEAR);\n        s.fixedParameters.disputeDeposit = params.disputeDeposit;\n        s.fixedParameters.supportedMove = params.supportedMove;\n        s.fixedParameters.withdrawLimit = params.withdrawLimit;\n        s.fixedParameters.creationTime = params.creationTime;\n        s.fixedParameters.symbol = symbol;\n    }\n\n    // _remarginInternal() allows other functions to call remargin internally without satisfying permission checks for\n    // _remargin().\n    function _remarginInternal(TDS.Storage storage s) internal {\n        // If the state is not live, remargining does not make sense.\n        require(s.state == TDS.State.Live);\n\n        (uint256 latestTime, int256 latestPrice) = s._getLatestPrice();\n        // Checks whether contract has ended.\n        if (latestTime \u003c= s.currentTokenState.time) {\n            // If the price feed hasn\u0027t advanced, remargining should be a no-op.\n            return;\n        }\n\n        // Save the penalty using the current state in case it needs to be used.\n        int256 potentialPenaltyAmount = s._computeDefaultPenalty();\n\n        if (latestTime \u003e= s.endTime) {\n            s.state = TDS.State.Expired;\n            emit Expired(s.fixedParameters.symbol, s.endTime);\n\n            // Applies the same update a second time to effectively move the current state to the reference state.\n            int256 recomputedNav = s._computeNav(s.currentTokenState.underlyingPrice, s.currentTokenState.time);\n            assert(recomputedNav == s.nav);\n\n            uint256 feeAmount = s._deductOracleFees(s.currentTokenState.time, s.endTime);\n\n            // Save the precomputed default penalty in case the expiry price pushes the sponsor into default.\n            s.defaultPenaltyAmount = potentialPenaltyAmount;\n\n            // We have no idea what the price was, exactly at s.endTime, so we can\u0027t set\n            // s.currentTokenState, or update the nav, or do anything.\n            s._requestOraclePrice(s.endTime);\n            s._payOracleFees(feeAmount);\n            return;\n        }\n        uint256 feeAmount = s._deductOracleFees(s.currentTokenState.time, latestTime);\n\n        // Update nav of contract.\n        int256 navNew = s._computeNav(latestPrice, latestTime);\n\n        // Update the balances of the contract.\n        s._updateBalances(navNew);\n\n        // Make sure contract has not moved into default.\n        bool inDefault = !s._satisfiesMarginRequirement(s.shortBalance, s.currentTokenState);\n        if (inDefault) {\n            s.state = TDS.State.Defaulted;\n            s.defaultPenaltyAmount = potentialPenaltyAmount;\n            s.endTime = latestTime; // Change end time to moment when default occurred.\n            emit Default(s.fixedParameters.symbol, latestTime, s.nav);\n            s._requestOraclePrice(latestTime);\n        }\n\n        s._payOracleFees(feeAmount);\n    }\n\n    function _createTokensInternal(\n        TDS.Storage storage s,\n        uint256 tokensToPurchase,\n        uint256 navSent\n    ) internal returns (uint256 refund) {\n        s._remarginInternal();\n\n        // Verify that remargining didn\u0027t push the contract into expiry or default.\n        require(s.state == TDS.State.Live);\n\n        int256 purchasedNav = _computeNavForTokens(s.currentTokenState.tokenPrice, tokensToPurchase);\n\n        if (purchasedNav \u003c 0) {\n            purchasedNav = 0;\n        }\n\n        // Ensures that requiredNav \u003e= navSent.\n        refund = navSent.sub(_safeUintCast(purchasedNav));\n\n        s.longBalance = s.longBalance.add(purchasedNav);\n\n        ExpandedIERC20 thisErc20Token = ExpandedIERC20(address(this));\n\n        require(thisErc20Token.mint(msg.sender, tokensToPurchase), \"Token minting failed\");\n        emit TokensCreated(s.fixedParameters.symbol, tokensToPurchase);\n\n        s.nav = _computeNavForTokens(s.currentTokenState.tokenPrice, _totalSupply());\n\n        // Make sure this still satisfies the margin requirement.\n        require(s._satisfiesMarginRequirement(s.shortBalance, s.currentTokenState));\n    }\n\n    function _depositInternal(TDS.Storage storage s, uint256 value) internal {\n        // Make sure that we are in a \"depositable\" state.\n        require(s.state == TDS.State.Live);\n        s.shortBalance = s.shortBalance.add(_safeIntCast(value));\n        emit Deposited(s.fixedParameters.symbol, value);\n    }\n\n    function _settleInternal(TDS.Storage storage s) internal {\n        TDS.State startingState = s.state;\n        require(\n            startingState == TDS.State.Disputed ||\n                startingState == TDS.State.Expired ||\n                startingState == TDS.State.Defaulted ||\n                startingState == TDS.State.Emergency\n        );\n        s._settleVerifiedPrice();\n        if (startingState == TDS.State.Disputed) {\n            int256 depositValue = _safeIntCast(s.disputeInfo.deposit);\n            if (s.nav != s.disputeInfo.disputedNav) {\n                s.shortBalance = s.shortBalance.add(depositValue);\n            } else {\n                s.longBalance = s.longBalance.add(depositValue);\n            }\n        }\n    }\n\n    // Deducts the fees from the margin account.\n    function _deductOracleFees(\n        TDS.Storage storage s,\n        uint256 lastTimeOracleFeesPaid,\n        uint256 currentTime\n    ) internal returns (uint256 feeAmount) {\n        feeAmount = s._computeExpectedOracleFees(lastTimeOracleFeesPaid, currentTime);\n        s.shortBalance = s.shortBalance.sub(_safeIntCast(feeAmount));\n        // If paying the Oracle fee reduces the held margin below requirements, the rest of remargin() will default the\n        // contract.\n    }\n\n    // Pays out the fees to the Oracle.\n    function _payOracleFees(TDS.Storage storage s, uint256 feeAmount) internal {\n        if (feeAmount == 0) {\n            return;\n        }\n\n        StoreInterface store = StoreInterface(_getStoreAddress(s));\n        if (address(s.externalAddresses.marginCurrency) == address(0x0)) {\n            store.payOracleFees.value(feeAmount)();\n        } else {\n            require(s.externalAddresses.marginCurrency.approve(address(store), feeAmount));\n            store.payOracleFeesErc20(address(s.externalAddresses.marginCurrency), FixedPoint.Unsigned(feeAmount));\n        }\n    }\n\n    function _computeExpectedOracleFees(\n        TDS.Storage storage s,\n        uint256 lastTimeOracleFeesPaid,\n        uint256 currentTime\n    ) internal view returns (uint256 feeAmount) {\n        StoreInterface store = StoreInterface(_getStoreAddress(s));\n        // The profit from corruption is set as the max(longBalance, shortBalance).\n        int256 pfc = s.shortBalance \u003c s.longBalance ? s.longBalance : s.shortBalance;\n        (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory delayFee) = store.computeRegularFee(\n            lastTimeOracleFeesPaid,\n            currentTime,\n            FixedPoint.Unsigned(_safeUintCast(pfc))\n        );\n        // TODO(ptare): Implement a keeper system, but for now, pay the delay fee to the Oracle.\n        uint256 expectedFeeAmount = regularFee.add(delayFee).rawValue;\n\n        // Ensure the fee returned can actually be paid by the short margin account.\n        uint256 shortBalance = _safeUintCast(s.shortBalance);\n        return (shortBalance \u003c expectedFeeAmount) ? shortBalance : expectedFeeAmount;\n    }\n\n    function _computeNewTokenState(\n        TDS.Storage storage s,\n        TDS.TokenState memory beginningTokenState,\n        int256 latestUnderlyingPrice,\n        uint256 recomputeTime\n    ) internal view returns (TDS.TokenState memory newTokenState) {\n        int256 underlyingReturn = s.externalAddresses.returnCalculator.computeReturn(\n            beginningTokenState.underlyingPrice,\n            latestUnderlyingPrice\n        );\n        int256 tokenReturn = underlyingReturn.sub(\n            _safeIntCast(s.fixedParameters.fixedFeePerSecond.mul(recomputeTime.sub(beginningTokenState.time)))\n        );\n        int256 tokenMultiplier = tokenReturn.add(INT_FP_SCALING_FACTOR);\n\n        // In the compound case, don\u0027t allow the token price to go below 0.\n        if (s.fixedParameters.returnType == TokenizedDerivativeParams.ReturnType.Compound \u0026\u0026 tokenMultiplier \u003c 0) {\n            tokenMultiplier = 0;\n        }\n\n        int256 newTokenPrice = _takePercentage(beginningTokenState.tokenPrice, tokenMultiplier);\n        newTokenState = TDS.TokenState(latestUnderlyingPrice, newTokenPrice, recomputeTime);\n    }\n\n    function _satisfiesMarginRequirement(\n        TDS.Storage storage s,\n        int256 balance,\n        TDS.TokenState memory tokenState\n    ) internal view returns (bool doesSatisfyRequirement) {\n        return s._getRequiredMargin(tokenState) \u003c= balance;\n    }\n\n    function _requestOraclePrice(TDS.Storage storage s, uint256 requestedTime) internal {\n        uint256 finalFee = s._computeOracleFinalFee(s.shortBalance);\n        s.shortBalance = s.shortBalance.sub(_safeIntCast(finalFee));\n        s._payOracleFees(finalFee);\n\n        OracleInterface oracle = OracleInterface(_getOracleAddress(s));\n        bool availablePrice = oracle.hasPrice(s.fixedParameters.product, requestedTime);\n        if (availablePrice) {\n            // The Oracle price is already available, settle the contract right away.\n            s._settleInternal();\n        } else {\n            oracle.requestPrice(s.fixedParameters.product, requestedTime);\n        }\n    }\n\n    function _computeOracleFinalFee(TDS.Storage storage s, int256 shortBalance)\n        internal\n        view\n        returns (uint256 actualFeeAmount)\n    {\n        StoreInterface store = StoreInterface(_getStoreAddress(s));\n        FixedPoint.Unsigned memory expectedFee = store.computeFinalFee(address(s.externalAddresses.marginCurrency));\n        uint256 expectedFeeAmount = expectedFee.rawValue;\n        // Ensure the fee returned can actually be paid by the short margin account.\n        uint256 shortBalanceuint256 = _safeUintCast(shortBalance);\n        actualFeeAmount = (shortBalanceuint256 \u003c expectedFeeAmount) ? shortBalanceuint256 : expectedFeeAmount;\n    }\n\n    function _getLatestPrice(TDS.Storage storage s)\n        internal\n        view\n        returns (uint256 latestTime, int256 latestUnderlyingPrice)\n    {\n        (latestTime, latestUnderlyingPrice) = s.externalAddresses.priceFeed.latestPrice(s.fixedParameters.product);\n        require(latestTime != 0);\n    }\n\n    function _computeNav(\n        TDS.Storage storage s,\n        int256 latestUnderlyingPrice,\n        uint256 latestTime\n    ) internal returns (int256 navNew) {\n        if (s.fixedParameters.returnType == TokenizedDerivativeParams.ReturnType.Compound) {\n            navNew = s._computeCompoundNav(latestUnderlyingPrice, latestTime);\n        } else {\n            assert(s.fixedParameters.returnType == TokenizedDerivativeParams.ReturnType.Linear);\n            navNew = s._computeLinearNav(latestUnderlyingPrice, latestTime);\n        }\n    }\n\n    function _computeCompoundNav(\n        TDS.Storage storage s,\n        int256 latestUnderlyingPrice,\n        uint256 latestTime\n    ) internal returns (int256 navNew) {\n        s.referenceTokenState = s.currentTokenState;\n        s.currentTokenState = s._computeNewTokenState(s.currentTokenState, latestUnderlyingPrice, latestTime);\n        navNew = _computeNavForTokens(s.currentTokenState.tokenPrice, _totalSupply());\n        emit NavUpdated(s.fixedParameters.symbol, navNew, s.currentTokenState.tokenPrice);\n    }\n\n    function _computeLinearNav(\n        TDS.Storage storage s,\n        int256 latestUnderlyingPrice,\n        uint256 latestTime\n    ) internal returns (int256 navNew) {\n        // Only update the time - don\u0027t update the prices becuase all price changes are relative to the initial price.\n        s.referenceTokenState.time = s.currentTokenState.time;\n        s.currentTokenState = s._computeNewTokenState(s.referenceTokenState, latestUnderlyingPrice, latestTime);\n        navNew = _computeNavForTokens(s.currentTokenState.tokenPrice, _totalSupply());\n        emit NavUpdated(s.fixedParameters.symbol, navNew, s.currentTokenState.tokenPrice);\n    }\n\n    function _recomputeNav(\n        TDS.Storage storage s,\n        int256 oraclePrice,\n        uint256 recomputeTime\n    ) internal returns (int256 navNew) {\n        // We\u0027re updating `last` based on what the Oracle has told us.\n        assert(s.endTime == recomputeTime);\n        s.currentTokenState = s._computeNewTokenState(s.referenceTokenState, oraclePrice, recomputeTime);\n        navNew = _computeNavForTokens(s.currentTokenState.tokenPrice, _totalSupply());\n        emit NavUpdated(s.fixedParameters.symbol, navNew, s.currentTokenState.tokenPrice);\n    }\n\n    // Function is internally only called by `_settleAgreedPrice` or `_settleVerifiedPrice`. This function handles all\n    // of the settlement logic including assessing penalties and then moves the state to `Settled`.\n    function _settleWithPrice(TDS.Storage storage s, int256 price) internal {\n        // Remargin at whatever price we\u0027re using (verified or unverified).\n        s._updateBalances(s._recomputeNav(price, s.endTime));\n\n        bool inDefault = !s._satisfiesMarginRequirement(s.shortBalance, s.currentTokenState);\n\n        if (inDefault) {\n            int256 expectedDefaultPenalty = s._getDefaultPenalty();\n            int256 penalty = (s.shortBalance \u003c expectedDefaultPenalty) ? s.shortBalance : expectedDefaultPenalty;\n\n            s.shortBalance = s.shortBalance.sub(penalty);\n            s.longBalance = s.longBalance.add(penalty);\n        }\n\n        s.state = TDS.State.Settled;\n        emit Settled(s.fixedParameters.symbol, s.endTime, s.nav);\n    }\n\n    function _updateBalances(TDS.Storage storage s, int256 navNew) internal {\n        // Compute difference -- Add the difference to owner and subtract\n        // from counterparty. Then update nav state variable.\n        int256 longDiff = _getLongDiff(navNew, s.longBalance, s.shortBalance);\n        s.nav = navNew;\n\n        s.longBalance = s.longBalance.add(longDiff);\n        s.shortBalance = s.shortBalance.sub(longDiff);\n    }\n\n    function _getDefaultPenalty(TDS.Storage storage s) internal view returns (int256 penalty) {\n        return s.defaultPenaltyAmount;\n    }\n\n    function _computeDefaultPenalty(TDS.Storage storage s) internal view returns (int256 penalty) {\n        return _takePercentage(s._getRequiredMargin(s.currentTokenState), s.fixedParameters.defaultPenalty);\n    }\n\n    function _getRequiredMargin(TDS.Storage storage s, TDS.TokenState memory tokenState)\n        internal\n        view\n        returns (int256 requiredMargin)\n    {\n        int256 leverageMagnitude = _absoluteValue(s.externalAddresses.returnCalculator.leverage());\n\n        int256 effectiveNotional;\n        if (s.fixedParameters.returnType == TokenizedDerivativeParams.ReturnType.Linear) {\n            int256 effectiveUnitsOfUnderlying = _safeIntCast(\n                _totalSupply().mul(s.fixedParameters.initialTokenUnderlyingRatio).div(UINT_FP_SCALING_FACTOR)\n            )\n                .mul(leverageMagnitude);\n            effectiveNotional = effectiveUnitsOfUnderlying.mul(tokenState.underlyingPrice).div(INT_FP_SCALING_FACTOR);\n        } else {\n            int256 currentNav = _computeNavForTokens(tokenState.tokenPrice, _totalSupply());\n            effectiveNotional = currentNav.mul(leverageMagnitude);\n        }\n\n        // Take the absolute value of the notional since a negative notional has similar risk properties to a positive\n        // notional of the same size, and, therefore, requires the same margin.\n        requiredMargin = _takePercentage(_absoluteValue(effectiveNotional), s.fixedParameters.supportedMove);\n    }\n\n    function _pullSentMargin(TDS.Storage storage s, uint256 expectedMargin) internal returns (uint256 refund) {\n        if (address(s.externalAddresses.marginCurrency) == address(0x0)) {\n            // Refund is any amount of ETH that was sent that was above the amount that was expected.\n            // Note: SafeMath will force a revert if msg.value \u003c expectedMargin.\n            return msg.value.sub(expectedMargin);\n        } else {\n            // If we expect an ERC20 token, no ETH should be sent.\n            require(msg.value == 0);\n            _pullAuthorizedTokens(s.externalAddresses.marginCurrency, expectedMargin);\n\n            // There is never a refund in the ERC20 case since we use the argument to determine how much to \"pull\".\n            return 0;\n        }\n    }\n\n    function _sendMargin(TDS.Storage storage s, uint256 amount) internal {\n        // There\u0027s no point in attempting a send if there\u0027s nothing to send.\n        if (amount == 0) {\n            return;\n        }\n\n        if (address(s.externalAddresses.marginCurrency) == address(0x0)) {\n            msg.sender.transfer(amount);\n        } else {\n            require(s.externalAddresses.marginCurrency.transfer(msg.sender, amount));\n        }\n    }\n\n    function _settleAgreedPrice(TDS.Storage storage s) internal {\n        int256 agreedPrice = s.currentTokenState.underlyingPrice;\n\n        s._settleWithPrice(agreedPrice);\n    }\n\n    function _settleVerifiedPrice(TDS.Storage storage s) internal {\n        OracleInterface oracle = OracleInterface(_getOracleAddress(s));\n        int256 oraclePrice = oracle.getPrice(s.fixedParameters.product, s.endTime);\n        s._settleWithPrice(oraclePrice);\n    }\n\n    function _pullAuthorizedTokens(IERC20 erc20, uint256 amountToPull) private {\n        // If nothing is being pulled, there\u0027s no point in calling a transfer.\n        if (amountToPull \u003e 0) {\n            require(erc20.transferFrom(msg.sender, address(this), amountToPull));\n        }\n    }\n\n    // Gets the change in balance for the long side.\n    // Note: there\u0027s a function for this because signage is tricky here, and it must be done the same everywhere.\n    function _getLongDiff(\n        int256 navNew,\n        int256 longBalance,\n        int256 shortBalance\n    ) private pure returns (int256 longDiff) {\n        int256 newLongBalance = navNew;\n\n        // Long balance cannot go below zero.\n        if (newLongBalance \u003c 0) {\n            newLongBalance = 0;\n        }\n\n        longDiff = newLongBalance.sub(longBalance);\n\n        // Cannot pull more margin from the short than is available.\n        if (longDiff \u003e shortBalance) {\n            longDiff = shortBalance;\n        }\n    }\n\n    function _computeNavForTokens(int256 tokenPrice, uint256 numTokens) private pure returns (int256 navNew) {\n        int256 navPreDivision = _safeIntCast(numTokens).mul(tokenPrice);\n        navNew = navPreDivision.div(INT_FP_SCALING_FACTOR);\n\n        // The navNew division above truncates by default. Instead, we prefer to ceil this value to ensure tokens\n        // cannot be purchased or backed with less than their true value.\n        if ((navPreDivision % INT_FP_SCALING_FACTOR) != 0) {\n            navNew = navNew.add(1);\n        }\n    }\n\n    function _totalSupply() private view returns (uint256 totalSupply) {\n        ExpandedIERC20 thisErc20Token = ExpandedIERC20(address(this));\n        return thisErc20Token.totalSupply();\n    }\n\n    function _takePercentage(uint256 value, uint256 percentage) private pure returns (uint256 result) {\n        return value.mul(percentage).div(UINT_FP_SCALING_FACTOR);\n    }\n\n    function _takePercentage(int256 value, uint256 percentage) private pure returns (int256 result) {\n        return value.mul(_safeIntCast(percentage)).div(INT_FP_SCALING_FACTOR);\n    }\n\n    function _takePercentage(int256 value, int256 percentage) private pure returns (int256 result) {\n        return value.mul(percentage).div(INT_FP_SCALING_FACTOR);\n    }\n\n    function _absoluteValue(int256 value) private pure returns (int256 result) {\n        return value \u003c 0 ? value.mul(-1) : value;\n    }\n\n    function _safeIntCast(uint256 value) private pure returns (int256 result) {\n        require(value \u003c= INT_MAX);\n        return int256(value);\n    }\n\n    function _safeUintCast(int256 value) private pure returns (uint256 result) {\n        require(value \u003e= 0);\n        return uint256(value);\n    }\n}\n\n\n/**\n * @title A synthetic token whose value tracks an arbitrary price feed.\n */\ncontract TokenizedDerivative is ERC20, AdministrateeInterface, ExpandedIERC20 {\n    using TokenizedDerivativeUtils for TDS.Storage;\n\n    TDS.Storage public derivativeStorage;\n\n    // These events are actually emitted by TokenizedDerivativeUtils, but we unfortunately have to define the events\n    // here as well.\n    event NavUpdated(string symbol, int256 newNav, int256 newTokenPrice);\n    event Default(string symbol, uint256 defaultTime, int256 defaultNav);\n    event Settled(string symbol, uint256 settleTime, int256 finalNav);\n    event Expired(string symbol, uint256 expiryTime);\n    event Disputed(string symbol, uint256 timeDisputed, int256 navDisputed);\n    event EmergencyShutdownTransition(string symbol, uint256 shutdownTime);\n    event TokensCreated(string symbol, uint256 numTokensCreated);\n    event TokensRedeemed(string symbol, uint256 numTokensRedeemed);\n    event Deposited(string symbol, uint256 amount);\n    event Withdrawal(string symbol, uint256 amount);\n\n    constructor(\n        TokenizedDerivativeParams.ConstructorParams memory params,\n        string memory _name,\n        string memory _symbol\n    ) public ERC20(_name, _symbol) {\n        // Initialize the contract.\n        derivativeStorage._initialize(params, _symbol);\n    }\n\n    /**\n     * @notice Creates tokens with sent margin and sends the caller back any additional margin.\n     * @param marginForPurchase Maximum amount of margin currency to use to create tokens.\n     * @param tokensToPurchase Number of tokens to create.\n     */\n    function createTokens(uint256 marginForPurchase, uint256 tokensToPurchase) external payable {\n        derivativeStorage._createTokens(marginForPurchase, tokensToPurchase);\n    }\n\n    /**\n     * @notice Creates tokens with sent margin and deposits additional margin in short account.\n     * @param marginForPurchase Maximum amount of margin currency to use to create tokens.\n     * @param tokensToPurchase Number of tokens to create.\n     */\n    function depositAndCreateTokens(uint256 marginForPurchase, uint256 tokensToPurchase) external payable {\n        derivativeStorage._depositAndCreateTokens(marginForPurchase, tokensToPurchase);\n    }\n\n    /**\n     * @notice Redeems tokens for margin currency.\n     */\n    function redeemTokens(uint256 tokensToRedeem) external {\n        derivativeStorage._redeemTokens(tokensToRedeem);\n    }\n\n    /**\n     * @notice Triggers a price dispute for the most recent remargin time.\n     * @param depositMargin Must be at least `disputeDeposit` percent of the required margin.\n     */\n    function dispute(uint256 depositMargin) external payable {\n        derivativeStorage._dispute(depositMargin);\n    }\n\n    /**\n     * @notice Withdraws `amount` from short margin account.\n     */\n    function withdraw(uint256 amount) external {\n        derivativeStorage._withdraw(amount);\n    }\n\n    /**\n     * @notice Pays (Oracle and service) fees for the previous period, updates the contract NAV, moves margin between\n     * long and short accounts to reflect the new NAV, and checks if both accounts meet minimum requirements.\n     */\n    function remargin() external override {\n        derivativeStorage._remargin();\n    }\n\n    /**\n     * @notice Forgo the Oracle verified price and settle the contract with last remargin price.\n     * @dev This method is only callable on contracts in the `Defaulted` state, and the default penalty is always\n     * transferred from the short to the long account.\n     */\n    function acceptPriceAndSettle() external {\n        derivativeStorage._acceptPriceAndSettle();\n    }\n\n    /**\n     * @notice Assigns an address to be the contract\u0027s Delegate AP that can create and redeem.\n     * @dev Replaces previous value. Set to 0x0 to indicate there is no Delegate AP.\n     */\n    function setApDelegate(address apDelegate) external {\n        derivativeStorage._setApDelegate(apDelegate);\n    }\n\n    /**\n     * @notice Moves the contract into the Emergency state, where it waits on an Oracle price for the most recent\n     * remargin time.\n     */\n    function emergencyShutdown() external override {\n        derivativeStorage._emergencyShutdown();\n    }\n\n    /**\n     * @notice Performs a final remargin, assesses any penalties, and moves the contract into the `Settled` state. An\n     * Oracle price must be available.\n     */\n    function settle() external {\n        derivativeStorage._settle();\n    }\n\n    /**\n     * @notice Adds the margin to the short account.\n     * @dev For ETH-margined contracts, send ETH along with the call. In the case of an ERC20 margin currency, authorize\n     * before calling this method.\n     */\n    function deposit(uint256 amountToDeposit) external payable {\n        derivativeStorage._deposit(amountToDeposit);\n    }\n\n    /**\n     * @notice Withdraw any ERC20 balance that is not the margin token. Only callable by the sponsor.\n     */\n    function withdrawUnexpectedErc20(address erc20Address, uint256 amount) external {\n        derivativeStorage._withdrawUnexpectedErc20(erc20Address, amount);\n    }\n\n    // ExpandedIERC20 methods.\n    modifier onlyThis {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    /**\n     * @notice Destroys `value` tokens from the caller.\n     * @dev Only this contract or its libraries are allowed to burn tokens.\n     */\n    function burn(uint256 value) external override onlyThis {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @notice Creates `value` tokens and assigns them to `to`, increasing the total supply.\n     * @dev Only this contract or its libraries are allowed to mint tokens.\n     */\n    function mint(address to, uint256 value) external override onlyThis returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n\n    /**\n     * @notice Returns the expected net asset value (NAV) of the contract using the latest available Price Feed price.\n     */\n    function calcNAV() external view returns (int256 navNew) {\n        return derivativeStorage._calcNAV();\n    }\n\n    /**\n     * @notice Returns the expected value of each the outstanding tokens of the contract using the latest available\n     * Price Feed price.\n     */\n    function calcTokenValue() external view returns (int256 newTokenValue) {\n        return derivativeStorage._calcTokenValue();\n    }\n\n    /**\n     * @notice Returns the expected balance of the short margin account using the latest available Price Feed price.\n     */\n    function calcShortMarginBalance() external view returns (int256 newShortMarginBalance) {\n        return derivativeStorage._calcShortMarginBalance();\n    }\n\n    /**\n     * @notice Returns the expected short margin in excess of the margin requirement using the latest available Price\n     * Feed price.\n     * @dev Value will be negative if the short margin is expected to be below the margin requirement.\n     */\n    function calcExcessMargin() external view returns (int256 excessMargin) {\n        return derivativeStorage._calcExcessMargin();\n    }\n\n    /**\n     * @notice Returns the required margin, as of the last remargin.\n     * @dev Note that `calcExcessMargin` uses updated values using the latest available Price Feed price.\n     */\n    function getCurrentRequiredMargin() external view returns (int256 requiredMargin) {\n        return derivativeStorage._getCurrentRequiredMargin();\n    }\n\n    /**\n     * @notice Returns whether the contract can be settled, i.e., is it valid to call settle() now.\n     */\n    function canBeSettled() external view returns (bool canContractBeSettled) {\n        return derivativeStorage._canBeSettled();\n    }\n\n    /**\n     * @notice Returns the updated underlying price that was used in the calc* methods above.\n     * @dev It will be a price feed price if the contract is Live and will remain Live, or an Oracle price if the\n     * contract is settled/about to be settled.  Reverts if no Oracle price is available but an Oracle price is\n     * required.\n     */\n    function getUpdatedUnderlyingPrice() external view returns (int256 underlyingPrice, uint256 time) {\n        return derivativeStorage._getUpdatedUnderlyingPrice();\n    }\n}\n"},"TokenizedDerivativeCreator.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./Testable.sol\";\nimport \"./AddressWhitelist.sol\";\nimport \"./ContractCreator.sol\";\nimport \"./TokenizedDerivative.sol\";\n\n\n/**\n * @title Contract creator for TokenizedDerivative.\n */\ncontract TokenizedDerivativeCreator is ContractCreator, Testable {\n    struct Params {\n        address priceFeedAddress;\n        uint256 defaultPenalty; // Percentage of mergin requirement * 10^18\n        uint256 supportedMove; // Expected percentage move in the underlying that the long is protected against.\n        bytes32 product;\n        uint256 fixedYearlyFee; // Percentage of nav * 10^18\n        uint256 disputeDeposit; // Percentage of mergin requirement * 10^18\n        address returnCalculator;\n        uint256 startingTokenPrice;\n        uint256 expiry;\n        address marginCurrency;\n        uint256 withdrawLimit; // Percentage of shortBalance * 10^18\n        TokenizedDerivativeParams.ReturnType returnType;\n        uint256 startingUnderlyingPrice;\n        string name;\n        string symbol;\n    }\n\n    AddressWhitelist public returnCalculatorWhitelist;\n    AddressWhitelist public marginCurrencyWhitelist;\n\n    event CreatedTokenizedDerivative(address contractAddress);\n\n    constructor(\n        address _finderAddress,\n        address _returnCalculatorWhitelist,\n        address _marginCurrencyWhitelist,\n        address _timerAddress\n    ) public ContractCreator(_finderAddress) Testable(_timerAddress) {\n        returnCalculatorWhitelist = AddressWhitelist(_returnCalculatorWhitelist);\n        marginCurrencyWhitelist = AddressWhitelist(_marginCurrencyWhitelist);\n    }\n\n    /**\n     * @notice Creates a new instance of `TokenizedDerivative` with the provided `params`.\n     */\n    function createTokenizedDerivative(Params memory params) public returns (address derivativeAddress) {\n        TokenizedDerivative derivative = new TokenizedDerivative(_convertParams(params), params.name, params.symbol);\n\n        address[] memory parties = new address[](1);\n        parties[0] = msg.sender;\n\n        _registerContract(parties, address(derivative));\n\n        emit CreatedTokenizedDerivative(address(derivative));\n\n        return address(derivative);\n    }\n\n    // Converts createTokenizedDerivative params to TokenizedDerivative constructor params.\n    function _convertParams(Params memory params)\n        private\n        view\n        returns (TokenizedDerivativeParams.ConstructorParams memory constructorParams)\n    {\n        // Copy and verify externally provided variables.\n        constructorParams.sponsor = msg.sender;\n\n        require(returnCalculatorWhitelist.isOnWhitelist(params.returnCalculator));\n        constructorParams.returnCalculator = params.returnCalculator;\n\n        require(marginCurrencyWhitelist.isOnWhitelist(params.marginCurrency));\n        constructorParams.marginCurrency = params.marginCurrency;\n\n        constructorParams.priceFeedAddress = params.priceFeedAddress;\n        constructorParams.defaultPenalty = params.defaultPenalty;\n        constructorParams.supportedMove = params.supportedMove;\n        constructorParams.product = params.product;\n        constructorParams.fixedYearlyFee = params.fixedYearlyFee;\n        constructorParams.disputeDeposit = params.disputeDeposit;\n        constructorParams.startingTokenPrice = params.startingTokenPrice;\n        constructorParams.expiry = params.expiry;\n        constructorParams.withdrawLimit = params.withdrawLimit;\n        constructorParams.returnType = params.returnType;\n        constructorParams.startingUnderlyingPrice = params.startingUnderlyingPrice;\n\n        // Copy internal variables.\n        constructorParams.finderAddress = finderAddress;\n        constructorParams.creationTime = getCurrentTime();\n    }\n}\n"},"TokenMigrator.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./FixedPoint.sol\";\nimport \"./ExpandedIERC20.sol\";\nimport \"./VotingToken.sol\";\n\n\n/**\n * @title Migration contract for VotingTokens.\n * @dev Handles migrating token holders from one token to the next.\n */\ncontract TokenMigrator {\n    using FixedPoint for FixedPoint.Unsigned;\n\n    /****************************************\n     *    INTERNAL VARIABLES AND STORAGE    *\n     ****************************************/\n\n    VotingToken public oldToken;\n    ExpandedIERC20 public newToken;\n\n    uint256 public snapshotId;\n    FixedPoint.Unsigned public rate;\n\n    mapping(address =\u003e bool) public hasMigrated;\n\n    /**\n     * @notice Construct the TokenMigrator contract.\n     * @dev This function triggers the snapshot upon which all migrations will be based.\n     * @param _rate the number of old tokens it takes to generate one new token.\n     * @param _oldToken address of the token being migrated from.\n     * @param _newToken address of the token being migrated to.\n     */\n    constructor(\n        FixedPoint.Unsigned memory _rate,\n        address _oldToken,\n        address _newToken\n    ) public {\n        // Prevents division by 0 in migrateTokens().\n        // Also it doesn’t make sense to have “0 old tokens equate to 1 new token”.\n        require(_rate.isGreaterThan(0), \"Rate can\u0027t be 0\");\n        rate = _rate;\n        newToken = ExpandedIERC20(_newToken);\n        oldToken = VotingToken(_oldToken);\n        snapshotId = oldToken.snapshot();\n    }\n\n    /**\n     * @notice Migrates the tokenHolder\u0027s old tokens to new tokens.\n     * @dev This function can only be called once per `tokenHolder`. Anyone can call this method\n     * on behalf of any other token holder since there is no disadvantage to receiving the tokens earlier.\n     * @param tokenHolder address of the token holder to migrate.\n     */\n    function migrateTokens(address tokenHolder) external {\n        require(!hasMigrated[tokenHolder], \"Already migrated tokens\");\n        hasMigrated[tokenHolder] = true;\n\n        FixedPoint.Unsigned memory oldBalance = FixedPoint.Unsigned(oldToken.balanceOfAt(tokenHolder, snapshotId));\n\n        if (!oldBalance.isGreaterThan(0)) {\n            return;\n        }\n\n        FixedPoint.Unsigned memory newBalance = oldBalance.div(rate);\n        require(newToken.mint(tokenHolder, newBalance.rawValue), \"Mint failed\");\n    }\n}\n"},"TokenTimelock.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeERC20.sol\";\n\n/**\n * @dev A token holder contract that will allow a beneficiary to extract the\n * tokens after a given release time.\n *\n * Useful for simple vesting schedules like \"advisors get all of their tokens\n * after 1 year\".\n *\n * For a more complete vesting schedule, see {TokenVesting}.\n */\ncontract TokenTimelock {\n    using SafeERC20 for IERC20;\n\n    // ERC20 basic token contract being held\n    IERC20 private _token;\n\n    // beneficiary of tokens after they are released\n    address private _beneficiary;\n\n    // timestamp when token release is enabled\n    uint256 private _releaseTime;\n\n    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(releaseTime \u003e block.timestamp, \"TokenTimelock: release time is before current time\");\n        _token = token;\n        _beneficiary = beneficiary;\n        _releaseTime = releaseTime;\n    }\n\n    /**\n     * @return the token being held.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the time when the tokens are released.\n     */\n    function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n    function release() public virtual {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp \u003e= _releaseTime, \"TokenTimelock: current time is before release time\");\n\n        uint256 amount = _token.balanceOf(address(this));\n        require(amount \u003e 0, \"TokenTimelock: no tokens to release\");\n\n        _token.safeTransfer(_beneficiary, amount);\n    }\n}\n"},"TokenVesting.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n    // cliff period of a year and a duration of four years, are safe to use.\n    // solhint-disable not-rely-on-time\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event TokensReleased(address token, uint256 amount);\n    event TokenVestingRevoked(address token);\n\n    // beneficiary of tokens after they are released\n    address private _beneficiary;\n\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n    uint256 private _cliff;\n    uint256 private _start;\n    uint256 private _duration;\n\n    bool private _revocable;\n\n    mapping (address =\u003e uint256) private _released;\n    mapping (address =\u003e bool) private _revoked;\n\n    /**\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\n     * of the balance will have vested.\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n     * @param start the time (as Unix time) at which point vesting starts\n     * @param duration duration in seconds of the period in which the tokens will vest\n     * @param revocable whether the vesting is revocable or not\n     */\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\n        // solhint-disable-next-line max-line-length\n        require(cliffDuration \u003c= duration, \"TokenVesting: cliff is longer than duration\");\n        require(duration \u003e 0, \"TokenVesting: duration is 0\");\n        // solhint-disable-next-line max-line-length\n        require(start.add(duration) \u003e block.timestamp, \"TokenVesting: final time is before current time\");\n\n        _beneficiary = beneficiary;\n        _revocable = revocable;\n        _duration = duration;\n        _cliff = start.add(cliffDuration);\n        _start = start;\n    }\n\n    /**\n     * @return the beneficiary of the tokens.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return the cliff time of the token vesting.\n     */\n    function cliff() public view returns (uint256) {\n        return _cliff;\n    }\n\n    /**\n     * @return the start time of the token vesting.\n     */\n    function start() public view returns (uint256) {\n        return _start;\n    }\n\n    /**\n     * @return the duration of the token vesting.\n     */\n    function duration() public view returns (uint256) {\n        return _duration;\n    }\n\n    /**\n     * @return true if the vesting is revocable.\n     */\n    function revocable() public view returns (bool) {\n        return _revocable;\n    }\n\n    /**\n     * @return the amount of the token released.\n     */\n    function released(address token) public view returns (uint256) {\n        return _released[token];\n    }\n\n    /**\n     * @return true if the token is revoked.\n     */\n    function revoked(address token) public view returns (bool) {\n        return _revoked[token];\n    }\n\n    /**\n     * @notice Transfers vested tokens to beneficiary.\n     * @param token ERC20 token which is being vested\n     */\n    function release(IERC20 token) public {\n        uint256 unreleased = _releasableAmount(token);\n\n        require(unreleased \u003e 0, \"TokenVesting: no tokens are due\");\n\n        _released[address(token)] = _released[address(token)].add(unreleased);\n\n        token.safeTransfer(_beneficiary, unreleased);\n\n        emit TokensReleased(address(token), unreleased);\n    }\n\n    /**\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\n     * remain in the contract, the rest are returned to the owner.\n     * @param token ERC20 token which is being vested\n     */\n    function revoke(IERC20 token) public onlyOwner {\n        require(_revocable, \"TokenVesting: cannot revoke\");\n        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\n\n        uint256 balance = token.balanceOf(address(this));\n\n        uint256 unreleased = _releasableAmount(token);\n        uint256 refund = balance.sub(unreleased);\n\n        _revoked[address(token)] = true;\n\n        token.safeTransfer(owner(), refund);\n\n        emit TokenVestingRevoked(address(token));\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested but hasn\u0027t been released yet.\n     * @param token ERC20 token which is being vested\n     */\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\n        return _vestedAmount(token).sub(_released[address(token)]);\n    }\n\n    /**\n     * @dev Calculates the amount that has already vested.\n     * @param token ERC20 token which is being vested\n     */\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\n        uint256 currentBalance = token.balanceOf(address(this));\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\n\n        if (block.timestamp \u003c _cliff) {\n            return 0;\n        } else if (block.timestamp \u003e= _start.add(_duration) || _revoked[address(token)]) {\n            return totalBalance;\n        } else {\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n        }\n    }\n}\n"},"Umip3Upgrader.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Finder.sol\";\nimport \"./Constants.sol\";\nimport \"./Voting.sol\";\n\n\n/**\n * @title A contract to track a whitelist of addresses.\n */\ncontract Umip3Upgrader {\n    // Existing governor is the only one who can initiate the upgrade.\n    address public existingGovernor;\n\n    // Existing Voting contract needs to be informed of the address of the new Voting contract.\n    Voting public existingVoting;\n\n    // New governor will be the new owner of the finder.\n    address public newGovernor;\n\n    // Finder contract to push upgrades to.\n    Finder public finder;\n\n    // Addresses to upgrade.\n    address public voting;\n    address public identifierWhitelist;\n    address public store;\n    address public financialContractsAdmin;\n    address public registry;\n\n    constructor(\n        address _existingGovernor,\n        address _existingVoting,\n        address _finder,\n        address _voting,\n        address _identifierWhitelist,\n        address _store,\n        address _financialContractsAdmin,\n        address _registry,\n        address _newGovernor\n    ) public {\n        existingGovernor = _existingGovernor;\n        existingVoting = Voting(_existingVoting);\n        finder = Finder(_finder);\n        voting = _voting;\n        identifierWhitelist = _identifierWhitelist;\n        store = _store;\n        financialContractsAdmin = _financialContractsAdmin;\n        registry = _registry;\n        newGovernor = _newGovernor;\n    }\n\n    function upgrade() external {\n        require(msg.sender == existingGovernor, \"Upgrade can only be initiated by the existing governor.\");\n\n        // Change the addresses in the Finder.\n        finder.changeImplementationAddress(OracleInterfaces.Oracle, voting);\n        finder.changeImplementationAddress(OracleInterfaces.IdentifierWhitelist, identifierWhitelist);\n        finder.changeImplementationAddress(OracleInterfaces.Store, store);\n        finder.changeImplementationAddress(OracleInterfaces.FinancialContractsAdmin, financialContractsAdmin);\n        finder.changeImplementationAddress(OracleInterfaces.Registry, registry);\n\n        // Transfer the ownership of the Finder to the new Governor now that all the addresses have been updated.\n        finder.transferOwnership(newGovernor);\n\n        // Inform the existing Voting contract of the address of the new Voting contract and transfer its\n        // ownership to the new governor to allow for any future changes to the migrated contract.\n        existingVoting.setMigrated(voting);\n        existingVoting.transferOwnership(newGovernor);\n    }\n}\n"},"Uniswap.sol":{"content":"pragma solidity ^0.6.0;\n\n\n/**\n * @title Interface for Uniswap v2.\n * @dev This only contains the methods/events that we use in our contracts or offchain infrastructure.\n */\nabstract contract Uniswap {\n    // Called after every swap showing the new uniswap \"price\" for this token pair.\n    event Sync(uint112 reserve0, uint112 reserve1);\n}\n"},"UniswapMock.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Uniswap.sol\";\n\n\n/**\n * @title Uniswap v2 Mock that allows manual price injection.\n */\ncontract UniswapMock is Uniswap {\n    function setPrice(uint112 reserve0, uint112 reserve1) external {\n        emit Sync(reserve0, reserve1);\n    }\n}\n"},"VoteTiming.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./VotingInterface.sol\";\n\n\n/**\n * @title Library to compute rounds and phases for an equal length commit-reveal voting cycle.\n */\nlibrary VoteTiming {\n    using SafeMath for uint256;\n\n    struct Data {\n        uint256 phaseLength;\n    }\n\n    /**\n     * @notice Initializes the data object. Sets the phase length based on the input.\n     */\n    function init(Data storage data, uint256 phaseLength) internal {\n        // This should have a require message but this results in an internal Solidity error.\n        require(phaseLength \u003e 0);\n        data.phaseLength = phaseLength;\n    }\n\n    /**\n     * @notice Computes the roundID based off the current time as floor(timestamp/phaseLength).\n     * @dev The round ID depends on the global timestamp but not on the lifetime of the system.\n     * The consequence is that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return roundId defined as a function of the currentTime and `phaseLength` from `data`.\n     */\n    function computeCurrentRoundId(Data storage data, uint256 currentTime) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return currentTime.div(roundLength);\n    }\n\n    /**\n     * @notice compute the round end time as a function of the round Id.\n     * @param data input data object.\n     * @param roundId uniquely identifies the current round.\n     * @return timestamp unix time of when the current round will end.\n     */\n    function computeRoundEndTime(Data storage data, uint256 roundId) internal view returns (uint256) {\n        uint256 roundLength = data.phaseLength.mul(uint256(VotingInterface.Phase.NUM_PHASES_PLACEHOLDER));\n        return roundLength.mul(roundId.add(1));\n    }\n\n    /**\n     * @notice Computes the current phase based only on the current time.\n     * @param data input data object.\n     * @param currentTime input unix timestamp used to compute the current roundId.\n     * @return current voting phase based on current time and vote phases configuration.\n     */\n    function computeCurrentPhase(Data storage data, uint256 currentTime) internal view returns (VotingInterface.Phase) {\n        // This employs some hacky casting. We could make this an if-statement if we\u0027re worried about type safety.\n        return\n            VotingInterface.Phase(\n                currentTime.div(data.phaseLength).mod(uint256(VotingInterface.Phase.NUM_PHASES_PLACEHOLDER))\n            );\n    }\n}\n"},"VoteTimingTest.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./VotingInterface.sol\";\nimport \"./VoteTiming.sol\";\n\n\n// Wraps the library VoteTiming for testing purposes.\ncontract VoteTimingTest {\n    using VoteTiming for VoteTiming.Data;\n\n    VoteTiming.Data public voteTiming;\n\n    constructor(uint256 phaseLength) public {\n        wrapInit(phaseLength);\n    }\n\n    function wrapComputeCurrentRoundId(uint256 currentTime) external view returns (uint256) {\n        return voteTiming.computeCurrentRoundId(currentTime);\n    }\n\n    function wrapComputeCurrentPhase(uint256 currentTime) external view returns (VotingInterface.Phase) {\n        return voteTiming.computeCurrentPhase(currentTime);\n    }\n\n    function wrapInit(uint256 phaseLength) public {\n        voteTiming.init(phaseLength);\n    }\n}\n"},"Voting.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./FixedPoint.sol\";\nimport \"./Testable.sol\";\nimport \"./FinderInterface.sol\";\nimport \"./OracleInterface.sol\";\nimport \"./VotingInterface.sol\";\nimport \"./IdentifierWhitelistInterface.sol\";\nimport \"./Registry.sol\";\nimport \"./ResultComputation.sol\";\nimport \"./VoteTiming.sol\";\nimport \"./VotingToken.sol\";\nimport \"./Constants.sol\";\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\n\n/**\n * @title Voting system for Oracle.\n * @dev Handles receiving and resolving price requests via a commit-reveal voting scheme.\n */\ncontract Voting is Testable, Ownable, OracleInterface, VotingInterface {\n    using FixedPoint for FixedPoint.Unsigned;\n    using SafeMath for uint256;\n    using VoteTiming for VoteTiming.Data;\n    using ResultComputation for ResultComputation.Data;\n\n    /****************************************\n     *        VOTING DATA STRUCTURES        *\n     ****************************************/\n\n    // Identifies a unique price request for which the Oracle will always return the same value.\n    // Tracks ongoing votes as well as the result of the vote.\n    struct PriceRequest {\n        bytes32 identifier;\n        uint256 time;\n        // A map containing all votes for this price in various rounds.\n        mapping(uint256 =\u003e VoteInstance) voteInstances;\n        // If in the past, this was the voting round where this price was resolved. If current or the upcoming round,\n        // this is the voting round where this price will be voted on, but not necessarily resolved.\n        uint256 lastVotingRound;\n        // The index in the `pendingPriceRequests` that references this PriceRequest. A value of UINT_MAX means that\n        // this PriceRequest is resolved and has been cleaned up from `pendingPriceRequests`.\n        uint256 index;\n    }\n\n    struct VoteInstance {\n        // Maps (voterAddress) to their submission.\n        mapping(address =\u003e VoteSubmission) voteSubmissions;\n        // The data structure containing the computed voting results.\n        ResultComputation.Data resultComputation;\n    }\n\n    struct VoteSubmission {\n        // A bytes32 of `0` indicates no commit or a commit that was already revealed.\n        bytes32 commit;\n        // The hash of the value that was revealed.\n        // Note: this is only used for computation of rewards.\n        bytes32 revealHash;\n    }\n\n    struct Round {\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\n    }\n\n    // Represents the status a price request has.\n    enum RequestStatus {\n        NotRequested, // Was never requested.\n        Active, // Is being voted on in the current round.\n        Resolved, // Was resolved in a previous round.\n        Future // Is scheduled to be voted on in a future round.\n    }\n\n    // Only used as a return value in view methods -- never stored in the contract.\n    struct RequestState {\n        RequestStatus status;\n        uint256 lastVotingRound;\n    }\n\n    /****************************************\n     *          INTERNAL TRACKING           *\n     ****************************************/\n\n    // Maps round numbers to the rounds.\n    mapping(uint256 =\u003e Round) public rounds;\n\n    // Maps price request IDs to the PriceRequest struct.\n    mapping(bytes32 =\u003e PriceRequest) private priceRequests;\n\n    // Price request ids for price requests that haven\u0027t yet been marked as resolved.\n    // These requests may be for future rounds.\n    bytes32[] internal pendingPriceRequests;\n\n    VoteTiming.Data public voteTiming;\n\n    // Percentage of the total token supply that must be used in a vote to\n    // create a valid price resolution. 1 == 100%.\n    FixedPoint.Unsigned public gatPercentage;\n\n    // Global setting for the rate of inflation per vote. This is the percentage of the snapshotted total supply that\n    // should be split among the correct voters.\n    // Note: this value is used to set per-round inflation at the beginning of each round. 1 = 100%.\n    FixedPoint.Unsigned public inflationRate;\n\n    // Time in seconds from the end of the round in which a price request is\n    // resolved that voters can still claim their rewards.\n    uint256 public rewardsExpirationTimeout;\n\n    // Reference to the voting token.\n    VotingToken public votingToken;\n\n    // Reference to the Finder.\n    FinderInterface private finder;\n\n    // If non-zero, this contract has been migrated to this address. All voters and\n    // financial contracts should query the new address only.\n    address public migratedAddress;\n\n    // Max value of an unsigned integer.\n    uint256 private constant UINT_MAX = ~uint256(0);\n\n    /***************************************\n     *                EVENTS                *\n     ****************************************/\n\n    event VoteCommitted(address indexed voter, uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\n\n    event EncryptedVote(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        bytes encryptedVote\n    );\n\n    event VoteRevealed(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        int256 price,\n        uint256 numTokens\n    );\n\n    event RewardsRetrieved(\n        address indexed voter,\n        uint256 indexed roundId,\n        bytes32 indexed identifier,\n        uint256 time,\n        uint256 numTokens\n    );\n\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\n\n    event PriceResolved(uint256 indexed roundId, bytes32 indexed identifier, uint256 time, int256 price);\n\n    /**\n     * @notice Construct the Voting contract.\n     * @param _phaseLength length of the commit and reveal phases in seconds.\n     * @param _gatPercentage of the total token supply that must be used in a vote to create a valid price resolution.\n     * @param _inflationRate percentage inflation per round used to increase token supply of correct voters.\n     * @param _rewardsExpirationTimeout timeout, in seconds, within which rewards must be claimed.\n     * @param _votingToken address of the UMA token contract used to commit votes.\n     * @param _finder keeps track of all contracts within the system based on their interfaceName.\n     * @param _timerAddress Contract that stores the current time in a testing environment.\n     * Must be set to 0x0 for production environments that use live time.\n     */\n    constructor(\n        uint256 _phaseLength,\n        FixedPoint.Unsigned memory _gatPercentage,\n        FixedPoint.Unsigned memory _inflationRate,\n        uint256 _rewardsExpirationTimeout,\n        address _votingToken,\n        address _finder,\n        address _timerAddress\n    ) public Testable(_timerAddress) {\n        voteTiming.init(_phaseLength);\n        require(_gatPercentage.isLessThanOrEqual(1), \"GAT percentage must be \u003c= 100%\");\n        gatPercentage = _gatPercentage;\n        inflationRate = _inflationRate;\n        votingToken = VotingToken(_votingToken);\n        finder = FinderInterface(_finder);\n        rewardsExpirationTimeout = _rewardsExpirationTimeout;\n    }\n\n    /***************************************\n                    MODIFIERS\n    ****************************************/\n\n    modifier onlyRegisteredContract() {\n        if (migratedAddress != address(0)) {\n            require(msg.sender == migratedAddress, \"Caller must be migrated address\");\n        } else {\n            Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\n            require(registry.isContractRegistered(msg.sender), \"Called must be registered\");\n        }\n        _;\n    }\n\n    modifier onlyIfNotMigrated() {\n        require(migratedAddress == address(0), \"Only call this if not migrated\");\n        _;\n    }\n\n    /****************************************\n     *  PRICE REQUEST AND ACCESS FUNCTIONS  *\n     ****************************************/\n\n    /**\n     * @notice Enqueues a request (if a request isn\u0027t already present) for the given `identifier`, `time` pair.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp for the price request.\n     */\n    function requestPrice(bytes32 identifier, uint256 time) external override onlyRegisteredContract() {\n        uint256 blockTime = getCurrentTime();\n        require(time \u003c= blockTime, \"Can only request in past\");\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier request\");\n\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time);\n        PriceRequest storage priceRequest = priceRequests[priceRequestId];\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n\n        if (requestStatus == RequestStatus.NotRequested) {\n            // Price has never been requested.\n            // Price requests always go in the next round, so add 1 to the computed current round.\n            uint256 nextRoundId = currentRoundId.add(1);\n\n            priceRequests[priceRequestId] = PriceRequest({\n                identifier: identifier,\n                time: time,\n                lastVotingRound: nextRoundId,\n                index: pendingPriceRequests.length\n            });\n            pendingPriceRequests.push(priceRequestId);\n            emit PriceRequestAdded(nextRoundId, identifier, time);\n        }\n    }\n\n    /**\n     * @notice Whether the price for `identifier` and `time` is available.\n     * @dev Time must be in the past and the identifier must be supported.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @return _hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\n     */\n    function hasPrice(bytes32 identifier, uint256 time) external override view onlyRegisteredContract() returns (bool) {\n        (bool _hasPrice, , ) = _getPriceOrError(identifier, time);\n        return _hasPrice;\n    }\n\n    /**\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\n     * @dev If the price is not available, the method reverts.\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\n     * @param time unix timestamp of for the price request.\n     * @return int256 representing the resolved price for the given identifier and timestamp.\n     */\n    function getPrice(bytes32 identifier, uint256 time)\n        external\n        override\n        view\n        onlyRegisteredContract()\n        returns (int256)\n    {\n        (bool _hasPrice, int256 price, string memory message) = _getPriceOrError(identifier, time);\n\n        // If the price wasn\u0027t available, revert with the provided message.\n        require(_hasPrice, message);\n        return price;\n    }\n\n    /**\n     * @notice Gets the status of a list of price requests, identified by their identifier and time.\n     * @dev If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\n     * @param requests array of type PendingRequest which includes an identifier and timestamp for each request.\n     * @return requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\n     */\n    function getPriceRequestStatuses(PendingRequest[] memory requests) public view returns (RequestState[] memory) {\n        RequestState[] memory requestStates = new RequestState[](requests.length);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        for (uint256 i = 0; i \u003c requests.length; i++) {\n            PriceRequest storage priceRequest = _getPriceRequest(requests[i].identifier, requests[i].time);\n\n            RequestStatus status = _getRequestStatus(priceRequest, currentRoundId);\n\n            // If it\u0027s an active request, its true lastVotingRound is the current one, even if it hasn\u0027t been updated.\n            if (status == RequestStatus.Active) {\n                requestStates[i].lastVotingRound = currentRoundId;\n            } else {\n                requestStates[i].lastVotingRound = priceRequest.lastVotingRound;\n            }\n            requestStates[i].status = status;\n        }\n        return requestStates;\n    }\n\n    /****************************************\n     *            VOTING FUNCTIONS          *\n     ****************************************/\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that\u0027s currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) public override onlyIfNotMigrated() {\n        require(hash != bytes32(0), \"Invalid provided hash\");\n        // Current time is required for all vote timing queries.\n        uint256 blockTime = getCurrentTime();\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Commit, \"Cannot commit in reveal phase\");\n\n        // At this point, the computed and last updated round ID should be equal.\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time);\n        require(\n            _getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active,\n            \"Cannot commit inactive request\"\n        );\n\n        priceRequest.lastVotingRound = currentRoundId;\n        VoteInstance storage voteInstance = priceRequest.voteInstances[currentRoundId];\n        voteInstance.voteSubmissions[msg.sender].commit = hash;\n\n        emit VoteCommitted(msg.sender, currentRoundId, identifier, time);\n    }\n\n    /**\n     * @notice Snapshot the current round\u0027s token balances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times, but only the first call per round into this function or `revealVote`\n     * will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.\n     */\n    function snapshotCurrentRound() external override onlyIfNotMigrated() {\n        uint256 blockTime = getCurrentTime();\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Reveal, \"Only snapshot in reveal phase\");\n\n        uint256 roundId = voteTiming.computeCurrentRoundId(blockTime);\n        _freezeRoundVariables(roundId);\n    }\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `time`, `address`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price being voted on.\n     * @param price voted on during the commit phase.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) public override onlyIfNotMigrated() {\n        uint256 blockTime = getCurrentTime();\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Reveal, \"Cannot reveal in commit phase\");\n        // Note: computing the current round is required to disallow people from\n        // revealing an old commit after the round is over.\n        uint256 roundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time);\n        VoteInstance storage voteInstance = priceRequest.voteInstances[roundId];\n        VoteSubmission storage voteSubmission = voteInstance.voteSubmissions[msg.sender];\n\n        // 0 hashes are disallowed in the commit phase, so they indicate a different error.\n        // Cannot reveal an uncommitted or previously revealed hash\n        require(voteSubmission.commit != bytes32(0), \"Invalid hash reveal\");\n        require(\n            keccak256(abi.encodePacked(price, salt, msg.sender, time, roundId, identifier)) == voteSubmission.commit,\n            \"Revealed data != commit hash\"\n        );\n        delete voteSubmission.commit;\n\n        // Lock in round variables including snapshotId and inflation rate. Not that this will only execute a snapshot\n        // if the `snapshotCurrentRound` function was not already called for this round.\n        _freezeRoundVariables(roundId);\n\n        // Get the frozen snapshotId\n        uint256 snapshotId = rounds[roundId].snapshotId;\n\n        // Get the voter\u0027s snapshotted balance. Since balances are returned pre-scaled by 10**18, we can directly\n        // initialize the Unsigned value with the returned uint.\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(votingToken.balanceOfAt(msg.sender, snapshotId));\n\n        // Set the voter\u0027s submission.\n        voteSubmission.revealHash = keccak256(abi.encode(price));\n\n        // Add vote to the results.\n        voteInstance.resultComputation.addVote(price, balance);\n\n        emit VoteRevealed(msg.sender, roundId, identifier, time, price, balance.rawValue);\n    }\n\n    /**\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\n     * @param time unix timestamp of for the price request.\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\n     */\n    function commitAndEmitEncryptedVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash,\n        bytes memory encryptedVote\n    ) public {\n        commitVote(identifier, time, hash);\n\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n        emit EncryptedVote(msg.sender, roundId, identifier, time, encryptedVote);\n    }\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is emitted in an event.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(Commitment[] calldata commits) external override {\n        for (uint256 i = 0; i \u003c commits.length; i++) {\n            if (commits[i].encryptedVote.length == 0) {\n                commitVote(commits[i].identifier, commits[i].time, commits[i].hash);\n            } else {\n                commitAndEmitEncryptedVote(\n                    commits[i].identifier,\n                    commits[i].time,\n                    commits[i].hash,\n                    commits[i].encryptedVote\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more information on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(Reveal[] calldata reveals) external override {\n        for (uint256 i = 0; i \u003c reveals.length; i++) {\n            revealVote(reveals[i].identifier, reveals[i].time, reveals[i].price, reveals[i].salt);\n        }\n    }\n\n    /**\n     * @notice Retrieves rewards owed for a set of resolved price requests.\n     * @dev Can only retrieve rewards if calling for a valid round and if the\n     * call is done within the timeout threshold (not expired).\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\n     * @param roundId the round from which voting rewards will be retrieved from.\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\n     * @return totalRewardToIssue total amount of rewards returned to the voter.\n     */\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequest[] memory toRetrieve\n    ) public override returns (FixedPoint.Unsigned memory totalRewardToIssue) {\n        if (migratedAddress != address(0)) {\n            require(msg.sender == migratedAddress, \"Can only call from migrated\");\n        }\n        uint256 blockTime = getCurrentTime();\n        require(roundId \u003c voteTiming.computeCurrentRoundId(blockTime), \"Invalid roundId\");\n\n        Round storage round = rounds[roundId];\n        bool isExpired = blockTime \u003e round.rewardsExpirationTime;\n        FixedPoint.Unsigned memory snapshotBalance = FixedPoint.Unsigned(\n            votingToken.balanceOfAt(voterAddress, round.snapshotId)\n        );\n\n        // Compute the total amount of reward that will be issued for each of the votes in the round.\n        FixedPoint.Unsigned memory snapshotTotalSupply = FixedPoint.Unsigned(\n            votingToken.totalSupplyAt(round.snapshotId)\n        );\n        FixedPoint.Unsigned memory totalRewardPerVote = round.inflationRate.mul(snapshotTotalSupply);\n\n        // Keep track of the voter\u0027s accumulated token reward.\n        totalRewardToIssue = FixedPoint.Unsigned(0);\n\n        for (uint256 i = 0; i \u003c toRetrieve.length; i++) {\n            PriceRequest storage priceRequest = _getPriceRequest(toRetrieve[i].identifier, toRetrieve[i].time);\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            // Only retrieve rewards for votes resolved in same round\n            require(priceRequest.lastVotingRound == roundId, \"Retrieve for votes same round\");\n\n            _resolvePriceRequest(priceRequest, voteInstance);\n\n            if (voteInstance.voteSubmissions[voterAddress].revealHash == 0) {\n                continue;\n            } else if (isExpired) {\n                // Emit a 0 token retrieval on expired rewards.\n                emit RewardsRetrieved(voterAddress, roundId, toRetrieve[i].identifier, toRetrieve[i].time, 0);\n            } else if (\n                voteInstance.resultComputation.wasVoteCorrect(voteInstance.voteSubmissions[voterAddress].revealHash)\n            ) {\n                // The price was successfully resolved during the voter\u0027s last voting round, the voter revealed\n                // and was correct, so they are eligible for a reward.\n                // Compute the reward and add to the cumulative reward.\n                FixedPoint.Unsigned memory reward = snapshotBalance.mul(totalRewardPerVote).div(\n                    voteInstance.resultComputation.getTotalCorrectlyVotedTokens()\n                );\n                totalRewardToIssue = totalRewardToIssue.add(reward);\n\n                // Emit reward retrieval for this vote.\n                emit RewardsRetrieved(\n                    voterAddress,\n                    roundId,\n                    toRetrieve[i].identifier,\n                    toRetrieve[i].time,\n                    reward.rawValue\n                );\n            } else {\n                // Emit a 0 token retrieval on incorrect votes.\n                emit RewardsRetrieved(voterAddress, roundId, toRetrieve[i].identifier, toRetrieve[i].time, 0);\n            }\n\n            // Delete the submission to capture any refund and clean up storage.\n            delete voteInstance.voteSubmissions[voterAddress].revealHash;\n        }\n\n        // Issue any accumulated rewards.\n        if (totalRewardToIssue.isGreaterThan(0)) {\n            require(votingToken.mint(voterAddress, totalRewardToIssue.rawValue), \"Voting token issuance failed\");\n        }\n    }\n\n    /****************************************\n     *        VOTING GETTER FUNCTIONS       *\n     ****************************************/\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests array containing identifiers of type `PendingRequest`.\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests() external override view returns (PendingRequest[] memory) {\n        uint256 blockTime = getCurrentTime();\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\n\n        // Solidity memory arrays aren\u0027t resizable (and reading storage is expensive). Hence this hackery to filter\n        // `pendingPriceRequests` only to those requests that have an Active RequestStatus.\n        PendingRequest[] memory unresolved = new PendingRequest[](pendingPriceRequests.length);\n        uint256 numUnresolved = 0;\n\n        for (uint256 i = 0; i \u003c pendingPriceRequests.length; i++) {\n            PriceRequest storage priceRequest = priceRequests[pendingPriceRequests[i]];\n            if (_getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active) {\n                unresolved[numUnresolved] = PendingRequest({\n                    identifier: priceRequest.identifier,\n                    time: priceRequest.time\n                });\n                numUnresolved++;\n            }\n        }\n\n        PendingRequest[] memory pendingRequests = new PendingRequest[](numUnresolved);\n        for (uint256 i = 0; i \u003c numUnresolved; i++) {\n            pendingRequests[i] = unresolved[i];\n        }\n        return pendingRequests;\n    }\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external override view returns (Phase) {\n        return voteTiming.computeCurrentPhase(getCurrentTime());\n    }\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external override view returns (uint256) {\n        return voteTiming.computeCurrentRoundId(getCurrentTime());\n    }\n\n    /****************************************\n     *        OWNER ADMIN FUNCTIONS         *\n     ****************************************/\n\n    /**\n     * @notice Disables this Voting contract in favor of the migrated one.\n     * @dev Can only be called by the contract owner.\n     * @param newVotingAddress the newly migrated contract address.\n     */\n    function setMigrated(address newVotingAddress) external onlyOwner {\n        migratedAddress = newVotingAddress;\n    }\n\n    /**\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newInflationRate sets the next round\u0027s inflation rate.\n     */\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public onlyOwner {\n        inflationRate = newInflationRate;\n    }\n\n    /**\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\n     * @dev This method is public because calldata structs are not currently supported by solidity.\n     * @param newGatPercentage sets the next round\u0027s Gat percentage.\n     */\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public onlyOwner {\n        require(newGatPercentage.isLessThan(1), \"GAT percentage must be \u003c 100%\");\n        gatPercentage = newGatPercentage;\n    }\n\n    /**\n     * @notice Resets the rewards expiration timeout.\n     * @dev This change only applies to rounds that have not yet begun.\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\n     */\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public onlyOwner {\n        rewardsExpirationTimeout = NewRewardsExpirationTimeout;\n    }\n\n    /****************************************\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\n     ****************************************/\n\n    // Returns the price for a given identifer. Three params are returns: bool if there was an error, int to represent\n    // the resolved price and a string which is filled with an error message, if there was an error or \"\".\n    function _getPriceOrError(bytes32 identifier, uint256 time)\n        private\n        view\n        returns (\n            bool,\n            int256,\n            string memory\n        )\n    {\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time);\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\n\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\n        if (requestStatus == RequestStatus.Active) {\n            return (false, 0, \"Current voting round not ended\");\n        } else if (requestStatus == RequestStatus.Resolved) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (, int256 resolvedPrice) = voteInstance.resultComputation.getResolvedPrice(\n                _computeGat(priceRequest.lastVotingRound)\n            );\n            return (true, resolvedPrice, \"\");\n        } else if (requestStatus == RequestStatus.Future) {\n            return (false, 0, \"Price is still to be voted on\");\n        } else {\n            return (false, 0, \"Price was never requested\");\n        }\n    }\n\n    function _getPriceRequest(bytes32 identifier, uint256 time) private view returns (PriceRequest storage) {\n        return priceRequests[_encodePriceRequest(identifier, time)];\n    }\n\n    function _encodePriceRequest(bytes32 identifier, uint256 time) private pure returns (bytes32) {\n        return keccak256(abi.encode(identifier, time));\n    }\n\n    function _freezeRoundVariables(uint256 roundId) private {\n        Round storage round = rounds[roundId];\n        // Only on the first reveal should the snapshot be captured for that round.\n        if (round.snapshotId == 0) {\n            // There is no snapshot ID set, so create one.\n            round.snapshotId = votingToken.snapshot();\n\n            // Set the round inflation rate to the current global inflation rate.\n            rounds[roundId].inflationRate = inflationRate;\n\n            // Set the round gat percentage to the current global gat rate.\n            rounds[roundId].gatPercentage = gatPercentage;\n\n            // Set the rewards expiration time based on end of time of this round and the current global timeout.\n            rounds[roundId].rewardsExpirationTime = voteTiming.computeRoundEndTime(roundId).add(\n                rewardsExpirationTimeout\n            );\n        }\n    }\n\n    function _resolvePriceRequest(PriceRequest storage priceRequest, VoteInstance storage voteInstance) private {\n        if (priceRequest.index == UINT_MAX) {\n            return;\n        }\n        (bool isResolved, int256 resolvedPrice) = voteInstance.resultComputation.getResolvedPrice(\n            _computeGat(priceRequest.lastVotingRound)\n        );\n        require(isResolved, \"Can\u0027t resolve unresolved request\");\n\n        // Delete the resolved price request from pendingPriceRequests.\n        uint256 lastIndex = pendingPriceRequests.length - 1;\n        PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\n        lastPriceRequest.index = priceRequest.index;\n        pendingPriceRequests[priceRequest.index] = pendingPriceRequests[lastIndex];\n        pendingPriceRequests.pop();\n\n        priceRequest.index = UINT_MAX;\n        emit PriceResolved(priceRequest.lastVotingRound, priceRequest.identifier, priceRequest.time, resolvedPrice);\n    }\n\n    function _computeGat(uint256 roundId) private view returns (FixedPoint.Unsigned memory) {\n        uint256 snapshotId = rounds[roundId].snapshotId;\n        if (snapshotId == 0) {\n            // No snapshot - return max value to err on the side of caution.\n            return FixedPoint.Unsigned(UINT_MAX);\n        }\n\n        // Grab the snapshotted supply from the voting token. It\u0027s already scaled by 10**18, so we can directly\n        // initialize the Unsigned value with the returned uint.\n        FixedPoint.Unsigned memory snapshottedSupply = FixedPoint.Unsigned(votingToken.totalSupplyAt(snapshotId));\n\n        // Multiply the total supply at the snapshot by the gatPercentage to get the GAT in number of tokens.\n        return snapshottedSupply.mul(rounds[roundId].gatPercentage);\n    }\n\n    function _getRequestStatus(PriceRequest storage priceRequest, uint256 currentRoundId)\n        private\n        view\n        returns (RequestStatus)\n    {\n        if (priceRequest.lastVotingRound == 0) {\n            return RequestStatus.NotRequested;\n        } else if (priceRequest.lastVotingRound \u003c currentRoundId) {\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\n            (bool isResolved, ) = voteInstance.resultComputation.getResolvedPrice(\n                _computeGat(priceRequest.lastVotingRound)\n            );\n            return isResolved ? RequestStatus.Resolved : RequestStatus.Active;\n        } else if (priceRequest.lastVotingRound == currentRoundId) {\n            return RequestStatus.Active;\n        } else {\n            // Means than priceRequest.lastVotingRound \u003e currentRoundId\n            return RequestStatus.Future;\n        }\n    }\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\n    }\n}\n"},"VotingInterface.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./FixedPoint.sol\";\n\n\n/**\n * @title Interface that voters must use to Vote on price request resolutions.\n */\nabstract contract VotingInterface {\n    struct PendingRequest {\n        bytes32 identifier;\n        uint256 time;\n    }\n\n    // Captures the necessary data for making a commitment.\n    // Used as a parameter when making batch commitments.\n    // Not used as a data structure for storage.\n    struct Commitment {\n        bytes32 identifier;\n        uint256 time;\n        bytes32 hash;\n        bytes encryptedVote;\n    }\n\n    // Captures the necessary data for revealing a vote.\n    // Used as a parameter when making batch reveals.\n    // Not used as a data structure for storage.\n    struct Reveal {\n        bytes32 identifier;\n        uint256 time;\n        int256 price;\n        int256 salt;\n    }\n\n    // Note: the phases must be in order. Meaning the first enum value must be the first phase, etc.\n    // `NUM_PHASES_PLACEHOLDER` is to get the number of phases. It isn\u0027t an actual phase, and it should always be last.\n    enum Phase { Commit, Reveal, NUM_PHASES_PLACEHOLDER }\n\n    /**\n     * @notice Commit a vote for a price request for `identifier` at `time`.\n     * @dev `identifier`, `time` must correspond to a price request that\u0027s currently in the commit phase.\n     * Commits can be changed.\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior,\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\n     * they can determine the vote pre-reveal.\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\n     * @param time unix timestamp of the price being voted on.\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\n     */\n    function commitVote(\n        bytes32 identifier,\n        uint256 time,\n        bytes32 hash\n    ) external virtual;\n\n    /**\n     * @notice Submit a batch of commits in a single transaction.\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\n     * commitments that can fit in one transaction.\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\n     */\n    function batchCommit(Commitment[] calldata commits) external virtual;\n\n    /**\n     * @notice snapshot the current round\u0027s token ballances and lock in the inflation rate and GAT.\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\n     * time of calling `_freezeRoundVariables`.\n     */\n    function snapshotCurrentRound() external virtual;\n\n    /**\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\n     * @dev The revealed `price`, `salt`, `time`, `address`, `roundId`, and `identifier`, must hash to the latest `hash`\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\n     * @param time specifies the unix timestamp of the price is being voted on.\n     * @param price voted on during the commit phase.\n     * @param salt value used to hide the commitment price during the commit phase.\n     */\n    function revealVote(\n        bytes32 identifier,\n        uint256 time,\n        int256 price,\n        int256 salt\n    ) external virtual;\n\n    /**\n     * @notice Reveal multiple votes in a single transaction.\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\n     * that can fit in one transaction.\n     * @dev For more information on reveals, review the comment for `revealVote`.\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\n     */\n    function batchReveal(Reveal[] calldata reveals) external virtual;\n\n    /**\n     * @notice Gets the queries that are being voted on this round.\n     * @return pendingRequests `PendingRequest` array containing identifiers\n     * and timestamps for all pending requests.\n     */\n    function getPendingRequests() external virtual view returns (PendingRequest[] memory);\n\n    /**\n     * @notice Returns the current voting phase, as a function of the current time.\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\n     */\n    function getVotePhase() external virtual view returns (Phase);\n\n    /**\n     * @notice Returns the current round ID, as a function of the current time.\n     * @return uint256 representing the unique round ID.\n     */\n    function getCurrentRoundId() external virtual view returns (uint256);\n\n    /**\n     * @notice Retrieves rewards owed for a set of resolved price requests.\n     * @dev Can only retrieve rewards if calling for a valid round and if the\n     * call is done within the timeout threshold (not expired).\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\n     * @param roundId the round from which voting rewards will be retrieved from.\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\n     * @return total amount of rewards returned to the voter.\n     */\n    function retrieveRewards(\n        address voterAddress,\n        uint256 roundId,\n        PendingRequest[] memory toRetrieve\n    ) public virtual returns (FixedPoint.Unsigned memory);\n}\n"},"VotingTest.sol":{"content":"pragma solidity ^0.6.0;\n\npragma experimental ABIEncoderV2;\n\nimport \"./Voting.sol\";\nimport \"./FixedPoint.sol\";\n\n\n// Test contract used to access internal variables in the Voting contract.\ncontract VotingTest is Voting {\n    constructor(\n        uint256 _phaseLength,\n        FixedPoint.Unsigned memory _gatPercentage,\n        FixedPoint.Unsigned memory _inflationRate,\n        uint256 _rewardsExpirationTimeout,\n        address _votingToken,\n        address _finder,\n        address _timerAddress\n    )\n        public\n        Voting(\n            _phaseLength,\n            _gatPercentage,\n            _inflationRate,\n            _rewardsExpirationTimeout,\n            _votingToken,\n            _finder,\n            _timerAddress\n        )\n    {}\n\n    function getPendingPriceRequestsArray() external view returns (bytes32[] memory) {\n        return pendingPriceRequests;\n    }\n}\n"},"VotingToken.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./ExpandedERC20.sol\";\nimport \"./ERC20Snapshot.sol\";\n\n\n/**\n * @title Ownership of this token allows a voter to respond to price requests.\n * @dev Supports snapshotting and allows the Oracle to mint new tokens as rewards.\n */\ncontract VotingToken is ExpandedERC20, ERC20Snapshot {\n    /**\n     * @notice Constructs the VotingToken.\n     */\n    constructor() public ExpandedERC20(\"UMA Voting Token v1\", \"UMA\", 18) {}\n\n    /**\n     * @notice Creates a new snapshot ID.\n     * @return uint256 Thew new snapshot ID.\n     */\n    function snapshot() external returns (uint256) {\n        return _snapshot();\n    }\n\n    // _transfer, _mint and _burn are ERC20 internal methods that are overridden by ERC20Snapshot,\n    // therefore the compiler will complain that VotingToken must override these methods\n    // because the two base classes (ERC20 and ERC20Snapshot) both define the same functions\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal override(ERC20, ERC20Snapshot) {\n        super._transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal override(ERC20, ERC20Snapshot) {\n        super._mint(account, value);\n    }\n\n    function _burn(address account, uint256 value) internal override(ERC20, ERC20Snapshot) {\n        super._burn(account, value);\n    }\n}\n"},"WETH9.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2017-12-12\n */\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity ^0.6.0;\n\n\n// Copied from the verified code from Etherscan:\n// https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\n// And then updated for Solidity version 0.6. Specific changes:\n// * Change `function() public` into `receive() external` and `fallback() external`\n// * Change `this.balance` to `address(this).balance`\n// * Ran prettier\ncontract WETH9 {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    mapping(address =\u003e uint256) public balanceOf;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    fallback() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] \u003e= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] \u003e= wad);\n\n        if (src != msg.sender \u0026\u0026 allowance[src][msg.sender] != uint256(-1)) {\n            require(allowance[src][msg.sender] \u003e= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. \u003chttp://fsf.org/\u003e\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers\u0027 and authors\u0027 protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users\u0027 and\nauthors\u0027 sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users\u0027 freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work\u0027s\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users\u0027 Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work\u0027s\nusers, your or third parties\u0027 legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program\u0027s source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation\u0027s users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party\u0027s predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor\u0027s \"contributor version\".\n\n  A contributor\u0027s \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor\u0027s essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient\u0027s use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others\u0027 Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy\u0027s\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    \u003cone line to give the program\u0027s name and a brief idea of what it does.\u003e\n    Copyright (C) \u003cyear\u003e  \u003cname of author\u003e\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    \u003cprogram\u003e  Copyright (C) \u003cyear\u003e  \u003cname of author\u003e\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w\u0027.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c\u0027 for details.\n\nThe hypothetical commands `show w\u0027 and `show c\u0027 should show the appropriate\nparts of the General Public License.  Of course, your program\u0027s commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n\u003chttp://www.gnu.org/licenses/\u003e.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n\u003chttp://www.gnu.org/philosophy/why-not-lgpl.html\u003e.\n\n*/\n"},"Withdrawable.sol":{"content":"/**\n * Withdrawable contract.\n */\n\npragma solidity ^0.6.0;\n\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./MultiRole.sol\";\n\n\n/**\n * @title Base contract that allows a specific role to withdraw any ETH and/or ERC20 tokens that the contract holds.\n */\nabstract contract Withdrawable is MultiRole {\n    using SafeERC20 for IERC20;\n\n    uint256 private roleId;\n\n    /**\n     * @notice Withdraws ETH from the contract.\n     */\n    function withdraw(uint256 amount) external onlyRoleHolder(roleId) {\n        Address.sendValue(msg.sender, amount);\n    }\n\n    /**\n     * @notice Withdraws ERC20 tokens from the contract.\n     * @param erc20Address ERC20 token to withdraw.\n     * @param amount amount of tokens to withdraw.\n     */\n    function withdrawErc20(address erc20Address, uint256 amount) external onlyRoleHolder(roleId) {\n        IERC20 erc20 = IERC20(erc20Address);\n        erc20.safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Internal method that allows derived contracts to create a role for withdrawal.\n     * @dev Either this method or `_setWithdrawRole` must be called by the derived class for this contract to function\n     * properly.\n     * @param newRoleId ID corresponding to role whose members can withdraw.\n     * @param managingRoleId ID corresponding to managing role who can modify the withdrawable role\u0027s membership.\n     * @param withdrawerAddress new manager of withdrawable role.\n     */\n    function _createWithdrawRole(\n        uint256 newRoleId,\n        uint256 managingRoleId,\n        address withdrawerAddress\n    ) internal {\n        roleId = newRoleId;\n        _createExclusiveRole(newRoleId, managingRoleId, withdrawerAddress);\n    }\n\n    /**\n     * @notice Internal method that allows derived contracts to choose the role for withdrawal.\n     * @dev The role `setRoleId` must exist. Either this method or `_createWithdrawRole` must be\n     * called by the derived class for this contract to function properly.\n     * @param setRoleId ID corresponding to role whose members can withdraw.\n     */\n    function _setWithdrawRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\n        roleId = setRoleId;\n    }\n}\n"},"WithdrawableTest.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./Withdrawable.sol\";\n\n\n// WithdrawableTest is derived from the abstract contract Withdrawable for testing purposes.\ncontract WithdrawableTest is Withdrawable {\n    enum Roles { Governance, Withdraw }\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() public {\n        _createExclusiveRole(uint256(Roles.Governance), uint256(Roles.Governance), msg.sender);\n        _createWithdrawRole(uint256(Roles.Withdraw), uint256(Roles.Governance), msg.sender);\n    }\n\n    function pay() external payable {\n        require(msg.value \u003e 0);\n    }\n\n    function setInternalWithdrawRole(uint256 roleId) public {\n        _setWithdrawRole(roleId);\n    }\n}\n"}}