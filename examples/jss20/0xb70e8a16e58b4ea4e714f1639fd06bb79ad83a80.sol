{"AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./EnumerableSet.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role\u0027s admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 =\u003e RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``\u0027s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role\u0027s admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``\u0027s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(\r\n            hasRole(_roles[role].adminRole, _msgSender()),\r\n            \"AccessControl: sender must be an admin to grant\"\r\n        );\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``\u0027s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(\r\n            hasRole(_roles[role].adminRole, _msgSender()),\r\n            \"AccessControl: sender must be an admin to revoke\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\u0027s\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(\r\n            account == _msgSender(),\r\n            \"AccessControl: can only renounce roles for self\"\r\n        );\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn\u0027t perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``\u0027s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n"},"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"AggregatorInterface.sol":{"content":"pragma solidity \u003e=0.6.0;\r\n\r\ninterface AggregatorInterface {\r\n    function latestAnswer() external view returns (int256);\r\n\r\n    function latestTimestamp() external view returns (uint256);\r\n\r\n    function latestRound() external view returns (uint256);\r\n\r\n    function getAnswer(uint256 roundId) external view returns (int256);\r\n\r\n    function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n    event AnswerUpdated(\r\n        int256 indexed current,\r\n        uint256 indexed roundId,\r\n        uint256 timestamp\r\n    );\r\n    event NewRound(\r\n        uint256 indexed roundId,\r\n        address indexed startedBy,\r\n        uint256 startedAt\r\n    );\r\n}\r\n"},"Brrr.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./AccessControl.sol\";\r\nimport \"./PriceFeed.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n */\r\ncontract Brrr is Context, IERC20, AccessControl, PriceFeed {\r\n    bool public Online = true;\r\n    modifier isOffline {\r\n        _;\r\n        require(!Online, \"Contract is running still\");\r\n    }\r\n    modifier isOnline {\r\n        _;\r\n        require(Online, \"Contract has been turned off\");\r\n    }\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IERC20 Tether;\r\n    bytes32 public constant FOUNDING_FATHER = keccak256(\"FOUNDING_FATHER\");\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    //list of accepted coins for transferring\r\n    mapping(address =\u003e bool) public _acceptedStableCoins;\r\n    //address of the oracle price feed for accept coins\r\n    mapping(address =\u003e address) private _contract_address_to_oracle;\r\n    //deposits for each user in eth\r\n    mapping(address =\u003e uint256) public _deposits_eth;\r\n    //total withdrawals per user\r\n    mapping(address =\u003e uint256) public _total_withdrawals;\r\n    //deposits for each user in their coins\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public _coin_deposits;\r\n    //claimed stimulus per user per stimulus\r\n    mapping(address =\u003e mapping(uint128 =\u003e bool)) public _claimed_stimulus;\r\n    //all stimulus ids\r\n    mapping(uint128 =\u003e bool) public _all_Claim_ids;\r\n    //stimulus id to stimulus info\r\n    mapping(uint128 =\u003e Claims) public _all_Claims;\r\n    //tether total supply checks/history\r\n    supplyCheck[] public _all_supply_checks;\r\n    //total coins related to tether in reserves\r\n    uint256 public TreasuryReserve;\r\n    uint256 private _totalSupply;\r\n    //max limit\r\n    uint256 public TOTALCAP = 8000000000000000 * 10**18;\r\n    //total coins in circulation\r\n    uint256 public _circulatingSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    //usdt address\r\n    address public tether = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    //brrr3x address\r\n    address public brrr3x;\r\n    //brrr10x address\r\n    address public brrr10x;\r\n\r\n    struct Claims {\r\n        uint256 _amount;\r\n        uint256 _ending;\r\n        uint256 _amount_to_give;\r\n    }\r\n\r\n    struct supplyCheck {\r\n        uint256 _last_check;\r\n        uint256 _totalSupply;\r\n    }\r\n\r\n    event Withdraw(address indexed _reciever, uint256 indexed _amount);\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * Sets the total supply from tether\r\n     *\r\n     * Gives founding father liquidity share for uniswap\r\n     *\r\n     * Sets first supply check\r\n     *\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(FOUNDING_FATHER, msg.sender);\r\n        Tether = IERC20(tether);\r\n        uint256 d = Tether.totalSupply();\r\n        TreasuryReserve = d * 10**13;\r\n        _balances[msg.sender] = 210000000 * 10**18;\r\n        _circulatingSupply = 210000000 * 10**18;\r\n        _totalSupply = TreasuryReserve.sub(_circulatingSupply);\r\n        TreasuryReserve = TreasuryReserve.sub(_circulatingSupply);\r\n        supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n        _all_supply_checks.push(sa);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _circulatingSupply.add(TreasuryReserve);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     *  If address is approved brrr3x or brrr10x address don\u0027t check allowance and allow 1 transaction transfer (no approval needed)\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (msg.sender != brrr3x \u0026\u0026 msg.sender != brrr10x) {\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens from tether burning tokens\r\n     *\r\n     * Cannot go past cap.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function _printerGoesBrrr(uint256 amount) internal returns (bool) {\r\n        require(amount \u003e 0, \"Can\u0027t mint 0 tokens\");\r\n        require(TreasuryReserve.add(amount) \u003c cap(), \"Cannot exceed cap\");\r\n        TreasuryReserve = TreasuryReserve.add(amount);\r\n        _totalSupply = TreasuryReserve;\r\n        emit Transfer(address(0), address(this), amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual isOnline {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(amount \u003c= TreasuryReserve, \"More than the reserve holds\");\r\n\r\n        _circulatingSupply = _circulatingSupply.add(amount);\r\n        TreasuryReserve = TreasuryReserve.sub(amount);\r\n        _totalSupply = TreasuryReserve;\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `TreasuryReserve`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `Treasury Reserve` must have at least `amount` tokens.\r\n     */\r\n    function _burn(uint256 amount) internal virtual {\r\n        if (amount \u003c= TreasuryReserve) {\r\n            TreasuryReserve = TreasuryReserve.sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds Treasury Reserve\"\r\n            );\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        } else {\r\n            TreasuryReserve = 0;\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the users deposit in ETH and changes the circulating supply and treasury reserves based off the brrr sent back\r\n     *\r\n     *\r\n     * Emits withdraw event.\r\n     *\r\n     *\r\n     */\r\n    function _payBackBrrrETH(\r\n        uint256 _brrrAmount,\r\n        address payable _owner,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _deposits_eth[_owner] \u003e= _returnAmount,\r\n            \"More than deposit amount\"\r\n        );\r\n        _balances[_owner] = _balances[_owner].sub(_brrrAmount);\r\n        TreasuryReserve = TreasuryReserve.add(_brrrAmount);\r\n        _totalSupply = TreasuryReserve;\r\n        _circulatingSupply = _circulatingSupply.sub(_brrrAmount);\r\n        emit Transfer(address(_owner), address(this), _brrrAmount);\r\n        _deposits_eth[_owner] = _deposits_eth[_owner].sub(_returnAmount);\r\n        _transferEth(_owner, _returnAmount);\r\n        emit Withdraw(address(_owner), _returnAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the users deposit in alt coins and changes the circulating supply and treasury reserves based off the brrr sent back\r\n     *\r\n     *\r\n     * Emits withdraw event.\r\n     *\r\n     *\r\n     */\r\n    function _payBackBrrrCoins(\r\n        uint256 _brrrAmount,\r\n        address payable _owner,\r\n        address _contract,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _coin_deposits[_owner][_contract] \u003e= _returnAmount,\r\n            \"More than deposit amount\"\r\n        );\r\n        _balances[_owner] = _balances[_owner].sub(_brrrAmount);\r\n        TreasuryReserve = TreasuryReserve.add(_brrrAmount);\r\n        _totalSupply = TreasuryReserve;\r\n        _circulatingSupply = _circulatingSupply.sub(_brrrAmount);\r\n        emit Transfer(address(_owner), address(this), _brrrAmount);\r\n        _coin_deposits[_owner][_contract] = _coin_deposits[_owner][_contract]\r\n            .sub(_returnAmount);\r\n        _transferCoin(_owner, _contract, _returnAmount);\r\n        emit Withdraw(address(_owner), _returnAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Gives user reward for updating the total supply.\r\n     */\r\n    function _giveReward(uint256 reward) internal returns (bool) {\r\n        _circulatingSupply = _circulatingSupply.add(reward);\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(reward);\r\n        emit Transfer(address(this), address(_msgSender()), reward);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token\u0027s total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return TOTALCAP;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the price of the bonding curve divided by number of withdrawals the user has already made.\r\n     *\r\n     * Prevents spamming deposit -\u003e withdrawal -\u003e deposit... to drain all brrr.\r\n     */\r\n    function calculateWithdrawalPrice() internal view returns (uint256) {\r\n        uint256 p = calculateCurve();\r\n        uint256 w = _total_withdrawals[_msgSender()];\r\n        if (w \u003c 1) {\r\n            w = 1;\r\n        }\r\n        p = p.div(w);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer eth function\r\n     *\r\n     */\r\n    function _transferEth(address payable _recipient, uint256 _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        _recipient.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer altcoin function\r\n     *\r\n     */\r\n    function _transferCoin(\r\n        address _owner,\r\n        address _contract,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        IERC20 erc;\r\n        erc = IERC20(_contract);\r\n        require(\r\n            erc.balanceOf(address(this)) \u003e= _returnAmount,\r\n            \"Not enough funds to transfer\"\r\n        );\r\n        require(erc.transfer(_owner, _returnAmount));\r\n        return true;\r\n    }\r\n\r\n    /**@dev Adds another token to the accepted coins for printing\r\n     *\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Address of the contract to be added\r\n     * - Only can be added by founding fathers\r\n     * */\r\n    function addAcceptedStableCoin(address _contract, address _oracleAddress)\r\n        public\r\n        isOnline\r\n        returns (bool)\r\n    {\r\n        require(\r\n            hasRole(FOUNDING_FATHER, msg.sender),\r\n            \"Caller is not a Founding Father\"\r\n        );\r\n        _acceptedStableCoins[_contract] = true;\r\n        _contract_address_to_oracle[_contract] = _oracleAddress;\r\n        return _acceptedStableCoins[_contract];\r\n    }\r\n\r\n    /**@dev Adds stimulus package to be claimed by users\r\n     *\r\n     *\r\n     * Calling conditions:\r\n     * - Only can be added by founding fathers\r\n     * */\r\n    function addStimulus(\r\n        uint128 _id,\r\n        uint256 _total_amount,\r\n        uint256 _ending_in_days,\r\n        uint256 _amount_to_get\r\n    ) public isOnline returns (bool) {\r\n        require(\r\n            hasRole(FOUNDING_FATHER, msg.sender),\r\n            \"Caller is not a Founding Father\"\r\n        );\r\n        require(_all_Claim_ids[_id] == false, \"ID already used\");\r\n        require(_total_amount \u003c= TreasuryReserve);\r\n        _all_Claim_ids[_id] = true;\r\n        _all_Claims[_id]._amount = _total_amount * 10**18;\r\n        _all_Claims[_id]._amount_to_give = _amount_to_get;\r\n        _all_Claims[_id]._ending = block.timestamp + (_ending_in_days * 1 days);\r\n        return true;\r\n    }\r\n\r\n    /**@dev Claim a stimulus package.\r\n     *\r\n     * requires _id of stimulus package.\r\n     * Calling conditions:\r\n     * - can only claim once\r\n     * - must not be ended\r\n     * - must not be out of funds.\r\n     * */\r\n    function claimStimulus(uint128 _id) public isOnline returns (bool) {\r\n        require(_all_Claim_ids[_id], \"Claim not valid\");\r\n        require(\r\n            _claimed_stimulus[_msgSender()][_id] == false,\r\n            \"Already claimed!\"\r\n        );\r\n        require(\r\n            block.timestamp \u003c= _all_Claims[_id]._ending,\r\n            \"Stimulus package has ended\"\r\n        );\r\n        require(\r\n            _all_Claims[_id]._amount \u003e= _all_Claims[_id]._amount_to_give,\r\n            \"Out of money :(\"\r\n        );\r\n        _claimed_stimulus[_msgSender()][_id] = true;\r\n        _all_Claims[_id]._amount = _all_Claims[_id]._amount.sub(\r\n            _all_Claims[_id]._amount_to_give * 10**18\r\n        );\r\n        _mint(_msgSender(), _all_Claims[_id]._amount_to_give * 10**18);\r\n        return true;\r\n    }\r\n\r\n    /**  Bonding curve\r\n     * circulating * reserve ratio / total supply\r\n     * circulating * .10 / totalSupply\r\n     *\r\n     * */\r\n    function calculateCurve() public override view returns (uint256) {\r\n        uint256 p = (\r\n            (_circulatingSupply.mul(10).div(100) * 10**18).div(TreasuryReserve)\r\n        );\r\n        if (p \u003c= 0) {\r\n            p = 1;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /**@dev Deposit eth and get the value of brrr based off bonding curve\r\n     *\r\n     *\r\n     * */\r\n    function printWithETH() public payable isOnline returns (bool) {\r\n        require(\r\n            msg.value \u003e 0,\r\n            \"Please send money to make the printer go brrrrrrrr\"\r\n        );\r\n        uint256 p = calculateCurve();\r\n        uint256 amount = (msg.value.mul(10**18).div(p));\r\n        require(amount \u003e 0, \"Not enough sent for 1 brrr\");\r\n        _deposits_eth[_msgSender()] = _deposits_eth[_msgSender()].add(\r\n            msg.value\r\n        );\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**@dev Deposit alt coins and get the value of brrr based off bonding curve\r\n     *\r\n     *\r\n     * */\r\n    function printWithStablecoin(address _contract, uint256 _amount)\r\n        public\r\n        isOnline\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _acceptedStableCoins[_contract],\r\n            \"Not accepted as a form of payment\"\r\n        );\r\n        IERC20 erc;\r\n        erc = IERC20(_contract);\r\n        uint256 al = erc.allowance(_msgSender(), address(this));\r\n        require(al \u003e= _amount, \"Token allowance not enough\");\r\n        uint256 p = calculateCurve();\r\n        uint256 tp = getLatestPrice(_contract_address_to_oracle[_contract]);\r\n        uint256 a = _amount.mul(tp).div(p);\r\n        require(a \u003e 0, \"Not enough sent for 1 brrr\");\r\n        require(\r\n            erc.transferFrom(_msgSender(), address(this), _amount),\r\n            \"Transfer failed\"\r\n        );\r\n        _coin_deposits[_msgSender()][_contract] = _coin_deposits[_msgSender()][_contract]\r\n            .add(_amount);\r\n        _mint(_msgSender(), a);\r\n        return true;\r\n    }\r\n\r\n    /**@dev Internal transfer from brrr3x or brrr10x in order to transfer and update balances\r\n     *\r\n     *\r\n     * */\r\n    function _transferBrr(address _contract) internal returns (bool) {\r\n        IERC20 brr;\r\n        brr = IERC20(_contract);\r\n        uint256 brrbalance = brr.balanceOf(_msgSender());\r\n        if (brrbalance \u003e 0) {\r\n            require(\r\n                brr.transferFrom(_msgSender(), address(this), brrbalance),\r\n                \"Transfer failed\"\r\n            );\r\n            _mint(_msgSender(), brrbalance);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**@dev Transfers entire brrrX balance into brrr at 1 to 1\r\n     *  Deposits on brrrX will not be cleared.\r\n     *\r\n     * */\r\n    function convertBrrrXintoBrrr() public isOnline returns (bool) {\r\n        _transferBrr(address(brrr3x));\r\n        _transferBrr(address(brrr10x));\r\n        return true;\r\n    }\r\n\r\n    /**@dev Deposit brrr and get the value of eth for that amount of brrr based off bonding curve\r\n     *\r\n     *\r\n     * */\r\n    function returnBrrrForETH() public isOnline returns (bool) {\r\n        require(_deposits_eth[_msgSender()] \u003e 0, \"You have no deposits\");\r\n        require(_balances[_msgSender()] \u003e 0, \"No brrr balance\");\r\n        uint256 p = calculateWithdrawalPrice();\r\n        uint256 r = _deposits_eth[_msgSender()].div(p).mul(10**18);\r\n        if (_balances[_msgSender()] \u003e= r) {\r\n            _payBackBrrrETH(r, _msgSender(), _deposits_eth[_msgSender()]);\r\n        } else {\r\n            uint256 t = _balances[_msgSender()].mul(p).div(10**18);\r\n            require(\r\n                t \u003c= _balances[_msgSender()],\r\n                \"More than in your balance, error with math\"\r\n            );\r\n            _payBackBrrrETH(_balances[_msgSender()], _msgSender(), t);\r\n        }\r\n        _total_withdrawals[_msgSender()] = _total_withdrawals[_msgSender()].add(\r\n            1\r\n        );\r\n    }\r\n\r\n    /**@dev Deposit brrr and get the value of alt coins for that amount of brrr based off bonding curve\r\n     *\r\n     *\r\n     * */\r\n    function returnBrrrForCoins(address _contract)\r\n        public\r\n        isOnline\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _acceptedStableCoins[_contract],\r\n            \"Not accepted as a form of payment\"\r\n        );\r\n        require(\r\n            _coin_deposits[_msgSender()][_contract] != 0,\r\n            \"You have no deposits\"\r\n        );\r\n        require(_balances[_msgSender()] \u003e 0, \"No brrr balance\");\r\n        uint256 o = calculateWithdrawalPrice();\r\n        uint256 rg = getLatestPrice(_contract_address_to_oracle[_contract]);\r\n        uint256 y = _coin_deposits[_msgSender()][_contract].mul(rg).div(o);\r\n        if (_balances[_msgSender()] \u003e= y) {\r\n            _payBackBrrrCoins(\r\n                y,\r\n                _msgSender(),\r\n                _contract,\r\n                _coin_deposits[_msgSender()][_contract]\r\n            );\r\n        } else {\r\n            uint256 t = _balances[_msgSender()].mul(o).div(rg).div(10**18);\r\n            require(\r\n                t \u003c= _balances[_msgSender()],\r\n                \"More than in your balance, error with math\"\r\n            );\r\n            _payBackBrrrCoins(\r\n                _balances[_msgSender()],\r\n                _msgSender(),\r\n                _contract,\r\n                t\r\n            );\r\n        }\r\n        _total_withdrawals[_msgSender()] = _total_withdrawals[_msgSender()].add(\r\n            1\r\n        );\r\n    }\r\n\r\n    /**@dev Update the total supply from tether - if tether has changed total supply.\r\n     *\r\n     * Makes the money printer go brrrrrrrr\r\n     * Reward is given to whoever updates\r\n     * */\r\n    function brrrEvent() public isOnline returns (uint256) {\r\n        require(\r\n            block.timestamp \u003e\r\n                _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n                    ._last_check,\r\n            \"Already checked!\"\r\n        );\r\n        uint256 l = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._last_check;\r\n        uint256 s = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._totalSupply;\r\n        uint256 d = Tether.totalSupply();\r\n        require(d != s, \"The supply hasn\u0027t changed\");\r\n        if (d \u003c s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (s.sub(d)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _printerGoesBrrr(d);\r\n            _giveReward(reward);\r\n            return reward;\r\n        }\r\n        if (d \u003e s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (d.sub(s)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _burn(d);\r\n            _giveReward(reward);\r\n            return reward;\r\n        }\r\n    }\r\n\r\n    /**@dev In case of emgergency - withdrawal all eth.\r\n     *\r\n     * Contract must be offline\r\n     *\r\n     * */\r\n    function EmergencyWithdrawalETH() public isOffline returns (bool) {\r\n        require(!Online, \"Contract is not turned off\");\r\n        require(_deposits_eth[_msgSender()] \u003e 0, \"You have no deposits\");\r\n        _payBackBrrrETH(\r\n            _balances[_msgSender()],\r\n            _msgSender(),\r\n            _deposits_eth[_msgSender()]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**@dev In case of emgergency - withdrawal all coins.\r\n     *\r\n     * Contract must be offline\r\n     *\r\n     * */\r\n    function EmergencyWithdrawalCoins(address _contract)\r\n        public\r\n        isOffline\r\n        returns (bool)\r\n    {\r\n        require(!Online, \"Contract is not turned off\");\r\n        require(\r\n            _acceptedStableCoins[_contract],\r\n            \"Not accepted as a form of payment\"\r\n        );\r\n        require(\r\n            _coin_deposits[_msgSender()][_contract] != 0,\r\n            \"You have no deposits\"\r\n        );\r\n        _payBackBrrrCoins(\r\n            _balances[_msgSender()],\r\n            _msgSender(),\r\n            _contract,\r\n            _coin_deposits[_msgSender()][_contract]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**@dev In case of emgergency - turn offline.\r\n     *\r\n     * Must be admin\r\n     *\r\n     * */\r\n    function toggleOffline() public returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        Online = !Online;\r\n        return true;\r\n    }\r\n\r\n    /**@dev Set brrrX addresses. One time, cannot be changed.\r\n     *\r\n     * Must be admin\r\n     *\r\n     * */\r\n    function setBrrrXAddress(address _brrr3xcontract, address _brrr10xcontract)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        require(\r\n            brrr3x == address(0x0) \u0026\u0026 brrr10x == address(0x0),\r\n            \"Already set the addresses\"\r\n        );\r\n        if (_brrr3xcontract != address(0x0)) {\r\n            brrr3x = _brrr3xcontract;\r\n        }\r\n        if (_brrr10xcontract != address(0x0)) {\r\n            brrr10x = _brrr10xcontract;\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        printWithETH();\r\n    }\r\n}\r\n"},"Brrr10x.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./AccessControl.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n */\r\ncontract Brrr10x is Context, IERC20, AccessControl {\r\n    bool public Online = true;\r\n    modifier isOffline {\r\n        _;\r\n        require(!Online, \"Contract is running still\");\r\n    }\r\n    modifier isOnline {\r\n        _;\r\n        require(Online, \"Contract has been turned off\");\r\n    }\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IERC20 Tether;\r\n    bytes32 public constant FOUNDING_FATHER = keccak256(\"FOUNDING_FATHER\");\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    mapping(address =\u003e uint256) public _deposits_brrr;\r\n\r\n    mapping(address =\u003e uint256) public _total_withdrawals;\r\n\r\n    supplyCheck[] public _all_supply_checks;\r\n    uint256 public TreasuryReserve;\r\n    uint256 private _totalSupply;\r\n    uint256 public TOTALCAP = 8000000000000000 * 10**18;\r\n\r\n    uint256 private _circulatingSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address public tether = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public brrr;\r\n\r\n    struct supplyCheck {\r\n        uint256 _last_check;\r\n        uint256 _totalSupply;\r\n    }\r\n\r\n    event Withdraw(address indexed _reciever, uint256 indexed _amount);\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _brrr\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n        brrr = _brrr;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(FOUNDING_FATHER, msg.sender);\r\n        Tether = IERC20(tether);\r\n        _balances[msg.sender] = 100000000 * 10**18;\r\n        _circulatingSupply = 100000000 * 10**18;\r\n        uint256 d = Tether.totalSupply();\r\n        TreasuryReserve = d * 10**12;\r\n        _totalSupply = TreasuryReserve;\r\n        supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n        _all_supply_checks.push(sa);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _circulatingSupply.add(TreasuryReserve);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        if (msg.sender != brrr) {\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens from tether burning tokens\r\n     *\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function _printerGoesBrrr(uint256 amount) internal returns (bool) {\r\n        require(amount \u003e 0, \"Can\u0027t mint 0 tokens\");\r\n        require(TreasuryReserve.add(amount) \u003c cap(), \"Cannot exceed cap\");\r\n        TreasuryReserve = TreasuryReserve.add(amount);\r\n        _totalSupply = TreasuryReserve;\r\n        emit Transfer(address(0), address(this), amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual isOnline {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(amount \u003c= TreasuryReserve, \"More than the reserve holds\");\r\n\r\n        _circulatingSupply = _circulatingSupply.add(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        TreasuryReserve = TreasuryReserve.sub(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `TreasuryReserve`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `Treasury Reserve` must have at least `amount` tokens.\r\n     */\r\n    function _burn(uint256 amount) internal virtual {\r\n        if (amount \u003c= TreasuryReserve) {\r\n            TreasuryReserve = TreasuryReserve.sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds Treasury Reserve\"\r\n            );\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        } else {\r\n            TreasuryReserve = 0;\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        }\r\n    }\r\n\r\n    function _payBackBrrr(\r\n        uint256 _brrrAmount,\r\n        address payable _owner,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _deposits_brrr[_owner] \u003e= _returnAmount,\r\n            \"More than deposit amount\"\r\n        );\r\n        _balances[_owner] = _balances[_owner].sub(_brrrAmount);\r\n        TreasuryReserve = TreasuryReserve.add(_brrrAmount);\r\n        _totalSupply = TreasuryReserve;\r\n        _circulatingSupply = _circulatingSupply.sub(_brrrAmount);\r\n        emit Transfer(address(_owner), address(this), _brrrAmount);\r\n        _deposits_brrr[_owner] = _deposits_brrr[_owner].sub(_returnAmount);\r\n        _transferCoin(_owner, brrr, _returnAmount);\r\n        emit Withdraw(address(_owner), _returnAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token\u0027s total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return TOTALCAP;\r\n    }\r\n\r\n    function calculateWithdrawalPrice() internal view returns (uint256) {\r\n        uint256 p = calculateCurve();\r\n        uint256 w = _total_withdrawals[_msgSender()];\r\n        if (w \u003c 1) {\r\n            w = 1;\r\n        }\r\n        p = p.div(w);\r\n        return p;\r\n    }\r\n\r\n    function _transferEth(address payable _recipient, uint256 _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        _recipient.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferCoin(\r\n        address _owner,\r\n        address _contract,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        IERC20 erc;\r\n        erc = IERC20(_contract);\r\n        require(\r\n            erc.balanceOf(address(this)) \u003e= _returnAmount,\r\n            \"Not enough funds to transfer\"\r\n        );\r\n        require(erc.transfer(_owner, _returnAmount));\r\n        return true;\r\n    }\r\n\r\n    /**  Bonding curve\r\n     * circulating * reserve ratio / total supply\r\n     * circulating * .50 / totalSupply\r\n     *\r\n     * */\r\n    function calculateCurve() public override view returns (uint256) {\r\n        return (\r\n            (_circulatingSupply.mul(50).div(100) * 10**18).div(TreasuryReserve)\r\n        );\r\n    }\r\n\r\n    function printWithBrrr(uint256 _amount) public isOnline returns (bool) {\r\n        require(brrr != address(0x0), \"Brrr contract not set\");\r\n        IERC20 brr;\r\n        brr = IERC20(brrr);\r\n        uint256 al = brr.balanceOf(_msgSender());\r\n        require(al \u003e= _amount, \"Token balance not enough\");\r\n        uint256 p = calculateCurve();\r\n        uint256 tp = brr.calculateCurve();\r\n        uint256 a = _amount.mul(tp).div(p);\r\n        require(a \u003e 0, \"Not enough sent for 1 brrr\");\r\n        require(\r\n            brr.transferFrom(_msgSender(), address(this), _amount),\r\n            \"Transfer failed\"\r\n        );\r\n        _deposits_brrr[_msgSender()] = _deposits_brrr[_msgSender()].add(\r\n            _amount\r\n        );\r\n        _mint(_msgSender(), a);\r\n        return true;\r\n    }\r\n\r\n    function returnBrrrForBrrr() public isOnline returns (bool) {\r\n        require(brrr != address(0x0), \"Brrr contract not set\");\r\n        require(_deposits_brrr[_msgSender()] != 0, \"You have no deposits\");\r\n        require(_balances[_msgSender()] \u003e 0, \"No brrr balance\");\r\n        uint256 o = calculateWithdrawalPrice();\r\n        uint256 rg = _deposits_brrr[_msgSender()].div(o).mul(10**18);\r\n        if (_balances[_msgSender()] \u003e= rg) {\r\n            _payBackBrrr(rg, _msgSender(), _deposits_brrr[_msgSender()]);\r\n        } else {\r\n            uint256 t = _balances[_msgSender()].mul(o).div(10**18);\r\n            require(\r\n                t \u003c= _balances[_msgSender()],\r\n                \"More than in your balance, error with math\"\r\n            );\r\n            _payBackBrrr(_balances[_msgSender()], _msgSender(), t);\r\n        }\r\n        _total_withdrawals[_msgSender()] = _total_withdrawals[_msgSender()].add(\r\n            1\r\n        );\r\n    }\r\n\r\n    /**@dev Update the total supply from tether - if tether has changed total supply.\r\n     *\r\n     * Makes the money printer go brrrrrrrr\r\n     * Reward is given to whoever updates\r\n     * */\r\n    function brrrEvent() public isOnline returns (uint256) {\r\n        require(\r\n            block.timestamp \u003e\r\n                _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n                    ._last_check,\r\n            \"Already checked!\"\r\n        );\r\n        uint256 l = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._last_check;\r\n        uint256 s = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._totalSupply;\r\n        uint256 d = Tether.totalSupply();\r\n        require(d != s, \"The supply hasn\u0027t changed\");\r\n        if (d \u003c s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (s.sub(d)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _printerGoesBrrr(d.mul(10));\r\n            _circulatingSupply = _circulatingSupply.add(reward);\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(reward);\r\n            emit Transfer(address(this), address(_msgSender()), reward);\r\n            return reward;\r\n        }\r\n        if (d \u003e s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (d.sub(s)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _burn(d.mul(10));\r\n            _circulatingSupply = _circulatingSupply.add(reward);\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(reward);\r\n            emit Transfer(address(this), address(_msgSender()), reward);\r\n            return reward;\r\n        }\r\n    }\r\n\r\n    function EmergencyWithdrawal() public isOffline returns (bool) {\r\n        require(!Online, \"Contract is not turned off\");\r\n        require(_deposits_brrr[_msgSender()] \u003e 0, \"You have no deposits\");\r\n        _payBackBrrr(\r\n            _balances[_msgSender()],\r\n            _msgSender(),\r\n            _deposits_brrr[_msgSender()]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function toggleOffline() public returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        Online = !Online;\r\n        return true;\r\n    }\r\n\r\n    function setBrrrAddress(address _brrrcontract) public returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n\r\n        require(_brrrcontract != address(0x0), \"Invalid address!\");\r\n        brrr = _brrrcontract;\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n}\r\n"},"Brrr3x.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./AccessControl.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n */\r\ncontract Brrr3x is Context, IERC20, AccessControl {\r\n    bool public Online = true;\r\n    modifier isOffline {\r\n        _;\r\n        require(!Online, \"Contract is running still\");\r\n    }\r\n    modifier isOnline {\r\n        _;\r\n        require(Online, \"Contract has been turned off\");\r\n    }\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IERC20 Tether;\r\n    bytes32 public constant FOUNDING_FATHER = keccak256(\"FOUNDING_FATHER\");\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    mapping(address =\u003e uint256) public _deposits_brrr;\r\n\r\n    mapping(address =\u003e uint256) public _total_withdrawals;\r\n\r\n    supplyCheck[] public _all_supply_checks;\r\n    uint256 public TreasuryReserve;\r\n    uint256 private _totalSupply;\r\n    uint256 public TOTALCAP = 8000000000000000 * 10**18;\r\n\r\n    uint256 private _circulatingSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address public tether = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public brrr;\r\n\r\n    struct supplyCheck {\r\n        uint256 _last_check;\r\n        uint256 _totalSupply;\r\n    }\r\n\r\n    event Withdraw(address indexed _reciever, uint256 indexed _amount);\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _brrr\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n        brrr = _brrr;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(FOUNDING_FATHER, msg.sender);\r\n        Tether = IERC20(tether);\r\n        _balances[msg.sender] = 100000000 * 10**18;\r\n        _circulatingSupply = 100000000 * 10**18;\r\n        uint256 d = Tether.totalSupply();\r\n        TreasuryReserve = d * 10**12;\r\n        _totalSupply = TreasuryReserve;\r\n        supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n        _all_supply_checks.push(sa);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _circulatingSupply.add(TreasuryReserve);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (msg.sender != brrr) {\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens from tether burning tokens\r\n     *\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function _printerGoesBrrr(uint256 amount) internal returns (bool) {\r\n        require(amount \u003e 0, \"Can\u0027t mint 0 tokens\");\r\n        require(TreasuryReserve.add(amount) \u003c cap(), \"Cannot exceed cap\");\r\n        TreasuryReserve = TreasuryReserve.add(amount);\r\n        _totalSupply = TreasuryReserve;\r\n        emit Transfer(address(0), address(this), amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual isOnline {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        require(amount \u003c= TreasuryReserve, \"More than the reserve holds\");\r\n\r\n        _circulatingSupply = _circulatingSupply.add(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        TreasuryReserve = TreasuryReserve.sub(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `TreasuryReserve`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `Treasury Reserve` must have at least `amount` tokens.\r\n     */\r\n    function _burn(uint256 amount) internal virtual {\r\n        if (amount \u003c= TreasuryReserve) {\r\n            TreasuryReserve = TreasuryReserve.sub(\r\n                amount,\r\n                \"ERC20: burn amount exceeds Treasury Reserve\"\r\n            );\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        } else {\r\n            TreasuryReserve = 0;\r\n            _totalSupply = TreasuryReserve;\r\n            emit Transfer(address(this), address(0), amount);\r\n        }\r\n    }\r\n\r\n    function _payBackBrrr(\r\n        uint256 _brrrAmount,\r\n        address payable _owner,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _deposits_brrr[_owner] \u003e= _returnAmount,\r\n            \"More than deposit amount\"\r\n        );\r\n        _balances[_owner] = _balances[_owner].sub(_brrrAmount);\r\n        TreasuryReserve = TreasuryReserve.add(_brrrAmount);\r\n        _totalSupply = TreasuryReserve;\r\n        _circulatingSupply = _circulatingSupply.sub(_brrrAmount);\r\n        emit Transfer(address(_owner), address(this), _brrrAmount);\r\n        _deposits_brrr[_owner] = _deposits_brrr[_owner].sub(_returnAmount);\r\n        _transferCoin(_owner, brrr, _returnAmount);\r\n        emit Withdraw(address(_owner), _returnAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token\u0027s total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return TOTALCAP;\r\n    }\r\n\r\n    function calculateWithdrawalPrice() internal view returns (uint256) {\r\n        uint256 p = calculateCurve();\r\n        uint256 w = _total_withdrawals[_msgSender()];\r\n        if (w \u003c 1) {\r\n            w = 1;\r\n        }\r\n        p = p.div(w);\r\n        return p;\r\n    }\r\n\r\n    function _transferEth(address payable _recipient, uint256 _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        _recipient.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferCoin(\r\n        address _owner,\r\n        address _contract,\r\n        uint256 _returnAmount\r\n    ) internal returns (bool) {\r\n        IERC20 erc;\r\n        erc = IERC20(_contract);\r\n        require(\r\n            erc.balanceOf(address(this)) \u003e= _returnAmount,\r\n            \"Not enough funds to transfer\"\r\n        );\r\n        require(erc.transfer(_owner, _returnAmount));\r\n        return true;\r\n    }\r\n\r\n    /**  Bonding curve\r\n     * circulating * reserve ratio / total supply\r\n     * circulating * .50 / totalSupply\r\n     *\r\n     * */\r\n    function calculateCurve() public override view returns (uint256) {\r\n        return (\r\n            (_circulatingSupply.mul(50).div(100) * 10**18).div(TreasuryReserve)\r\n        );\r\n    }\r\n\r\n    function printWithBrrr(uint256 _amount) public isOnline returns (bool) {\r\n        require(brrr != address(0x0), \"Brrr contract not set\");\r\n        IERC20 brr;\r\n        brr = IERC20(brrr);\r\n        uint256 al = brr.balanceOf(_msgSender());\r\n        require(al \u003e= _amount, \"Token balance not enough\");\r\n        uint256 p = calculateCurve();\r\n        uint256 tp = brr.calculateCurve();\r\n        uint256 a = _amount.mul(tp).div(p);\r\n        require(a \u003e 0, \"Not enough sent for 1 brrr\");\r\n        require(\r\n            brr.transferFrom(_msgSender(), address(this), _amount),\r\n            \"Transfer failed\"\r\n        );\r\n        _deposits_brrr[_msgSender()] = _deposits_brrr[_msgSender()].add(\r\n            _amount\r\n        );\r\n        _mint(_msgSender(), a);\r\n        return true;\r\n    }\r\n\r\n    function returnBrrrForBrrr() public isOnline returns (bool) {\r\n        require(brrr != address(0x0), \"Brrr contract not set\");\r\n        require(_deposits_brrr[_msgSender()] != 0, \"You have no deposits\");\r\n        require(_balances[_msgSender()] \u003e 0, \"No brrr balance\");\r\n        uint256 o = calculateWithdrawalPrice();\r\n        uint256 rg = _deposits_brrr[_msgSender()].div(o).mul(10**18);\r\n        if (_balances[_msgSender()] \u003e= rg) {\r\n            _payBackBrrr(rg, _msgSender(), _deposits_brrr[_msgSender()]);\r\n        } else {\r\n            uint256 t = _balances[_msgSender()].mul(o).div(10**18);\r\n            require(\r\n                t \u003c= _balances[_msgSender()],\r\n                \"More than in your balance, error with math\"\r\n            );\r\n            _payBackBrrr(_balances[_msgSender()], _msgSender(), t);\r\n        }\r\n        _total_withdrawals[_msgSender()] = _total_withdrawals[_msgSender()].add(\r\n            1\r\n        );\r\n    }\r\n\r\n    /**@dev Update the total supply from tether - if tether has changed total supply.\r\n     *\r\n     * Makes the money printer go brrrrrrrr\r\n     * Reward is given to whoever updates\r\n     * */\r\n    function brrrEvent() public isOnline returns (uint256) {\r\n        require(\r\n            block.timestamp \u003e\r\n                _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n                    ._last_check,\r\n            \"Already checked!\"\r\n        );\r\n        uint256 l = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._last_check;\r\n        uint256 s = _all_supply_checks[_all_supply_checks.length.sub(1)]\r\n            ._totalSupply;\r\n        uint256 d = Tether.totalSupply();\r\n        require(d != s, \"The supply hasn\u0027t changed\");\r\n        if (d \u003c s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (s.sub(d)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _printerGoesBrrr(d.mul(3));\r\n            _circulatingSupply = _circulatingSupply.add(reward);\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(reward);\r\n            emit Transfer(address(this), address(_msgSender()), reward);\r\n            return reward;\r\n        }\r\n        if (d \u003e s) {\r\n            supplyCheck memory sa = supplyCheck(block.timestamp, d);\r\n            _all_supply_checks.push(sa);\r\n            d = (d.sub(s)) * 10**12;\r\n            uint256 reward = d.div(1000);\r\n            d = d.sub(reward);\r\n            _burn(d.mul(3));\r\n            _circulatingSupply = _circulatingSupply.add(reward);\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(reward);\r\n            emit Transfer(address(this), address(_msgSender()), reward);\r\n            return reward;\r\n        }\r\n    }\r\n\r\n    function EmergencyWithdrawal() public isOffline returns (bool) {\r\n        require(!Online, \"Contract is not turned off\");\r\n        require(_deposits_brrr[_msgSender()] \u003e 0, \"You have no deposits\");\r\n        _payBackBrrr(\r\n            _balances[_msgSender()],\r\n            _msgSender(),\r\n            _deposits_brrr[_msgSender()]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function toggleOffline() public returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        Online = !Online;\r\n        return true;\r\n    }\r\n\r\n    function setBrrrAddress(address _brrrcontract) public returns (bool) {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n\r\n        require(_brrrcontract != address(0x0), \"Invalid address!\");\r\n        brrr = _brrrcontract;\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 =\u003e uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length \u003e index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calculateCurve() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"PriceFeed.sol":{"content":"pragma solidity ^0.6.7;\r\n\r\nimport \"./AggregatorInterface.sol\";\r\n\r\ncontract PriceFeed {\r\n    /**\r\n     * Network: Rinkeby\r\n     * Aggregator: ETH/USD\r\n     * Address: 0x0bF4e7bf3e1f6D6Dc29AA516A33134985cC3A5aA\r\n     */\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getLatestPrice(address _address) internal view returns (uint256) {\r\n        AggregatorInterface priceFeed = AggregatorInterface(_address);\r\n        int256 p = priceFeed.latestAnswer();\r\n        require(p \u003e 0, \"Invalid price feed!\");\r\n        return uint256(p);\r\n    }\r\n\r\n    /**\r\n     * Returns the timestamp of the latest price update\r\n     */\r\n    function getLatestPriceTimestamp(address _address)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        AggregatorInterface priceFeed = AggregatorInterface(_address);\r\n        return priceFeed.latestTimestamp();\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}