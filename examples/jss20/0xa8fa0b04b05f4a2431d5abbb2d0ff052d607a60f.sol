{"ERC20Interface.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\ncontract ERC20Interface {\r\n    event Transfer( address indexed _from, address indexed _to, uint _value);\r\n    event Approval( address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    function totalSupply() view public returns (uint _supply);\r\n    function balanceOf( address _who ) public view returns (uint _value);\r\n    function transfer( address _to, uint _value) public returns (bool _success);\r\n    function approve( address _spender, uint _value ) public returns (bool _success);\r\n    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\r\n    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\r\n}"},"OwnerHelper.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\ncontract OwnerHelper\r\n{\r\n\r\n    address public master;\r\n    address public issuer;\r\n    address public manager;\r\n\r\n    event ChangeMaster(address indexed _from, address indexed _to);\r\n    event ChangeIssuer(address indexed _from, address indexed _to);\r\n    event ChangeManager(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyMaster\r\n    {\r\n        require(msg.sender == master);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyIssuer\r\n    {\r\n        require(msg.sender == issuer);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyManager\r\n    {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        master = msg.sender;\r\n    }\r\n    \r\n    function transferMastership(address _to) onlyMaster public\r\n    {\r\n        require(_to != master);\r\n        require(_to != issuer);\r\n        require(_to != manager);\r\n        require(_to != address(0x0));\r\n\r\n        address from = master;\r\n        master = _to;\r\n\r\n        emit ChangeMaster(from, _to);\r\n    }\r\n\r\n    function transferIssuer(address _to) onlyMaster public\r\n    {\r\n        require(_to != master);\r\n        require(_to != issuer);\r\n        require(_to != manager);\r\n        require(_to != address(0x0));\r\n\r\n        address from = issuer;\r\n        issuer = _to;\r\n\r\n        emit ChangeIssuer(from, _to);\r\n    }\r\n\r\n    function transferManager(address _to) onlyMaster public\r\n    {\r\n        require(_to != master);\r\n        require(_to != issuer);\r\n        require(_to != manager);\r\n        require(_to != address(0x0));\r\n        \r\n        address from = manager;\r\n        manager = _to;\r\n        \r\n        emit ChangeManager(from, _to);\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath\r\n{\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n"},"VALLIX_Token.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nimport \"./ERC20Interface.sol\";\r\nimport \"./OwnerHelper.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract VALLIXToken is ERC20Interface, OwnerHelper\r\n{\r\n    using SafeMath for uint;\r\n    \r\n    string public name;\r\n    uint public decimals;\r\n    string public symbol;\r\n    \r\n    uint constant private E18 = 1000000000000000000;\r\n    uint constant private month = 2592000;\r\n    \r\n    uint constant public maxTotalSupply     = 10000000000 * E18;\r\n    \r\n    uint constant public maxSaleSupply      =  2000000000 * E18;\r\n    uint constant public maxCrowdSupply     =  1600000000 * E18;\r\n    uint constant public maxMktSupply       =  2800000000 * E18;\r\n    uint constant public maxTeamSupply      =  1600000000 * E18;\r\n    uint constant public maxReserveSupply   =  1600000000 * E18;\r\n    uint constant public maxAdvisorSupply   =   400000000 * E18;\r\n    \r\n    uint constant public teamVestingSupplyPerTime       = 100000000 * E18;\r\n    uint constant public teamVestingDate                = 2 * month;\r\n    uint constant public teamVestingTime                = 16;\r\n    \r\n    uint public totalTokenSupply;\r\n    \r\n    uint public tokenIssuedSale;\r\n    uint public privateIssuedSale;\r\n    uint public publicIssuedSale;\r\n    uint public tokenIssuedCrowd;\r\n    uint public tokenIssuedMkt;\r\n    uint public tokenIssuedTeam;\r\n    uint public tokenIssuedReserve;\r\n    uint public tokenIssuedAdvisor;\r\n    \r\n    uint public burnTokenSupply;\r\n    \r\n    mapping (address =\u003e uint) public balances;\r\n    mapping (address =\u003e mapping ( address =\u003e uint )) public approvals;\r\n    \r\n    mapping (address =\u003e uint) public privateFirstWallet;\r\n    mapping (address =\u003e uint) public privateSecondWallet;\r\n    mapping (address =\u003e uint) public privateThirdWallet;\r\n    mapping (address =\u003e uint) public privateFourthWallet;\r\n    mapping (address =\u003e uint) public privateFifthWallet;\r\n    \r\n    mapping (uint =\u003e uint) public teamVestingTimeAtSupply;\r\n    \r\n    bool public tokenLock = true;\r\n    bool public saleTime = true;\r\n    uint public endSaleTime = 0;\r\n\r\n    event Burn(address indexed _from, uint _value);\r\n    \r\n    event SaleIssue(address indexed _to, uint _tokens);\r\n    event CrowdIssue(address indexed _to, uint _tokens);\r\n    event MktIssue(address indexed _to, uint _tokens);\r\n    event TeamIssue(address indexed _to, uint _tokens);\r\n    event ReserveIssue(address indexed _to, uint _tokens);\r\n    event AdvisorIssue(address indexed _to, uint _tokens);\r\n    \r\n    event TokenUnLock(address indexed _to, uint _tokens);\r\n    \r\n    constructor() public\r\n    {\r\n        name        = \"VALLIX Token\";\r\n        decimals    = 18;\r\n        symbol      = \"VLX\";\r\n        \r\n        totalTokenSupply = 0;\r\n        \r\n        tokenIssuedSale     = 0;\r\n        tokenIssuedCrowd    = 0;\r\n        tokenIssuedMkt      = 0;\r\n        tokenIssuedTeam     = 0;\r\n        tokenIssuedReserve  = 0;\r\n        tokenIssuedAdvisor  = 0;\r\n        \r\n        require(maxTotalSupply == maxSaleSupply + maxCrowdSupply + maxMktSupply + maxTeamSupply + maxReserveSupply + maxAdvisorSupply);\r\n        \r\n        require(maxTeamSupply == teamVestingSupplyPerTime * teamVestingTime);\r\n        \r\n    }\r\n    \r\n    function totalSupply() view public returns (uint) \r\n    {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    function balanceOf(address _who) view public returns (uint) \r\n    {\r\n        uint balance = balances[_who];\r\n        balance = balance.add(privateFirstWallet[_who] + privateSecondWallet[_who] + privateThirdWallet[_who] + privateFourthWallet[_who] + privateFifthWallet[_who]);\r\n        \r\n        return balance;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) \r\n    {\r\n        require(isTransferable() == true);\r\n        require(balances[msg.sender] \u003e= _value);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool)\r\n    {\r\n        require(isTransferable() == true);\r\n        require(balances[msg.sender] \u003e= _value);\r\n        \r\n        approvals[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true; \r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public returns (uint) \r\n    {\r\n        return approvals[_owner][_spender];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) \r\n    {\r\n        require(isTransferable() == true);\r\n        require(balances[_from] \u003e= _value);\r\n        require(approvals[_from][msg.sender] \u003e= _value);\r\n        \r\n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to]  = balances[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function privateIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxSaleSupply \u003e= tokenIssuedSale.add(tokens));\r\n        \r\n        balances[_to]                   = balances[_to].add( tokens.mul(10)/100 );\r\n        privateFirstWallet[_to]         = privateFirstWallet[_to].add( tokens.mul(10)/100 );\r\n        privateSecondWallet[_to]        = privateSecondWallet[_to].add( tokens.mul(10)/100 );\r\n        privateThirdWallet[_to]         = privateThirdWallet[_to].add( tokens.mul(20)/100 );\r\n        privateFourthWallet[_to]        = privateFourthWallet[_to].add( tokens.mul(20)/100 );\r\n        privateFifthWallet[_to]         = privateFifthWallet[_to].add( tokens.mul(30)/100 );\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedSale = tokenIssuedSale.add(tokens);\r\n        privateIssuedSale = privateIssuedSale.add(tokens);\r\n        \r\n        emit SaleIssue(_to, tokens);\r\n    }\r\n\r\n    function publicIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxSaleSupply \u003e= tokenIssuedSale.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedSale = tokenIssuedSale.add(tokens);\r\n        publicIssuedSale = publicIssuedSale.add(tokens);\r\n        \r\n        emit SaleIssue(_to, tokens);\r\n    }\r\n\r\n    function crowdIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxCrowdSupply \u003e= tokenIssuedCrowd.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedCrowd = tokenIssuedCrowd.add(tokens);\r\n        \r\n        emit CrowdIssue(_to, tokens);\r\n    }\r\n    \r\n    function mktIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxMktSupply \u003e= tokenIssuedMkt.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedMkt = tokenIssuedMkt.add(tokens);\r\n        \r\n        emit MktIssue(_to, tokens);\r\n    }\r\n    \r\n    function reserveIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        require(maxReserveSupply \u003e= tokenIssuedReserve.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedReserve = tokenIssuedReserve.add(tokens);\r\n        \r\n        emit ReserveIssue(_to, tokens);\r\n    }\r\n\r\n    function teamIssueVesting(address _to, uint _time) onlyIssuer public\r\n    {\r\n        require(saleTime == false);\r\n        require(teamVestingTime \u003e= _time);\r\n        \r\n        uint time = now;\r\n        require( ( ( endSaleTime + (_time * teamVestingDate) ) \u003c time ) \u0026\u0026 ( teamVestingTimeAtSupply[_time] \u003e 0 ));\r\n        \r\n        uint tokens = teamVestingTimeAtSupply[_time];\r\n\r\n        require(maxTeamSupply \u003e= tokenIssuedTeam.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        teamVestingTimeAtSupply[_time] = 0;\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedTeam = tokenIssuedTeam.add(tokens);\r\n        \r\n        emit TeamIssue(_to, tokens);\r\n    }\r\n    \r\n    function advisorIssue(address _to, uint _value) onlyIssuer public\r\n    {\r\n        uint tokens = _value * E18;\r\n        \r\n        require(maxAdvisorSupply \u003e= tokenIssuedAdvisor.add(tokens));\r\n        \r\n        balances[_to] = balances[_to].add(tokens);\r\n        \r\n        totalTokenSupply = totalTokenSupply.add(tokens);\r\n        tokenIssuedAdvisor = tokenIssuedAdvisor.add(tokens);\r\n        \r\n        emit AdvisorIssue(_to, tokens);\r\n    }\r\n\r\n    function isTransferable() private view returns (bool)\r\n    {\r\n        if(tokenLock == false)\r\n        {\r\n            return true;\r\n        }\r\n        else if(msg.sender == manager)\r\n        {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function setTokenUnlock() onlyManager public\r\n    {\r\n        require(tokenLock == true);\r\n        require(saleTime == false);\r\n        \r\n        tokenLock = false;\r\n    }\r\n    \r\n    function setTokenLock() onlyManager public\r\n    {\r\n        require(tokenLock == false);\r\n        \r\n        tokenLock = true;\r\n    }\r\n    \r\n    function privateUnlock(address _to) onlyManager public\r\n    {\r\n        require(tokenLock == false);\r\n        require(saleTime == false);\r\n        \r\n        uint time = now;\r\n        uint unlockTokens = 0;\r\n\r\n        if( (time \u003e= endSaleTime.add(month)) \u0026\u0026 (privateFirstWallet[_to] \u003e 0) )\r\n        {\r\n            balances[_to] = balances[_to].add(privateFirstWallet[_to]);\r\n            unlockTokens = unlockTokens.add(privateFirstWallet[_to]);\r\n            privateFirstWallet[_to] = 0;\r\n        }\r\n        \r\n        if( (time \u003e= endSaleTime.add(month * 2)) \u0026\u0026 (privateSecondWallet[_to] \u003e 0) )\r\n        {\r\n            balances[_to] = balances[_to].add(privateSecondWallet[_to]);\r\n            unlockTokens = unlockTokens.add(privateSecondWallet[_to]);\r\n            privateSecondWallet[_to] = 0;\r\n        }\r\n\r\n        if( (time \u003e= endSaleTime.add(month * 3)) \u0026\u0026 (privateThirdWallet[_to] \u003e 0) )\r\n        {\r\n            balances[_to] = balances[_to].add(privateThirdWallet[_to]);\r\n            unlockTokens = unlockTokens.add(privateThirdWallet[_to]);\r\n            privateThirdWallet[_to] = 0;\r\n        }\r\n\r\n        if( (time \u003e= endSaleTime.add(month * 4)) \u0026\u0026 (privateFourthWallet[_to] \u003e 0) )\r\n        {\r\n            balances[_to] = balances[_to].add(privateFourthWallet[_to]);\r\n            unlockTokens = unlockTokens.add(privateFourthWallet[_to]);\r\n            privateFourthWallet[_to] = 0;\r\n        }\r\n\r\n        if( (time \u003e= endSaleTime.add(month * 5)) \u0026\u0026 (privateFifthWallet[_to] \u003e 0) )\r\n        {\r\n            balances[_to] = balances[_to].add(privateFifthWallet[_to]);\r\n            unlockTokens = unlockTokens.add(privateFifthWallet[_to]);\r\n            privateFifthWallet[_to] = 0;\r\n        }\r\n        \r\n        emit TokenUnLock(_to, unlockTokens);\r\n    }\r\n    \r\n    function () payable external\r\n    {\r\n        revert();\r\n    }\r\n    \r\n    function endSale() onlyManager public\r\n    {\r\n        require(saleTime == true);\r\n        \r\n        saleTime = false;\r\n        \r\n        uint time = now;\r\n        \r\n        endSaleTime = time;\r\n        \r\n        for(uint i = 1; i \u003c= teamVestingTime; i++)\r\n        {\r\n            teamVestingTimeAtSupply[i] = teamVestingTimeAtSupply[i].add(teamVestingSupplyPerTime);\r\n        }\r\n       \r\n    }    \r\n   \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) onlyManager public returns (bool success)\r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(manager, tokens);\r\n    }\r\n    \r\n    function burnToken(uint _value) onlyManager public\r\n    {\r\n        uint tokens = _value * E18;\r\n        \r\n        require(balances[msg.sender] \u003e= tokens);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        \r\n        burnTokenSupply = burnTokenSupply.add(tokens);\r\n        totalTokenSupply = totalTokenSupply.sub(tokens);\r\n        \r\n        emit Burn(msg.sender, tokens);\r\n    }\r\n    \r\n    function close() onlyMaster public\r\n    {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}"}}