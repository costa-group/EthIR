{"include.sol":{"content":"/* Orchid - WebRTC P2P VPN Market (on Ethereum)\n * Copyright (C) 2017-2019  The Orchid Authors\n*/\n\n/* GNU Affero General Public License, Version 3 {{{ */\n/*\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n**/\n/* }}} */\n\n\npragma solidity 0.5.13;\n\ninterface OrchidSeller {\n    function ring(bytes calldata shared, address target) external view returns (bytes memory);\n}\n\ninterface OrchidVerifier {\n    function book(bytes calldata shared, address target, bytes calldata receipt) external pure;\n}\n"},"verifier.sol":{"content":"/* Orchid - WebRTC P2P VPN Market (on Ethereum)\n * Copyright (C) 2017-2019  The Orchid Authors\n*/\n\n/* GNU Affero General Public License, Version 3 {{{ */\n/*\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n**/\n/* }}} */\n\n\npragma solidity 0.5.13;\n\nimport \"include.sol\";\n\ncontract OrchidLocked is OrchidSeller, OrchidVerifier {\n    mapping (bytes =\u003e mapping(address =\u003e bytes)) receipts_;\n\n    function book(bytes memory shared, address target, bytes memory receipt) public pure {\n        require(receipt.length == 65);\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(receipt, 32))\n            s := mload(add(receipt, 64))\n            v := and(mload(add(receipt, 65)), 255)\n        }\n\n        bytes32 message = keccak256(abi.encodePacked(target, shared));\n        address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", message)), v, r, s);\n        require(signer == address(0x772F12E2DcE34382813984B781CB873E22E699a2));\n    }\n\n    function list(bytes calldata shared, address target, bytes calldata receipt) external {\n        book(shared, target, receipt);\n        receipts_[shared][target] = receipt;\n    }\n\n    function ring(bytes calldata shared, address target) external view returns (bytes memory) {\n        bytes storage receipt = receipts_[shared][target];\n        require(receipt.length != 0);\n        return receipt;\n    }\n}\n"}}