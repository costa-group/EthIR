{{
  "language": "Solidity",
  "sources": {
    "solidity/contracts/KeepRegistry.sol": {
      "content": "pragma solidity 0.5.17;\n\n\n/// @title KeepRegistry\n/// @notice Governance owned registry of approved contracts and roles.\ncontract KeepRegistry {\n    enum ContractStatus {New, Approved, Disabled}\n\n    // Governance role is to enable recovery from key compromise by rekeying\n    // other roles. Also, it can disable operator contract panic buttons\n    // permanently.\n    address public governance;\n\n    // Registry Keeper maintains approved operator contracts. Each operator\n    // contract must be approved before it can be authorized by a staker or\n    // used by a service contract.\n    address public registryKeeper;\n\n    // Each operator contract has a Panic Button which can disable malicious\n    // or malfunctioning contract that have been previously approved by the\n    // Registry Keeper.\n    //\n    // New operator contract added to the registry has a default panic button\n    // value assigned (defaultPanicButton). Panic button for each operator\n    // contract can be later updated by Governance to individual value.\n    //\n    // It is possible to disable panic button for individual contract by\n    // setting the panic button to zero address. In such case, operator contract\n    // can not be disabled and is permanently approved in the registry.\n    mapping(address => address) public panicButtons;\n\n    // Default panic button for each new operator contract added to the\n    // registry. Can be later updated for each contract.\n    address public defaultPanicButton;\n\n    // Each service contract has a Operator Contract Upgrader whose purpose\n    // is to manage operator contracts for that specific service contract.\n    // The Operator Contract Upgrader can add new operator contracts to the\n    // service contractâ€™s operator contract list, and deprecate old ones.\n    mapping(address => address) public operatorContractUpgraders;\n\n    // Operator contract may have a Service Contract Upgrader whose purpose is\n    // to manage service contracts for that specific operator contract.\n    // Service Contract Upgrader can add and remove service contracts\n    // from the list of service contracts approved to work with the operator\n    // contract. List of service contracts is maintained in the operator\n    // contract and is optional - not every operator contract needs to have\n    // a list of service contracts it wants to cooperate with.\n    mapping(address => address) public serviceContractUpgraders;\n\n    // The registry of operator contracts\n    mapping(address => ContractStatus) public operatorContracts;\n\n    event OperatorContractApproved(address operatorContract);\n    event OperatorContractDisabled(address operatorContract);\n\n    event GovernanceUpdated(address governance);\n    event RegistryKeeperUpdated(address registryKeeper);\n    event DefaultPanicButtonUpdated(address defaultPanicButton);\n    event OperatorContractPanicButtonDisabled(address operatorContract);\n    event OperatorContractPanicButtonUpdated(\n        address operatorContract,\n        address panicButton\n    );\n    event OperatorContractUpgraderUpdated(\n        address serviceContract,\n        address upgrader\n    );\n    event ServiceContractUpgraderUpdated(\n        address operatorContract,\n        address keeper\n    );\n\n    modifier onlyGovernance() {\n        require(governance == msg.sender, \"Not authorized\");\n        _;\n    }\n\n    modifier onlyRegistryKeeper() {\n        require(registryKeeper == msg.sender, \"Not authorized\");\n        _;\n    }\n\n    modifier onlyPanicButton(address _operatorContract) {\n        address panicButton = panicButtons[_operatorContract];\n        require(panicButton != address(0), \"Panic button disabled\");\n        require(panicButton == msg.sender, \"Not authorized\");\n        _;\n    }\n\n    modifier onlyForNewContract(address _operatorContract) {\n        require(\n            isNewOperatorContract(_operatorContract),\n            \"Not a new operator contract\"\n        );\n        _;\n    }\n\n    modifier onlyForApprovedContract(address _operatorContract) {\n        require(\n            isApprovedOperatorContract(_operatorContract),\n            \"Not an approved operator contract\"\n        );\n        _;\n    }\n\n    constructor() public {\n        governance = msg.sender;\n        registryKeeper = msg.sender;\n        defaultPanicButton = msg.sender;\n    }\n\n    function setGovernance(address _governance) public onlyGovernance {\n        governance = _governance;\n        emit GovernanceUpdated(governance);\n    }\n\n    function setRegistryKeeper(address _registryKeeper) public onlyGovernance {\n        registryKeeper = _registryKeeper;\n        emit RegistryKeeperUpdated(registryKeeper);\n    }\n\n    function setDefaultPanicButton(address _panicButton) public onlyGovernance {\n        defaultPanicButton = _panicButton;\n        emit DefaultPanicButtonUpdated(defaultPanicButton);\n    }\n\n    function setOperatorContractPanicButton(\n        address _operatorContract,\n        address _panicButton\n    ) public onlyForApprovedContract(_operatorContract) onlyGovernance {\n        require(\n            panicButtons[_operatorContract] != address(0),\n            \"Disabled panic button cannot be updated\"\n        );\n        require(\n            _panicButton != address(0),\n            \"Panic button must be non-zero address\"\n        );\n\n        panicButtons[_operatorContract] = _panicButton;\n\n        emit OperatorContractPanicButtonUpdated(\n            _operatorContract,\n            _panicButton\n        );\n    }\n\n    function disableOperatorContractPanicButton(address _operatorContract)\n        public\n        onlyForApprovedContract(_operatorContract)\n        onlyGovernance\n    {\n        require(\n            panicButtons[_operatorContract] != address(0),\n            \"Panic button already disabled\"\n        );\n\n        panicButtons[_operatorContract] = address(0);\n\n        emit OperatorContractPanicButtonDisabled(_operatorContract);\n    }\n\n    function setOperatorContractUpgrader(\n        address _serviceContract,\n        address _operatorContractUpgrader\n    ) public onlyGovernance {\n        operatorContractUpgraders[_serviceContract] = _operatorContractUpgrader;\n        emit OperatorContractUpgraderUpdated(\n            _serviceContract,\n            _operatorContractUpgrader\n        );\n    }\n\n    function setServiceContractUpgrader(\n        address _operatorContract,\n        address _serviceContractUpgrader\n    ) public onlyGovernance {\n        serviceContractUpgraders[_operatorContract] = _serviceContractUpgrader;\n        emit ServiceContractUpgraderUpdated(\n            _operatorContract,\n            _serviceContractUpgrader\n        );\n    }\n\n    function approveOperatorContract(address operatorContract)\n        public\n        onlyForNewContract(operatorContract)\n        onlyRegistryKeeper\n    {\n        operatorContracts[operatorContract] = ContractStatus.Approved;\n        panicButtons[operatorContract] = defaultPanicButton;\n        emit OperatorContractApproved(operatorContract);\n    }\n\n    function disableOperatorContract(address operatorContract)\n        public\n        onlyForApprovedContract(operatorContract)\n        onlyPanicButton(operatorContract)\n    {\n        operatorContracts[operatorContract] = ContractStatus.Disabled;\n        emit OperatorContractDisabled(operatorContract);\n    }\n\n    function isNewOperatorContract(address operatorContract)\n        public\n        view\n        returns (bool)\n    {\n        return operatorContracts[operatorContract] == ContractStatus.New;\n    }\n\n    function isApprovedOperatorContract(address operatorContract)\n        public\n        view\n        returns (bool)\n    {\n        return operatorContracts[operatorContract] == ContractStatus.Approved;\n    }\n\n    function operatorContractUpgraderFor(address _serviceContract)\n        public\n        view\n        returns (address)\n    {\n        return operatorContractUpgraders[_serviceContract];\n    }\n\n    function serviceContractUpgraderFor(address _operatorContract)\n        public\n        view\n        returns (address)\n    {\n        return serviceContractUpgraders[_operatorContract];\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}