{"Application.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./OrganizationFactoryInterface.sol\";\n\n/**\n * @title Application\n * @dev Application contract for the backend\n */\ncontract Application {\n\n    struct OrganizationOwner {\n        address organizationAddress;\n        address organizationOwner;\n        bool isActive;\n    }\n\n    address public lotFactory;\n    address public applicationOwner;\n    address[] public organizations;\n    address[] public organizationOwners;\n    OrganizationFactoryInterface public organizationFactory;\n\n    mapping(address =\u003e OrganizationOwner) public organizationOwnersMap;\n\n    event OrganizationCreated (\n        address organization,\n        address owner,\n        address lotFactory\n    );\n\n    event OrganizationRemoved (\n        address organization,\n        address owner\n    );\n\n    event DefaultLotFactoryChanged (\n        address oldLotFactory,\n        address newLotFactory\n    );\n    \n    event OrganizationFactoryChanged (\n        address oldOrganizationFactory,\n        address newOrganizationFactory\n    );\n    \n    modifier onlyOwnerAccess() {\n        require(msg.sender == applicationOwner,  \"Only Owner accessible\");\n        _;\n    }\n\n    constructor(address _organizationFactory, address _lotFactory) public {\n        applicationOwner = msg.sender;\n        organizationFactory = OrganizationFactoryInterface(_organizationFactory);\n        lotFactory = _lotFactory;\n    }\n\n    /**\n     * @dev Updates the default lotFactory contract used when creating new orgs\n     */\n    function setLotFactory(address _newLotFactory)\n    public\n    onlyOwnerAccess\n    returns (address) {\n        address _oldLotFactory = lotFactory;\n        lotFactory = _newLotFactory;\n        emit DefaultLotFactoryChanged(_oldLotFactory, lotFactory);\n    }\n\n    /**\n     * @dev Updates the organizationFactory contract\n     */\n    function setOrganizationFactory(address _newOrgFactory)\n    public\n    onlyOwnerAccess\n    returns (address) {\n        address _oldOrgFactory = address(organizationFactory);\n        organizationFactory = OrganizationFactoryInterface(_newOrgFactory);\n        emit OrganizationFactoryChanged(_oldOrgFactory, address(organizationFactory));\n    }\n\n    /**\n     * @dev Creates new organization smart contract for given organization owner\n     */\n    function createOrganization(\n        address _organizationOwner\n    )\n    public\n    onlyOwnerAccess\n    returns (address)\n    {\n        return createOrganization(_organizationOwner,lotFactory);\n    }\n\n     /**\n     * @dev Creates new organization smart contract for given organization owner\n     */\n    function createOrganization(\n        address _organizationOwner,\n        address _lotFactory\n    )\n    public\n    onlyOwnerAccess\n    returns (address)\n    {\n        address newOrgAddress = organizationFactory.createOrganization( _lotFactory,_organizationOwner, true);\n        organizationOwners.push(_organizationOwner);\n        organizations.push(newOrgAddress);\n        organizationOwnersMap[_organizationOwner] = OrganizationOwner(\n            newOrgAddress,\n            _organizationOwner,\n            true\n        );\n\n        emit OrganizationCreated(newOrgAddress, _organizationOwner, _lotFactory);\n\n        return newOrgAddress;\n    }\n\n    /**\n     * @dev Get all the Organizations list of addresses.\n     */\n    function getOrganizations()\n    public\n    view\n    returns (address[] memory) {\n        return organizations;\n    }\n\n    /**\n     * @dev Remove organization so that they shouldn\u0027t create any more lots.\n     * @param _organization The address of organization which needs to be removed.\n     */\n    function removeOrganization(address _organization)\n    public\n    onlyOwnerAccess\n    {\n        organizationOwnersMap[_organization].isActive = false;\n\n        emit OrganizationRemoved(_organization, msg.sender);\n    }\n\n    /**\n     * @dev Remove organization so that they shouldn\u0027t create any more lots.\n     * @param _organization The address of organization which needs to be removed.\n     */\n    function getOrganization(address _organization)\n    public view\n    returns (address, bool)\n    {\n        return (organizationOwnersMap[_organization].organizationOwner, organizationOwnersMap[_organization].isActive);\n    }\n}\n"},"Lot.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./LotInterface.sol\";\n\nimport \"./OrganizationInterface.sol\";\nimport \"./PermissionsEnum.sol\";\n\n/**\n * @title Lot\n * @dev Lot contract to create new lot and change the states and change the ownership\n */\ncontract Lot is PermissionsEnum, LotInterface {\n    address public factory;\n\n    address public organization;\n    address public parentLot;\n    address public nextPermitted;\n\n    string public infoFileHash;\n    string public name;\n\n    uint32 public totalSupply;\n    uint32 public transferredSupply;\n\n    mapping(address =\u003e uint32) public supplyDistributionInfo;\n\n    enum LotState {\n        NEW,\n        INITIAL,\n        GROW,\n        HARVEST,\n        EXTRACTING,\n        EXTRACTED,\n        TESTING,\n        TESTED,\n        PRODUCT,\n        COMPLETE\n    }\n\n    LotState public state;\n\n    event LotTotalSupplyConfigured (\n        address organization,\n        address lot,\n        uint32 totalSupply\n    );\n\n    event LotNextPermittedChanged (\n        address lot,\n        address permitted\n    );\n\n    event LotStateChanged (\n        address organization,\n        address lot,\n        uint previousState,\n        uint nextState,\n        string infoFileHash\n    );\n\n    event LotOwnershipTransferred (\n        address lot,\n        address currentOwner,\n        address newOwner\n    );\n\n    modifier hasPermission(Permissions perm) {\n        require(OrganizationInterface(organization).hasPermissions(msg.sender, uint256(perm)), \"Not Allowed\");\n        _;\n    }\n\n    constructor(\n        address _organization,\n        address _factory,\n        string memory _name,\n        uint32 _totalSupply,\n        address _parentLot,\n        address _permitted)\n    public {\n        organization = _organization;\n        factory = _factory;\n\n        name = _name;\n        totalSupply = _totalSupply;\n        parentLot = _parentLot;\n        initLot(0);\n\n        nextPermitted = _permitted;\n        if (_permitted != address(0)) {\n            emit LotNextPermittedChanged(address(this), _permitted);\n        }\n    }\n\n    function getOrganization() public view returns (address) {\n        return organization;\n    }\n\n    function _getSubmittingOrganization(Permissions perm) internal view returns (address) {\n        // check nextPermitted oranization\n        if (nextPermitted != address(0) \u0026\u0026 OrganizationInterface(nextPermitted).hasPermissions(msg.sender, uint256(perm))) return nextPermitted;\n\n        if (OrganizationInterface(organization).hasPermissions(msg.sender, uint256(perm))) return organization;\n\n        return address(0);\n    }\n\n    /**\n     * @dev Change the Lot State.\n     * @param _nextState The next state of the Lot.\n     * @param _infoFileHash The new infoFileHash of the Lot from IPFS .\n     */\n    function changeLotState(\n        uint _nextState,\n        string memory _infoFileHash\n    )\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint(state);\n        require(_nextState != previousState, \"Cannot submit the same state over\");\n        \n        state = LotState(_nextState);\n        infoFileHash = _infoFileHash;\n\n        // Always return back to null after lot has changed\n        nextPermitted = address(0);\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _nextState, _infoFileHash);\n    }\n\n    /**\n     * @dev Changes the Lot state to Next State\n     * @param _nextState The next Lot State.\n     * @param _infoFileHash The File Hash representing IPFS record.\n     * @param _permitted Next permitted user for the Lot.\n     */\n    function changeLotStateWithNextPermitted(\n        uint _nextState,\n        string memory _infoFileHash,\n        address _permitted\n    )\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint(state);\n        require(_nextState != previousState, \"Cannot submit the same state over\");\n\n        state = LotState(_nextState);\n        infoFileHash = _infoFileHash;\n\n        nextPermitted = _permitted;\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _nextState, _infoFileHash);\n        emit LotNextPermittedChanged(address(this), _permitted);\n    }\n\n    /**\n     * @dev Sets the lot sate\n     * @param _lotState The state of the lot.\n     */\n    function setLotState(uint _lotState)\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint256(state);\n\n        state = LotState(_lotState);\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _lotState, infoFileHash);\n    }\n\n    /**\n     * @dev Allows to set infoHas to current Lot IPFS.\n     * @param _infoFileHash The File Hash representing IPFS record.\n     */\n    function setInfoFileHash(string memory _infoFileHash)\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        infoFileHash = _infoFileHash;\n    }\n\n    /**\n     * @dev Allows to set totalSupply to current Lot.\n     * @param _totalSupply The total supply of the current lot.\n     */\n    function setTotalSupply(uint32 _totalSupply)\n    public\n    hasPermission(Permissions.UPDATE_LOT)\n    {\n        require(totalSupply == 0, \"Total supply already set\");\n\n        totalSupply = _totalSupply;\n\n        emit LotTotalSupplyConfigured(organization, address(this), _totalSupply);\n    }\n\n    /**\n     * @dev Sets the next permitted address to do a state change on Lot\n     * @param _permitted the address to be added\n     */\n    function setNextPermitted(address _permitted)\n    public\n    hasPermission(Permissions.UPDATE_LOT)\n    {\n        nextPermitted = _permitted;\n        emit LotNextPermittedChanged(address(this), _permitted);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner)\n    public\n    hasPermission(Permissions.TRANSFER_LOT_OWNERSHIP)\n    returns (bool)\n    {\n        address currentOwner = organization;\n        organization = _newOwner;\n\n        emit LotOwnershipTransferred(address(this), currentOwner, _newOwner);\n        return true;\n    }\n\n    /**\n     * @dev Retieve the File Hash.\n     */\n    function retrieveFileHash()\n    public\n    view\n    returns (string memory)\n    {\n        return infoFileHash;\n    }\n\n    /**\n     * @dev Retieve Lot state.\n     */\n    function retrieveState()\n    public\n    view\n    returns (uint)\n    {\n        return uint(state);\n    }\n\n    /**\n     * @dev Retieve Total Supply.\n     */\n    function retrieveTotalSupply()\n    public\n    view\n    returns (uint32)\n    {\n        return totalSupply;\n    }\n\n    /**\n     * @dev Retieve Total Supply.\n     */\n    function retrieveTransferredSupply()\n    public\n    view\n    returns (uint32)\n    {\n        return transferredSupply;\n    }\n\n    /**\n     * @dev Retieve Sub Lot Supply.\n     * @param _lotAddress The address to Sub Lot.\n     */\n    function retrieveSubLotSupply(address _lotAddress)\n    public\n    view\n    returns (uint32)\n    {\n        return supplyDistributionInfo[_lotAddress];\n    }\n\n    /**\n     * @dev Creates a new Lot.\n     * @param _lotState The current state of the Lot.\n     */\n    function initLot(\n        uint _lotState\n    )\n    private\n    {\n        state = LotState(_lotState);\n    }\n\n    /**\n     * @dev Allocates supply for a given lot address\n     * @param _quantity The total supply transferred\n     */\n    function allocateSupply(address _lotAddress, uint32 _quantity)\n    public\n    hasPermission(Permissions.ALLOCATE_SUPPLY)\n    {\n        require((transferredSupply + _quantity) \u003c= totalSupply, \"Cannot allocate supply, exceeds total supply\");\n        supplyDistributionInfo[_lotAddress] = _quantity;\n        transferredSupply += _quantity;\n    }\n}\n"},"LotFactory.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./LotFactoryInterface.sol\";\nimport \"./LotInterface.sol\";\nimport \"./OrganizationInterface.sol\";\nimport \"./PermissionsEnum.sol\";\n\nimport \"./Lot.sol\";\n\ncontract LotFactory is PermissionsEnum, LotFactoryInterface {\n    event LotCreated (\n        address organization,\n        address lot,\n        string name\n    );\n\n    event SubLotCreated (\n        address organization,\n        address lot,\n        address parentLot,\n        string name,\n        uint32 totalSupply\n    );\n\n    function createLot(\n        address _organization,\n        string memory _name)\n    public \n    returns (address) \n    {\n        require(OrganizationInterface(_organization).hasPermissions(msg.sender, uint256(Permissions.CREATE_LOT)), \"Not Allowed\");\n\n        address lot = _createLot(_organization, _name, 0, address(0), address(0));\n\n        emit LotCreated(_organization, lot, _name);\n        return lot;\n    }\n\n    function createSubLot(\n        address _organization,\n        address _parentLot,\n        string memory _name,\n        uint32 _totalSupply,\n        address _nextPermitted)\n    public\n    returns (address)\n    {\n        require(OrganizationInterface(_organization).hasPermissions(msg.sender, uint256(Permissions.CREATE_SUB_LOT)), \"Not Allowed\");\n        require(LotInterface(_parentLot).getOrganization() == _organization, \"Lot does not belong to the organization\");\n        require(_totalSupply \u003e 0, \"Total supply must be greater than 0\");\n\n        address lot = _createLot(_organization, _name, _totalSupply, _parentLot, _nextPermitted);\n        LotInterface(_parentLot).allocateSupply(lot, _totalSupply);\n\n        emit SubLotCreated(_organization, lot, _parentLot, _name, _totalSupply);\n        return lot;\n    }\n\n    function _createLot(\n        address _organization,\n        string memory _name,\n        uint32 _totalSupply,\n        address _parentLot,\n        address _nextPermitted\n    ) internal returns (address) {\n        return address (new Lot(_organization, address(this), _name, _totalSupply, _parentLot, _nextPermitted));\n    }\n}\n"},"LotFactoryInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract LotFactoryInterface {\n    function createLot(\n        address _organization,\n        string memory _name)\n    public\n    returns(\n        address);\n\n    /*\n     * @dev Create Sub Lot for existing Lot.\n     */\n    function createSubLot(\n        address _organization,\n        address _parentLot,\n        string memory _name,\n        uint32 _totalSupply,\n        address _nextPermitted)\n    public\n    returns (\n        address);\n}\n"},"LotInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract LotInterface {\n    function getOrganization() public view returns (address);\n    function allocateSupply(address _lotAddress, uint32 _quantity) public;\n}\n"},"Migrations.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @title Migrations\n *\n *\n */\ncontract Migrations {\n    address public owner;\n    uint public last_completed_migration;\n\n    modifier restricted() {\n        if (msg.sender == owner) _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setCompleted(uint completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}\n"},"Organization.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./OrganizationInterface.sol\";\nimport \"./PermissionsEnum.sol\";\n\n\n/**\n * @title Organization\n * Organization contract to create new organization, add/delete Devices,\n * create new Lot\n */\ncontract Organization is OrganizationInterface, PermissionsEnum {\n\n    address public lotFactory;\n\n    mapping(address =\u003e bool) public adminDevices;\n\n    mapping(address =\u003e bool) public permittedDevices;\n\n    bool public isActive;\n\n    event DeviceAdded (\n        address device\n    );\n\n    event DeviceRemoved (\n        address device\n    );\n\n    event AdminDeviceAdded (\n        address device\n    );\n\n    event AdminDeviceRemoved (\n        address device\n    );\n\n    event LotFactoryChanged (\n        address oldFactory,\n        address newFactory\n    );\n\n    modifier onlyOwnerAccess() {\n        require(isAdminDevice(msg.sender), \"Only admin device accesible\");\n        _;\n    }\n\n    modifier onlyPermittedAccess() {\n        require(isPermittedDevice(msg.sender), \"Only permitted device accesible\");\n        _;\n    }\n\n    constructor(\n        address _lotFactory,\n        address _organizationOwner,\n        bool _isActive\n    )\n    public {\n        lotFactory = _lotFactory;\n\n        // Set all the roles to false initially\n        isActive = _isActive;\n\n        // make admin the owner device\n        _permitAdminDevice(_organizationOwner);\n    }\n    \n    /**\n     * @dev Returns the organization info\n     */\n    function organizationInfo()\n    public\n    view\n    returns (bool status) {\n        status = isActive;\n    }\n\n    /**\n     * @dev Check if device is able to add or remove permitted devices.\n     * @param _device The address to device check access.\n     */\n    function isAdminDevice(address _device)\n    public\n    view\n    returns (bool deviceAdmin)\n    {\n        return adminDevices[_device];\n    }\n\n    /**\n     * @dev Check if device is Permitted to perform Lot related operations.\n     * @param _device The address to device check access.\n     */\n    function isPermittedDevice(address _device)\n    public\n    view\n    returns (bool devicePermitted)\n    {\n        return (permittedDevices[_device] || adminDevices[_device]);\n    }\n\n    /**\n    * @dev Update lot factory address\n    */\n    function setLotFactory(address _lotFactory)\n    public\n    onlyOwnerAccess\n    {\n        address oldFactory = lotFactory;\n        lotFactory = _lotFactory;\n\n        // Emit we updated lot factory\n        emit LotFactoryChanged(oldFactory, _lotFactory);\n    }\n\n    /**\n     * @dev Allows the new _device to access organization.\n     * @param _deviceAddress The address of new device which needs access to organization.\n     */\n    function permitDevice(address _deviceAddress)\n    public\n    onlyOwnerAccess\n    returns (bool devicePermitted)\n    {\n        return _permitDevice(_deviceAddress);\n    }\n\n    function removeDevice(address _deviceAddress)\n    public\n    onlyOwnerAccess\n    returns (bool devicePermitted)\n    {\n        return _removeDevice(_deviceAddress);\n    }\n\n    function _permitDevice(address _deviceAddress)\n    private\n    returns (bool devicePermitted)\n    {\n        //validation to check already exist in the list\n        permittedDevices[_deviceAddress] = true;\n\n        emit DeviceAdded(_deviceAddress);\n        return true;\n    }\n\n    function _removeDevice(address _deviceAddress)\n    private\n\n    returns (bool devicePermitted)\n    {\n        permittedDevices[_deviceAddress] = false;\n\n        emit DeviceRemoved(_deviceAddress);\n        return true;\n    }\n\n    function permitAdminDevice(address _deviceAddress)\n    public\n    onlyOwnerAccess\n    returns (bool deviceAdmin)\n    {\n        return _permitAdminDevice(_deviceAddress);\n    }\n\n    function removeAdminDevice(address _deviceAddress)\n    public\n    onlyOwnerAccess\n    returns (bool deviceAdmin)\n    {\n        return _removeAdminDevice(_deviceAddress);\n    }\n\n    function _permitAdminDevice(address _deviceAddress)\n    private\n    returns (bool deviceAdmin)\n    {\n        //validation to check already exist in the list\n        adminDevices[_deviceAddress] = true;\n        permittedDevices[_deviceAddress] = true;\n\n        emit AdminDeviceAdded(_deviceAddress);\n        return true;\n    }\n\n    function _removeAdminDevice(address _deviceAddress)\n    private\n    returns (bool deviceAdmin)\n    {\n        adminDevices[_deviceAddress] = false;\n        permittedDevices[_deviceAddress] = false;\n\n        emit AdminDeviceRemoved(_deviceAddress);\n        return true;\n    }\n    \n\n    function hasPermissions(address permittee, uint256 permission)\n    public\n    view\n    returns (bool)\n    {\n        if (permittee == address(this)) return true;\n\n        if (permission == uint256(Permissions.CREATE_LOT)) return isPermittedDevice(permittee);\n        if (permission == uint256(Permissions.CREATE_SUB_LOT)) return isPermittedDevice(permittee);\n        if (permission == uint256(Permissions.UPDATE_LOT)) return isPermittedDevice(permittee);\n        if (permission == uint256(Permissions.TRANSFER_LOT_OWNERSHIP)) return isPermittedDevice(permittee);\n        if (permission == uint256(Permissions.ALLOCATE_SUPPLY)) return permittee == address(lotFactory);\n\n        return false;\n    }\n}\n"},"OrganizationFactory.sol":{"content":"\npragma solidity ^0.5.0;\n\nimport \"./OrganizationFactoryInterface.sol\";\nimport \"./Organization.sol\";\n\ncontract OrganizationFactory is OrganizationFactoryInterface {\n\n    function createOrganization(address _lotFactory, address _organizationOwner, bool _isActive) public returns (address) {\n        Organization organization = new Organization( _lotFactory, _organizationOwner, _isActive);\n        return address(organization);\n    }\n} \n"},"OrganizationFactoryInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ninterface OrganizationFactoryInterface {\n    function createOrganization(address lotFactory, address owner, bool isActive) external returns (address);\n}"},"OrganizationInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract OrganizationInterface {\n    function hasPermissions(address permittee, uint256 permission) public view returns (bool);\n}\n"},"PermissionsEnum.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract PermissionsEnum {\n    enum Permissions {\n        CREATE_LOT,\n        CREATE_SUB_LOT,\n        UPDATE_LOT,\n        TRANSFER_LOT_OWNERSHIP,\n        ALLOCATE_SUPPLY\n    }\n}\n"}}