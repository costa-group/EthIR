{"Identity.sol":{"content":"pragma solidity \u003e=0.4.0 \u003c0.7.0;\n\ncontract Identity {\n\n     // ************ Modifier *********** //\n    modifier onlyManager() {\n        require(msg.sender == owner, \"Not allowed\");\n        _;\n    }\n\n    modifier onlyAddressAllowed() {\n        require(addressAllowed[msg.sender] == true, \"Not allowed\");\n        _;\n    }\n\n\n    // ************** Events ************ //\n    event addressAllowedAdded(string, address);\n    event addressAllowedRemoved(string, address);\n    event memberAdded(string, string);\n    event memeberRemoved(string, string);\n    event updated(string, string);\n\n\n    address private owner;\n    mapping (address =\u003e bool) private addressAllowed;\n    mapping (string =\u003e bool) private member_exist;\n    mapping (string =\u003e address) private members;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function addAddressAllowed(address _address_allowed) external onlyManager {\n        addressAllowed[_address_allowed] = true;\n        emit addressAllowedAdded(\"Added new address allowed: \", _address_allowed);\n    }\n\n    function removeAddressAllowed(address _address_allowed) external onlyManager {\n        addressAllowed[_address_allowed] = false;\n        emit addressAllowedRemoved(\"Removed address allowed: \", _address_allowed);\n    }\n\n    function addMember(string calldata hash, address _address) external onlyAddressAllowed {\n        require(member_exist[hash] == false, \"Member already exist\");\n\n        members[hash] = _address;\n        member_exist[hash] = true;\n\n        emit memberAdded(\"Added new member with hash: \", hash);\n    }\n\n    function removeMember(string calldata hash) external onlyAddressAllowed {\n        require(member_exist[hash] == true, \"Member does not exist\");\n\n        members[hash] = address(0x0);\n        member_exist[hash] = false;\n\n        emit memeberRemoved(\"Removed member with hash: \", hash);\n    }\n\n    function updateMember(string calldata hash, address _address) external onlyAddressAllowed {\n        require(member_exist[hash] == true, \"Member does not exist\");\n\n        members[hash] = _address;\n\n        emit updated(\"Updated member with hash: \", hash);\n    }\n\n    function isTrusted(string calldata hash, address _address) external view onlyAddressAllowed returns (bool)  {\n        require(bytes(hash).length \u003e 0, \"Hash is required\");\n        require(_address != address(0), \"address is required\");\n\n        address tmp_address = members[hash];\n\n        if (tmp_address == _address) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n}"},"Trustdelivery.sol":{"content":"pragma solidity \u003e=0.4.0 \u003c0.7.0;\n\nimport \"./Identity.sol\";\n\ncontract Trustdelivery {\n    struct Member {\n        string hash;\n    }\n\n    struct Certification {\n        string member_hash;\n        string data_hash_signed;\n        string data_hash_type;\n        string data_hash;\n        string data_url;\n    }\n\n\n     // ************ Modifier *********** //\n    modifier onlyManager() {\n        require(msg.sender == owner, \"Not allowed\");\n        _;\n    }\n\n\n    // ************* Events ********** //\n    event MemberAdded(string, string);\n    event MemberRemoved(string, string);\n    event MemberUpdated(string, string);\n    event certificationAdded(string, string, string, string);\n    event IdentityContractSetted(string);\n\n\n    address private owner;\n    mapping (uint =\u003e Certification) private certifications;\n    uint private counter;\n    Identity private identityContract;\n\n\n\n    constructor() public {\n        counter = 0;\n        owner = msg.sender;\n    }\n\n    function setIdentity(address _address_identity) external onlyManager {\n        require(_address_identity != address(0), \"Address is required\");\n\n        identityContract = Identity(_address_identity);\n        emit IdentityContractSetted(\"The address of Identity contract was setted\");\n\n    }\n\n    function setMember(string calldata hash, address _address) external onlyManager {\n        require(bytes(hash).length \u003e 0, \"hash is required\");\n        require(_address != address(0), \"address is required\");\n\n        identityContract.addMember(hash, _address);\n        emit MemberAdded(\"New member was added with hash: \", hash);\n    }\n\n   function deleteMember(string calldata hash) external onlyManager {\n       require(bytes(hash).length \u003e 0, \"hash is required\");\n\n       identityContract.removeMember(hash);\n       emit MemberRemoved(\"Removed member with hash: \", hash);\n   }\n\n   function updateMember(string calldata hash, address _address) external onlyManager {\n       require(bytes(hash).length \u003e 0, \"hash is required\");\n       require(_address != address(0), \"address is required\");\n\n       identityContract.updateMember(hash, _address);\n       emit MemberUpdated(\"Update member with hash: \", hash);\n\n   }\n\n\n   function setCertification(\n    string calldata member_hash,\n    string calldata data_hash_signed,\n    string calldata data_hash,\n    string calldata data_hash_type,\n    string calldata data_url) external {\n           require(bytes(member_hash).length \u003e 0, \"Member hash is required\");\n           require(bytes(data_hash_signed).length \u003e 0, \"Data hash signed is required\");\n           require(bytes(data_hash).length \u003e 0, \"Data hash is required\");\n           require(bytes(data_hash_type).length \u003e 0, \"Data hash type is required\");\n           require(bytes(data_url).length \u003e 0, \"Data url is required\");\n\n           if (identityContract.isTrusted(member_hash, msg.sender) == true) {\n               Certification memory tmp_certification;\n               tmp_certification.member_hash = member_hash;\n               tmp_certification.data_hash_signed = data_hash_signed;\n               tmp_certification.data_hash = data_hash;\n               tmp_certification.data_hash_type = data_hash_type;\n               tmp_certification.data_url = data_url;\n\n               counter = counter + 1;\n               certifications[counter] = tmp_certification;\n               emit certificationAdded(\"New certification added. Member Hash: \", member_hash, \" , Data Hash: \", data_hash);\n           }\n\n           else {\n               revert(\"The member is not allowed to do this operation\");\n           }\n       }\n\n\n}"}}