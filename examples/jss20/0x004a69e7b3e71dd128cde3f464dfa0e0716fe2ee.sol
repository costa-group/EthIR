{"ABDKMath64x64.sol":{"content":"/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov \u003cmikhail.vladimirov@gmail.com\u003e\r\n */\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /**\r\n   * @dev Minimum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /**\r\n   * @dev Maximum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x \u003e= -0x8000000000000000 \u0026\u0026 x \u003c= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x \u003c\u003c 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x \u003e\u003e 64);\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x \u003c= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x \u003c\u003c 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x \u003e= 0);\r\n    return uint64 (x \u003e\u003e 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x \u003e\u003e 64;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) \u003c\u003c 64;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y \u003e\u003e 64;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (y \u003e= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \u0026\u0026\r\n        y \u003c= 0x1000000000000000000000000000000000000000000000000);\r\n      return -y \u003c\u003c 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x \u003c 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y \u003c 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult \u003c=\r\n          0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult \u003c=\r\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x \u003e= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) \u003e\u003e 64;\r\n    uint256 hi = uint256 (x) * (y \u003e\u003e 128);\r\n\r\n    require (hi \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi \u003c\u003c= 64;\r\n\r\n    require (hi \u003c=\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) \u003c\u003c 64) / y;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x \u003c 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y \u003c 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult \u003c= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result \u003c= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x \u003c 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) \u003e\u003e 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m \u003e= 0);\r\n    require (m \u003c\r\n        0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) \u003e\u003e 1));\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x \u003e= 0) {\r\n      absoluteResult = powu (uint256 (x) \u003c\u003c 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) \u003c\u003c 63, y);\r\n      negativeResult = y \u0026 1 \u003e 0;\r\n    }\r\n\r\n    absoluteResult \u003e\u003e= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult \u003c= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x \u003c 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x \u003e= 0);\r\n    return int128 (sqrtu (uint256 (x) \u003c\u003c 64, 0x10000000000000000));\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x \u003c= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x \u003e 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc \u003e= 0x10000000000000000) { xc \u003e\u003e= 64; msb += 64; }\r\n    if (xc \u003e= 0x100000000) { xc \u003e\u003e= 32; msb += 32; }\r\n    if (xc \u003e= 0x10000) { xc \u003e\u003e= 16; msb += 16; }\r\n    if (xc \u003e= 0x100) { xc \u003e\u003e= 8; msb += 8; }\r\n    if (xc \u003e= 0x10) { xc \u003e\u003e= 4; msb += 4; }\r\n    if (xc \u003e= 0x4) { xc \u003e\u003e= 2; msb += 2; }\r\n    if (xc \u003e= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 \u003c\u003c 64;\r\n    uint256 ux = uint256 (x) \u003c\u003c 127 - msb;\r\n    for (int256 bit = 0x8000000000000000; bit \u003e 0; bit \u003e\u003e= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux \u003e\u003e 255;\r\n      ux \u003e\u003e= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x \u003c= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x \u003e 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF \u003e\u003e 128);\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x \u003c 0x400000000000000000); // Overflow\r\n\r\n    if (x \u003c -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x \u0026 0x8000000000000000 \u003e 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E \u003e\u003e 128;\r\n    if (x \u0026 0x4000000000000000 \u003e 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC \u003e\u003e 128;\r\n    if (x \u0026 0x2000000000000000 \u003e 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F \u003e\u003e 128;\r\n    if (x \u0026 0x1000000000000000 \u003e 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 \u003e\u003e 128;\r\n    if (x \u0026 0x800000000000000 \u003e 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD \u003e\u003e 128;\r\n    if (x \u0026 0x400000000000000 \u003e 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 \u003e\u003e 128;\r\n    if (x \u0026 0x200000000000000 \u003e 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F \u003e\u003e 128;\r\n    if (x \u0026 0x100000000000000 \u003e 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 \u003e\u003e 128;\r\n    if (x \u0026 0x80000000000000 \u003e 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B \u003e\u003e 128;\r\n    if (x \u0026 0x40000000000000 \u003e 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F \u003e\u003e 128;\r\n    if (x \u0026 0x20000000000000 \u003e 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF \u003e\u003e 128;\r\n    if (x \u0026 0x10000000000000 \u003e 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 \u003e\u003e 128;\r\n    if (x \u0026 0x8000000000000 \u003e 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D \u003e\u003e 128;\r\n    if (x \u0026 0x4000000000000 \u003e 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 \u003e\u003e 128;\r\n    if (x \u0026 0x2000000000000 \u003e 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 \u003e\u003e 128;\r\n    if (x \u0026 0x1000000000000 \u003e 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC \u003e\u003e 128;\r\n    if (x \u0026 0x800000000000 \u003e 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB \u003e\u003e 128;\r\n    if (x \u0026 0x400000000000 \u003e 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 \u003e\u003e 128;\r\n    if (x \u0026 0x200000000000 \u003e 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D \u003e\u003e 128;\r\n    if (x \u0026 0x100000000000 \u003e 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 \u003e\u003e 128;\r\n    if (x \u0026 0x80000000000 \u003e 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 \u003e\u003e 128;\r\n    if (x \u0026 0x40000000000 \u003e 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B \u003e\u003e 128;\r\n    if (x \u0026 0x20000000000 \u003e 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 \u003e\u003e 128;\r\n    if (x \u0026 0x10000000000 \u003e 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE \u003e\u003e 128;\r\n    if (x \u0026 0x8000000000 \u003e 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF \u003e\u003e 128;\r\n    if (x \u0026 0x4000000000 \u003e 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A \u003e\u003e 128;\r\n    if (x \u0026 0x2000000000 \u003e 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 \u003e\u003e 128;\r\n    if (x \u0026 0x1000000000 \u003e 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 \u003e\u003e 128;\r\n    if (x \u0026 0x800000000 \u003e 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 \u003e\u003e 128;\r\n    if (x \u0026 0x400000000 \u003e 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 \u003e\u003e 128;\r\n    if (x \u0026 0x200000000 \u003e 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF \u003e\u003e 128;\r\n    if (x \u0026 0x100000000 \u003e 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 \u003e\u003e 128;\r\n    if (x \u0026 0x80000000 \u003e 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD \u003e\u003e 128;\r\n    if (x \u0026 0x40000000 \u003e 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC \u003e\u003e 128;\r\n    if (x \u0026 0x20000000 \u003e 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA \u003e\u003e 128;\r\n    if (x \u0026 0x10000000 \u003e 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE \u003e\u003e 128;\r\n    if (x \u0026 0x8000000 \u003e 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE \u003e\u003e 128;\r\n    if (x \u0026 0x4000000 \u003e 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D \u003e\u003e 128;\r\n    if (x \u0026 0x2000000 \u003e 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 \u003e\u003e 128;\r\n    if (x \u0026 0x1000000 \u003e 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C \u003e\u003e 128;\r\n    if (x \u0026 0x800000 \u003e 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D \u003e\u003e 128;\r\n    if (x \u0026 0x400000 \u003e 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 \u003e\u003e 128;\r\n    if (x \u0026 0x200000 \u003e 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C \u003e\u003e 128;\r\n    if (x \u0026 0x100000 \u003e 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 \u003e\u003e 128;\r\n    if (x \u0026 0x80000 \u003e 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE \u003e\u003e 128;\r\n    if (x \u0026 0x40000 \u003e 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E \u003e\u003e 128;\r\n    if (x \u0026 0x20000 \u003e 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 \u003e\u003e 128;\r\n    if (x \u0026 0x10000 \u003e 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 \u003e\u003e 128;\r\n    if (x \u0026 0x8000 \u003e 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 \u003e\u003e 128;\r\n    if (x \u0026 0x4000 \u003e 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 \u003e\u003e 128;\r\n    if (x \u0026 0x2000 \u003e 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C \u003e\u003e 128;\r\n    if (x \u0026 0x1000 \u003e 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A \u003e\u003e 128;\r\n    if (x \u0026 0x800 \u003e 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E \u003e\u003e 128;\r\n    if (x \u0026 0x400 \u003e 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F \u003e\u003e 128;\r\n    if (x \u0026 0x200 \u003e 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 \u003e\u003e 128;\r\n    if (x \u0026 0x100 \u003e 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 \u003e\u003e 128;\r\n    if (x \u0026 0x80 \u003e 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 \u003e\u003e 128;\r\n    if (x \u0026 0x40 \u003e 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA \u003e\u003e 128;\r\n    if (x \u0026 0x20 \u003e 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F \u003e\u003e 128;\r\n    if (x \u0026 0x10 \u003e 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA \u003e\u003e 128;\r\n    if (x \u0026 0x8 \u003e 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D \u003e\u003e 128;\r\n    if (x \u0026 0x4 \u003e 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 \u003e\u003e 128;\r\n    if (x \u0026 0x2 \u003e 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 \u003e\u003e 128;\r\n    if (x \u0026 0x1 \u003e 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB \u003e\u003e 128;\r\n\r\n    result \u003e\u003e= 63 - (x \u003e\u003e 64);\r\n    require (result \u003c= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x \u003c 0x400000000000000000); // Overflow\r\n\r\n    if (x \u003c -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (\r\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 \u003e\u003e 128));\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x \u003c\u003c 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x \u003e\u003e 192;\r\n      if (xc \u003e= 0x100000000) { xc \u003e\u003e= 32; msb += 32; }\r\n      if (xc \u003e= 0x10000) { xc \u003e\u003e= 16; msb += 16; }\r\n      if (xc \u003e= 0x100) { xc \u003e\u003e= 8; msb += 8; }\r\n      if (xc \u003e= 0x10) { xc \u003e\u003e= 4; msb += 4; }\r\n      if (xc \u003e= 0x4) { xc \u003e\u003e= 2; msb += 2; }\r\n      if (xc \u003e= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x \u003c\u003c 255 - msb) / ((y - 1 \u003e\u003e msb - 191) + 1);\r\n      require (result \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y \u003e\u003e 128);\r\n      uint256 lo = result * (y \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x \u003e\u003e 192;\r\n      uint256 xl = x \u003c\u003c 64;\r\n\r\n      if (xl \u003c lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi \u003c\u003c 128;\r\n      if (xl \u003c lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi \u003e\u003e 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc \u003e= 0x100000000000000000000000000000000) { xc \u003e\u003e= 128; msb += 128; }\r\n      if (xc \u003e= 0x10000000000000000) { xc \u003e\u003e= 64; msb += 64; }\r\n      if (xc \u003e= 0x100000000) { xc \u003e\u003e= 32; msb += 32; }\r\n      if (xc \u003e= 0x10000) { xc \u003e\u003e= 16; msb += 16; }\r\n      if (xc \u003e= 0x100) { xc \u003e\u003e= 8; msb += 8; }\r\n      if (xc \u003e= 0x10) { xc \u003e\u003e= 4; msb += 4; }\r\n      if (xc \u003e= 0x4) { xc \u003e\u003e= 2; msb += 2; }\r\n      if (xc \u003e= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe \u003e 0) x \u003e\u003e= xe;\r\n      else x \u003c\u003c= -xe;\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y \u003e 0) {\r\n        if (y \u0026 1 \u003e 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result \u003e=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result \u003e\u003e= 128;\r\n            re += 1;\r\n          } else result \u003e\u003e= 127;\r\n          if (re \u003c -127) return 0; // Underflow\r\n          require (re \u003c 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y \u003e\u003e= 1;\r\n          xe \u003c\u003c= 1;\r\n          if (x \u003e=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x \u003e\u003e= 128;\r\n            xe += 1;\r\n          } else x \u003e\u003e= 127;\r\n          if (xe \u003c -127) return 0; // Underflow\r\n          require (xe \u003c 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re \u003e 0) result \u003c\u003c= re;\r\n      else if (re \u003c 0) result \u003e\u003e= -re;\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      require (r \u003e 0);\r\n      while (true) {\r\n        uint256 rr = x / r;\r\n        if (r == rr || r + 1 == rr) return uint128 (r);\r\n        else if (r == rr + 1) return uint128 (rr);\r\n        r = r + rr + 1 \u003e\u003e 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n"},"IRipper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface IRipper {\n    function redeploy() external;\n}\n"},"Jinn.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./IRipper.sol\";\nimport \"./RichBitchCoin.sol\";\n\n\ncontract Jinn is IRipper{\n    address owner;\n    address payable treasurer;\n    address public pyramid;\n    bool eol;\n    event LogCreatedPyramid(address pyramid);\n\n    constructor(address payable _treasurer) public {\n        owner = msg.sender;\n        treasurer = _treasurer;\n        deploy();\n    }\n\n    function setEndOfLife(bool _eol) public {\n        require(msg.sender == owner, \"Go home loser\");\n        eol = _eol;\n    }\n\n    function redeploy() external override {\n        require(msg.sender == pyramid, \"Go home loser\");\n        if(eol){\n            selfdestruct(treasurer);\n        } else\n            deploy();\n    }\n\n    function deploy() private {\n        RichBitchCoin p = new RichBitchCoin(treasurer);\n        pyramid = address(p);\n        emit LogCreatedPyramid(pyramid);\n    }\n}\n"},"Migrations.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.4.25 \u003c0.7.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"},"RichBitchCoin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./IRipper.sol\";\nimport {ABDKMath64x64} from \"./ABDKMath64x64.sol\";\n\n\ncontract RichBitchCoin {\n    address[] public investors;\n    mapping(address =\u003e uint256) public investments;\n    mapping(address =\u003e uint256) public balances;\n    mapping(address =\u003e address) public referrers;\n    mapping(address =\u003e address[]) referrals;\n    mapping(address =\u003e uint256) public lastInvestmentBlock;\n    uint256 public lastTransactionBlock;\n    uint256 public totalInvested = 0;\n    address owner;\n    address payable treasurer;\n\n    event Investment(\n        address investor,\n        uint256 amount,\n        address referrer,\n        bool newArrival\n    );\n\n    event Withdrawal(address investor, uint256 amount, address referrer);\n\n    event GameOver(address investor);\n\n    constructor(address payable _treasurer) public {\n        owner = msg.sender;\n        treasurer = _treasurer;\n    }\n\n    function readGraph() public view returns (address[2][] memory) {\n        address[2][] memory graph = new address[2][](investors.length);\n        for (uint256 i = 0; i \u003c graph.length; i++) {\n            address investor = investors[i];\n            if (isInvestor(investor)) {\n                graph[i][0] = investor;\n                graph[i][1] = referrers[investor];\n            }\n        }\n        return graph;\n    }\n\n    function invest(address referrer) public payable {\n        add(msg.value, msg.sender, referrer);\n    }\n\n    function withdraw() public onlyInvestor {\n        withdrawAllBalance(msg.sender);\n    }\n\n    function add(\n        uint256 amount,\n        address investor,\n        address referrer\n    ) private {\n        require(amount \u003e 0, \"Go home loser\");\n        bool newArrival = !isInvestor(investor) \u0026\u0026 !hasReferrer(investor);\n        uint256 oldBalance = 0;\n        if (isInvestor(investor)) {\n            oldBalance = withdrawableBalance(investor);\n        }\n        if (newArrival) {\n            investors.push(investor);\n        }\n        totalInvested += amount;\n        investments[investor] += amount;\n        balances[investor] = oldBalance + amount;\n        processReferrer(investor, referrer);\n        lastInvestmentBlock[investor] = block.number;\n        lastTransactionBlock = block.number;\n        emit Investment(investor, amount, referrers[investor], newArrival);\n    }\n\n    function processReferrer(address investor, address proposedReferrer)\n        private\n    {\n        if (!hasReferrer(investor)) {\n            address referrer = proposedReferrer;\n            if (!isInvestor(referrer) || investor == referrer) {\n                referrer = pickReferrer(investor);\n            }\n            setReferrer(investor, referrer);\n        }\n    }\n\n    function setReferrer(address investor, address referrer) private {\n        referrers[investor] = referrer;\n        referrals[referrer].push(investor);\n    }\n\n    function pickReferrer(address investor) private view returns (address) {\n        address candidate = address(this);\n        for (uint256 i = 0; i \u003c investors.length; i++) {\n            if(investors[i] != investor){\n                candidate = investors[i];\n                uint256 refsNum = referrals[candidate].length;\n                if (refsNum == 0) {\n                    return candidate;\n                }\n            }\n        }\n        return candidate;\n    }\n\n    function withdrawAllBalance(address payable investor) private {\n        uint256 amount = withdrawableBalance(investor);\n        uint256 threshold = totalInvested / 10;\n        bool destroy = false;\n        if (amount + threshold \u003e= address(this).balance) {\n            amount = address(this).balance - threshold;\n            destroy = true;\n        }\n        investments[investor] = 0;\n        balances[investor] = 0;\n        investor.transfer(amount);\n        emit Withdrawal(investor, amount, referrers[investor]);\n        updateReferralsOnWithdrawal(investor);\n        if (destroy) {\n            emit GameOver(investor);\n            IRipper(owner).redeploy();\n            selfdestruct(treasurer);\n        } else {\n            lastTransactionBlock = block.number;\n        }\n    }\n\n    function sweep() public {\n        require(msg.sender == treasurer, \"Go home loser\");\n        // make sure a year of inactivity has passed\n        require(blocksSinceLastTransaction() \u003e 2250000, \"Too early, don\\\u0027t be greedy man\");\n        emit GameOver(treasurer);\n        selfdestruct(treasurer);\n    }\n\n    function updateReferralsOnWithdrawal(address investor) private {\n        address referrer = referrers[investor];\n        address[] memory orphanReferrals = referrals[investor];\n        for (uint256 i = 0; i \u003c orphanReferrals.length; i++) {\n            setReferrer(orphanReferrals[i], referrer);\n        }\n        delete referrals[investor];\n    }\n\n    modifier onlyInvestor() {\n        require(\n            isInvestor(msg.sender),\n            \"Only investors with non-zero balance can do this.\"\n        );\n        _;\n    }\n\n    function isInvestor(address a) public view returns (bool) {\n        return balances[a] \u003e 0;\n    }\n\n    function hasReferrer(address a) public view returns (bool) {\n        return referrers[a] != address(0);\n    }\n\n    function referralsCount(address a) public view returns (int128) {\n        int128 count = 0;\n        for(uint i = 0; i\u003creferrals[a].length; i++){\n            if(investments[referrals[a][i]] \u003e investments[a]/2){\n                count ++;\n            }\n        }\n        return count;\n    }\n\n    function withdrawableBalance(address investor)\n        public\n        view\n        returns (uint256)\n    {\n        if(balances[investor] == 0){\n            return 0;\n        }\n        return\n            interest(\n                balances[investor],\n                blocksSinceLastInvestment(investor),\n                referralsCount(investor)\n            );\n    }\n\n    function blocksSinceLastInvestment(address investor)\n        public\n        view\n        returns (uint256)\n    {\n        return block.number - lastInvestmentBlock[investor];\n    }\n\n    function blocksSinceLastTransaction()\n        public\n        view\n        returns (uint256)\n    {\n        return block.number - lastTransactionBlock;\n    }\n\n    function interest(\n        uint256 balance,\n        uint256 blocks,\n        int128 refCount\n    ) public pure returns (uint256) {\n        int128 factor = interestFactor(refCount); //TODO cap multiplier\n        return ABDKMath64x64.mulu(ABDKMath64x64.pow(factor, blocks), balance);\n    }\n\n    function interestFactor(int128 referralsNum) public pure returns (int128) {\n        // ~= 0.00001, ~0.001% per block, ~6% per day\n        int128 baseInterestRate = 184467440737096;\n        int128 interestRate = baseInterestRate * (1 + referralsNum);\n        return (1 \u003c\u003c 64) + interestRate; // ~= 1.00001 with base rate;\n    }\n}\n"}}