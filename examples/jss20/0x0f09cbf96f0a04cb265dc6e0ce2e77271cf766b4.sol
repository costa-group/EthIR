{"ERC20.sol":{"content":"pragma solidity ^0.5.4;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\n\ncontract ERC20 is IERC20 {\n\n  using SafeMath for uint256;\n\n  mapping (address =\u003e uint256) private _balances;\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n  uint256 private _totalSupply;\n\n  function totalSupply()\n  public view\n  returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address account)\n  public view\n  returns (uint256) {\n    return _balances[account];\n  }\n\n  function transfer(address recipient, uint256 amount)\n  public\n  returns (bool) {\n    _transfer(msg.sender, recipient, amount);\n    return true;\n  }\n\n  function allowance(address owner, address spender)\n  public view\n  returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  function approve(address spender, uint256 amount)\n  public\n  returns (bool) {\n    _approve(msg.sender, spender, amount);\n    return true;\n  }\n\n  function transferFrom(address sender, address recipient, uint256 amount)\n  public\n  returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n  function _transfer(address sender, address recipient, uint256 amount)\n  internal {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  function _mint(address account, uint256 amount)\n  internal {\n    require(account != address(0), \"ERC20: mint to the zero address\");\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  function _burn(address account, uint256 amount)\n  internal {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  function _approve(address owner, address spender, uint256 amount)\n  internal {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n}"},"HasBlacklist.sol":{"content":"pragma solidity ^0.5.4;\n\ncontract HasBlacklist{\n\n  mapping(address =\u003e bool) private blacklist;\n\n  event Blacklist(address indexed addr, bool blakclisted);\n\n  function isBlacklisted(address addr)\n  public view\n  returns(bool){\n    return blacklist[addr];\n  }\n\n  function _addToBlacklist(address addr)\n  internal{\n    blacklist[addr] = true;\n    emit Blacklist(addr, blacklist[addr]);\n  }\n\n  function _removeFromBlacklist(address addr)\n  internal{\n    blacklist[addr] = false;\n    emit Blacklist(addr, blacklist[addr]);\n  }\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"MasterCopy.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract MasterCopy {\n\n  address public masterCopy;\n  event Upgraded(address masterCopy);\n\n  function _changeMasterCopy(address _masterCopy)\n  internal {\n    require(_masterCopy != address(0), \"Invalid master copy address provided\");\n    emit Upgraded(_masterCopy);\n    masterCopy = _masterCopy;\n  }\n}\n"},"Migrations.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.5.4;\n\n\ncontract Ownable {\n\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(isOwner(), \"ONLY_OWNER\");\n    _;\n  }\n\n  function isOwner()\n  public view\n  returns (bool) {\n    return msg.sender == _owner;\n  }\n\n  function renounceOwnership()\n  public\n  onlyOwner {\n    emit OwnershipTransferred(_owner, address(0x01));\n    _owner = address(0x01);\n  }\n\n  function transferOwnership(address newOwner)\n  external\n  onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  function _transferOwnership(address newOwner)\n  internal {\n    require(newOwner != address(0), \"BAD_ADDRESS\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}"},"Pausable.sol":{"content":"pragma solidity ^0.5.4;\n\ncontract Pausable{\n\n  bool paused;\n\n  event Paused();\n  event Unpaused();\n\n  modifier whenNotPaused(){\n    require(!paused, \"PAUSED\");\n    _;\n  }\n\n  modifier whenPaused(){\n    require(paused, \"NOT_PAUSED\");\n    _;\n  }\n\n  function _pause() internal {\n    emit Paused();\n    paused = true;\n  }\n\n  function _unpause() internal {\n    emit Unpaused();\n    paused = false;\n  }\n\n  function isPaused()\n  public view\n  returns(bool){\n    return paused;\n  }\n}"},"Proxy.sol":{"content":"pragma solidity ^0.5.4;\n\ncontract Proxy {\n\n  address implementation;\n\n  constructor(address _implementation)\n  public {\n    implementation = _implementation;\n  }\n\n  function()\n  external payable {\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      let target := sload(0)\n      calldatacopy(0, 0, calldatasize())\n      let result := delegatecall(gas, target, 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      require(c \u003e= a, \"SafeMath: addition overflow\");\n      return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      require(b \u003c= a, errorMessage);\n      uint256 c = a - b;\n      return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      if (a == 0) {\n        return 0;\n      }\n      uint256 c = a * b;\n      require(c / a == b, \"SafeMath: multiplication overflow\");\n      return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n      return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      require(b \u003e 0, errorMessage);\n      uint256 c = a / b;\n      return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n      return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n      require(b != 0, errorMessage);\n      return a % b;\n    }\n}"},"Token.sol":{"content":"pragma solidity ^0.5.4;\n\nimport \"./ERC20.sol\";\nimport \"./TokenDetails.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\nimport \"./HasBlacklist.sol\";\nimport \"./MasterCopy.sol\";\n\ncontract Token is MasterCopy, ERC20, TokenDetails, Ownable, Pausable, HasBlacklist{\n\n  function setup(address __owner)\n  external {\n    require(owner() == address(0), \"ALREADY_INITIALIZED\");\n    _transferOwnership(__owner);\n    detail(\"Visible\", \"VSB\", 18);\n    _mint(owner(), 100000000000000000000000000);\n  }\n\n  function mint(uint256 value)\n  external onlyOwner whenNotPaused {\n    _mint(owner(), value);\n  }\n\n  function burn(uint256 value)\n  external whenNotPaused {\n    _burn(msg.sender, value);\n  }\n\n  function pause()\n  external onlyOwner whenNotPaused {\n    _pause();\n  }\n\n  function unpause()\n  external onlyOwner whenPaused {\n    _unpause();\n  }\n\n  function addToBlacklist(address addr)\n  external onlyOwner {\n    _addToBlacklist(addr);\n  }\n\n  function removeFromBlacklist(address addr)\n  external onlyOwner {\n    _removeFromBlacklist(addr);\n  }\n\n  function transfer(address to, uint256 value)\n  public whenNotPaused\n  returns (bool) {\n    require(!isBlacklisted(msg.sender), \"BLACKLISTED\");\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(address from, address to, uint256 value)\n  public whenNotPaused\n  returns (bool) {\n    require(!isBlacklisted(from), \"BLACKLISTED\");\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(address spender, uint256 value)\n  public whenNotPaused\n  returns (bool) {\n    require(!isBlacklisted(msg.sender), \"BLACKLISTED\");\n    return super.approve(spender, value);\n  }\n\n  function upgrade(address _newImplementation)\n  external onlyOwner{\n    _changeMasterCopy(_newImplementation);\n  }\n}"},"TokenDetails.sol":{"content":"pragma solidity ^0.5.4;\n\ncontract TokenDetails{\n\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  function detail(string memory name, string memory symbol, uint8 decimals)\n  internal {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  function name()\n  public view\n  returns (string memory) {\n    return _name;\n  }\n\n  function symbol()\n  public view\n  returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals()\n  public view\n  returns (uint8) {\n    return _decimals;\n  }\n}"}}