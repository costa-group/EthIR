{"Address.sol":{"content":"pragma solidity 0.4.25;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n}\n"},"ERC165.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC165.sol\";\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it\u0027s supported\n     */\n    mapping(bytes4 =\u003e bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_InterfaceId_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"},"ERC721.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 =\u003e address) internal _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address =\u003e uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address =\u003e mapping (address =\u003e bool)) private _operatorApprovals;\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256(\u0027balanceOf(address)\u0027)) ^\n     *     bytes4(keccak256(\u0027ownerOf(uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027approve(address,uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027getApproved(uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027setApprovalForAll(address,bool)\u0027)) ^\n     *     bytes4(keccak256(\u0027isApprovedForAll(address,address)\u0027)) ^\n     *     bytes4(keccak256(\u0027transferFrom(address,address,uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256,bytes)\u0027))\n     */\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        require(to != address(0));\n\n        _clearApproval(from, tokenId);\n        _removeTokenFrom(from, tokenId);\n        _addTokenTo(to, tokenId);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        // solium-disable-next-line arg-overflow\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        _addTokenTo(to, tokenId);\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        _clearApproval(owner, tokenId);\n        _removeTokenFrom(owner, tokenId);\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenTo(address to, uint256 tokenId) internal {\n        require(_tokenOwner[tokenId] == address(0));\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n    }\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * Note that this function is left internal to make ERC721Enumerable possible, but is not\n     * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n     * and doesn\u0027t clear approvals.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _tokenOwner[tokenId] = address(0);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * Reverts if the given address is not indeed the owner of the token\n     * @param owner owner of the token\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(address owner, uint256 tokenId) private {\n        require(ownerOf(tokenId) == owner);\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n"},"ERC721Enumerable.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC721Enumerable.sol\";\nimport \"./ERC721.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address =\u003e uint256[]) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 =\u003e uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 =\u003e uint256) private _allTokensIndex;\n\n    bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n     * 0x780e9d63 ===\n     *     bytes4(keccak256(\u0027totalSupply()\u0027)) ^\n     *     bytes4(keccak256(\u0027tokenOfOwnerByIndex(address,uint256)\u0027)) ^\n     *     bytes4(keccak256(\u0027tokenByIndex(uint256)\u0027))\n     */\n\n    /**\n     * @dev Constructor function\n     */\n    constructor () public {\n        // register the supported interface to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721Enumerable);\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index \u003c balanceOf(owner));\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index \u003c totalSupply());\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * This function is internal due to language limitations, see the note in ERC721.sol.\n     * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenTo(address to, uint256 tokenId) internal {\n        super._addTokenTo(to, tokenId);\n        uint256 length = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * This function is internal due to language limitations, see the note in ERC721.sol.\n     * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n     * and doesn\u0027t clear approvals.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFrom(address from, uint256 tokenId) internal {\n        super._removeTokenFrom(from, tokenId);\n\n        // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n        // then delete the last slot.\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n        _ownedTokens[from][tokenIndex] = lastToken;\n        // This also deletes the contents at the last position of the array\n        _ownedTokens[from].length--;\n\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n        // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n        _ownedTokensIndex[tokenId] = 0;\n        _ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to address the beneficiary that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted by the msg.sender\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Reorg all tokens array\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n        uint256 lastToken = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastToken;\n        _allTokens[lastTokenIndex] = 0;\n\n        _allTokens.length--;\n        _allTokensIndex[tokenId] = 0;\n        _allTokensIndex[lastToken] = tokenIndex;\n    }\n}\n"},"ERC721Metadata.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./ERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./ERC165.sol\";\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 =\u003e string) private _tokenURIs;\n\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *     bytes4(keccak256(\u0027name()\u0027)) ^\n     *     bytes4(keccak256(\u0027symbol()\u0027)) ^\n     *     bytes4(keccak256(\u0027tokenURI(uint256)\u0027))\n     */\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721Metadata);\n    }\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n        return _tokenURIs[tokenId];\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token\n     * Reverts if the token ID does not exist\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"IERC165.sol":{"content":"pragma solidity 0.4.25;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC721.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC165.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n"},"IERC721Enumerable.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n"},"IERC721Metadata.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"pragma solidity 0.4.25;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\n}\n"},"IOracle.sol":{"content":"pragma solidity 0.4.25;\n\n\n/// @title IOracle\n/// @dev Interface for getting the data from the oracle contract.\ninterface IOracle {\n    function ethUsdPrice() external view returns(uint256);\n}\n"},"ISettings.sol":{"content":"pragma solidity 0.4.25;\n\n\n/// @title ISettings\n/// @dev Interface for getting the data from settings contract.\ninterface ISettings {\n    function oracleAddress() external view returns(address);\n    function minDeposit() external view returns(uint256);\n    function sysFee() external view returns(uint256);\n    function userFee() external view returns(uint256);\n    function ratio() external view returns(uint256);\n    function globalTargetCollateralization() external view returns(uint256);\n    function tmvAddress() external view returns(uint256);\n    function maxStability() external view returns(uint256);\n    function minStability() external view returns(uint256);\n    function gasPriceLimit() external view returns(uint256);\n    function isFeeManager(address account) external view returns (bool);\n    function tBoxManager() external view returns(address);\n}\n"},"IToken.sol":{"content":"pragma solidity 0.4.25;\n\n\n/// @title IToken\n/// @dev Interface for interaction with the TMV token contract.\ninterface IToken {\n    function burnLogic(address from, uint256 value) external;\n    function approve(address spender, uint256 value) external;\n    function balanceOf(address who) external view returns (uint256);\n    function mint(address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\n"},"SafeMath.sol":{"content":"pragma solidity 0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \u0027mul\u0027);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, \u0027div\u0027);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \u0027sub\u0027);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \u0027add\u0027);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n"},"TBoxManager.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./TBoxToken.sol\";\nimport \"./ISettings.sol\";\nimport \"./IToken.sol\";\nimport \"./IOracle.sol\";\n\n\n/// @title TBoxManager\ncontract TBoxManager is TBoxToken {\n\n    // Total packed Ether\n    uint256 public globalETH;\n\n    // Precision using for USD and commission\n    uint256 public precision = 100000;\n\n    // The address of the system settings contract\n    ISettings public settings;\n\n    /// @dev An array containing the Boxes struct for all Boxes in existence. The ID\n    ///  of each Box is actually an index into this array.\n    Box[] public boxes;\n\n    /// @dev The main Box struct. Every Box in TimviSystem is represented by a copy\n    ///  of this structure.\n    struct Box {\n        // The collateral Ether amount in wei\n        uint256     collateral;\n        // The number of TMV withdrawn\n        uint256     tmvReleased;\n    }\n\n    /// @dev The Created event is fired whenever a new Box comes into existence. This includes\n    ///  any time a Box is created through the create method.\n    event Created(uint256 indexed id, address owner, uint256 collateral, uint256 tmvReleased);\n\n    /// @dev The Closed event is fired whenever a Box is closed. Obviously, this includes\n    ///  any time a Box is closed through the close method, but it is also called when\n    //   a Box is closed through the closeDust method.\n    event Closed(uint256 indexed id, address indexed owner, address indexed closer);\n\n    /// @dev The Capitalized event is fired whenever a Box is capitalized.\n    event Capitalized(uint256 indexed id, address indexed owner, address indexed who, uint256 tmvAmount, uint256 totalEth, uint256 userEth);\n\n    /// @dev The EthWithdrawn event is fired whenever Ether is withdrawn from a Box\n    ///  using withdrawEth method.\n    event EthWithdrawn(uint256 indexed id, uint256 value, address who);\n\n    /// @dev The TmvWithdrawn event is fired whenever TMV is withdrawn from a Box\n    ///  using withdrawTmv method.\n    event TmvWithdrawn(uint256 indexed id, uint256 value, address who);\n\n    /// @dev The EthAdded event is fired whenever Ether is added to a Box\n    ///  using addEth method.\n    event EthAdded(uint256 indexed id, uint256 value, address who);\n\n    /// @dev The TmvAdded event is fired whenever TMV is added to a Box\n    ///  using addTmv method.\n    event TmvAdded(uint256 indexed id, uint256 value, address who);\n\n    /// @dev Defends against front-running attacks.\n    modifier validTx() {\n        require(tx.gasprice \u003c= settings.gasPriceLimit(), \"Gas price is greater than allowed\");\n        _;\n    }\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyAdmin() {\n        require(settings.isFeeManager(msg.sender), \"You have no access\");\n        _;\n    }\n\n    /// @dev Throws if Box with specified id does not exist.\n    modifier onlyExists(uint256 _id) {\n        require(_exists(_id), \"Box does not exist\");\n        _;\n    }\n\n    /// @dev Access modifier for token owner-only functionality.\n    modifier onlyApprovedOrOwner(uint256 _id) {\n        require(_isApprovedOrOwner(msg.sender, _id), \"Box isn\u0027t your\");\n        _;\n    }\n\n    /// @dev The constructor sets ERC721 token name and symbol.\n    /// @param _settings The address of the system settings contract.\n    constructor(address _settings) TBoxToken(\"TBoxToken\", \"TBX\") public {\n        settings = ISettings(_settings);\n    }\n\n    /// @notice The funds are safe.\n    /// @dev Creates Box with max collateral percent.\n    function() external payable {\n        // Redirect to the create method with no tokens to withdraw\n        create(0);\n    }\n\n    /// @dev Withdraws system fee.\n    function withdrawFee(address _beneficiary) external onlyAdmin {\n        require(_beneficiary != address(0), \"Zero address, be careful\");\n\n        // Fee is the difference between the contract balance and\n        // amount of Ether used in the entire system collateralization\n        uint256 _fees = address(this).balance.sub(globalETH);\n\n        // Check that the fee is collected\n        require(_fees \u003e 0, \"There is no available fees\");\n\n        // Transfer fee to provided address\n        _beneficiary.transfer(_fees);\n    }\n\n    /// @dev Checks possibility of the issue of the specified token amount\n    ///  for provided Ether collateral and creates new Box\n    /// @param _tokensToWithdraw Number of tokens to withdraw\n    /// @return New Box ID.\n    function create(uint256 _tokensToWithdraw) public payable validTx returns (uint256) {\n        // Check that msg.value isn\u0027t smaller than minimum deposit\n        require(msg.value \u003e= settings.minDeposit(), \"Deposit is very small\");\n\n        // Calculate collateralization when tokens are needed\n        if (_tokensToWithdraw \u003e 0) {\n\n            // The number of tokens when collateralization is high\n            uint256 _tokenLimit = overCapWithdrawableTmv(msg.value);\n\n            // The number of tokens that can be safely withdrawn from the system\n            uint256 _maxGlobal = globalWithdrawableTmv(msg.value);\n\n            // Determine the higher number of tokens\n            if (_tokenLimit \u003e _maxGlobal) {\n                _tokenLimit = _maxGlobal;\n            }\n\n            // The number of tokens that can be withdrawn anyway\n            uint256 _local = defaultWithdrawableTmv(msg.value);\n\n            // Determine the higher number of tokens\n            if (_tokenLimit \u003c _local) {\n                _tokenLimit = _local;\n            }\n\n            // You can only withdraw available amount\n            require(_tokensToWithdraw \u003c= _tokenLimit, \"Token amount is more than available\");\n\n            // Mint TMV tokens to the Box creator\n            IToken(settings.tmvAddress()).mint(msg.sender, _tokensToWithdraw);\n        }\n\n        // The id of the new Box\n        uint256 _id = boxes.push(Box(msg.value, _tokensToWithdraw)).sub(1);\n\n        // Increase global Ether counter\n        globalETH = globalETH.add(msg.value);\n\n        // Mint TBX token to the Box creator\n        _mint(msg.sender, _id);\n\n        // Fire the event\n        emit Created(_id, msg.sender, msg.value, _tokensToWithdraw);\n\n        // return the new Box\u0027s ID\n        return _id;\n    }\n\n    /// @dev Allows the owner or approved user of the Box to close one by burning the\n    ///  required number of tokens and return the Box\u0027s collateral.\n    /// @param _id A Box ID to close.\n    function close(uint256 _id) external onlyApprovedOrOwner(_id) {\n\n        // Address of the owner of the Box\n        address _owner = _tokenOwner[_id];\n\n        // Burn needed number of tokens\n        uint256 _tokensNeed = boxes[_id].tmvReleased;\n        _burnTMV(msg.sender, _tokensNeed);\n\n        // Grab a reference to the Box\u0027s collateral in storage\n        uint256 _collateral = boxes[_id].collateral;\n\n        // burn Box token\n        _burn(_owner, _id);\n\n        // Removes Box\n        delete boxes[_id];\n\n        // Send the Box\u0027s collateral to the person who made closing happen\n        msg.sender.transfer(_collateral);\n\n        // Decrease global Ether counter\n        globalETH = globalETH.sub(_collateral);\n\n        // Fire the event\n        emit Closed(_id, _owner, msg.sender);\n    }\n\n    /// @notice This allows you not to be tied to the current ETH/USD rate.\n    /// @dev Allows the user to capitalize a Box with the maximum current amount.\n    /// @param _id A Box ID to capitalize.\n    function capitalizeMax(uint256 _id) external {\n        capitalize(_id, maxCapAmount(_id));\n    }\n\n    /// @dev Allows the user to capitalize a Box with specified number of tokens.\n    /// @param _id A Box ID to capitalize.\n    /// @param _tmv Specified number of tokens to capitalize.\n    function capitalize(uint256 _id, uint256 _tmv) public validTx {\n\n        // The maximum number of tokens for which Box can be capitalized\n        uint256 _maxCapAmount = maxCapAmount(_id);\n\n        // Check the number of tokens\n        require(_tmv \u003c= _maxCapAmount \u0026\u0026 _tmv \u003e= 10 ** 17, \"Tokens amount out of range\");\n\n        // Decrease Box TMV withdrawn counter\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_tmv);\n\n        // Calculate the Ether equivalent of tokens according to the logic\n        // where 1 TMV is equal to 1 USD\n        uint256 _equivalentETH = _tmv.mul(precision).div(rate());\n\n        // Calculate system fee\n        uint256 _fee = _tmv.mul(settings.sysFee()).div(rate());\n\n        // Calculate user bonus\n        uint256 _userReward = _tmv.mul(settings.userFee()).div(rate());\n\n        // Decrease Box\u0027s collateral amount\n        boxes[_id].collateral = boxes[_id].collateral.sub(_fee.add(_userReward).add(_equivalentETH));\n\n        // Decrease global Ether counter\n        globalETH = globalETH.sub(_fee.add(_userReward).add(_equivalentETH));\n\n        // burn Box token\n        _burnTMV(msg.sender, _tmv);\n\n        // Send the Ether equivalent \u0026 user benefit to the person who made capitalization happen.\n        msg.sender.transfer(_equivalentETH.add(_userReward));\n\n        // Fire the event\n        emit Capitalized(_id, ownerOf(_id), msg.sender, _tmv, _equivalentETH.add(_userReward).add(_fee), _equivalentETH.add(_userReward));\n    }\n\n    /// @notice This allows you not to be tied to the current ETH/USD rate.\n    /// @dev Allows an owner or approved user of the Box to withdraw maximum amount\n    ///  of Ether from the Box.\n    /// @param _id A Box ID.\n    function withdrawEthMax(uint256 _id) external {\n        withdrawEth(_id, withdrawableEth(_id));\n    }\n\n    /// @dev Allows an owner or approved user of the Box to withdraw specified amount\n    ///  of Ether from the Box.\n    /// @param _id A Box ID.\n    /// @param _amount The number of Ether to withdraw.\n    function withdrawEth(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n        require(_amount \u003e 0, \"Withdrawing zero\");\n\n        require(_amount \u003c= withdrawableEth(_id), \"You can\u0027t withdraw so much\");\n\n        // Decrease Box\u0027s collateral amount\n        boxes[_id].collateral = boxes[_id].collateral.sub(_amount);\n\n        // Decrease global Ether counter\n        globalETH = globalETH.sub(_amount);\n\n        // Send the Ether to the person who made capitalization happen\n        msg.sender.transfer(_amount);\n\n        // Fire the event\n        emit EthWithdrawn(_id, _amount, msg.sender);\n    }\n\n    /// @notice This allows you not to be tied to the current ETH/USD rate.\n    /// @dev Allows an owner or approved user of the Box to withdraw maximum number\n    ///  of TMV tokens from the Box.\n    /// @param _id A Box ID.\n    function withdrawTmvMax(uint256 _id) external onlyApprovedOrOwner(_id) {\n        withdrawTmv(_id, boxWithdrawableTmv(_id));\n    }\n\n    /// @dev Allows an owner or approved user of the Box to withdraw specified number\n    ///  of TMV tokens from the Box.\n    /// @param _id A Box ID.\n    /// @param _amount The number of tokens to withdraw.\n    function withdrawTmv(uint256 _id, uint256 _amount) public onlyApprovedOrOwner(_id) validTx {\n        require(_amount \u003e 0, \"Withdrawing zero\");\n\n        // Check the number of tokens\n        require(_amount \u003c= boxWithdrawableTmv(_id), \"You can\u0027t withdraw so much\");\n\n        // Increase Box TMV withdrawn counter\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.add(_amount);\n\n        // Mints tokens to the person who made withdrawing\n        IToken(settings.tmvAddress()).mint(msg.sender, _amount);\n\n        // Fire the event\n        emit TmvWithdrawn(_id, _amount, msg.sender);\n    }\n\n    /// @dev Allows anyone to add Ether to a Box.\n    /// @param _id A Box ID.\n    function addEth(uint256 _id) external payable onlyExists(_id) {\n        require(msg.value \u003e 0, \"Don\u0027t add 0\");\n\n        // Increase Box collateral\n        boxes[_id].collateral = boxes[_id].collateral.add(msg.value);\n\n        // Increase global Ether counter\n        globalETH = globalETH.add(msg.value);\n\n        // Fire the event\n        emit EthAdded(_id, msg.value, msg.sender);\n    }\n\n    /// @dev Allows anyone to add TMV to a Box.\n    /// @param _id A Box ID.\n    /// @param _amount The number of tokens to add.\n    function addTmv(uint256 _id, uint256 _amount) external onlyExists(_id) {\n        require(_amount \u003e 0, \"Don\u0027t add 0\");\n\n        // Check the number of tokens\n        require(_amount \u003c= boxes[_id].tmvReleased, \"Too much tokens\");\n\n        // Removes added tokens from the collateralization\n        _burnTMV(msg.sender, _amount);\n        boxes[_id].tmvReleased = boxes[_id].tmvReleased.sub(_amount);\n\n        // Fire the event\n        emit TmvAdded(_id, _amount, msg.sender);\n    }\n\n    /// @dev Allows anyone to close Box with collateral amount smaller than 3 USD.\n    ///  The person who made closing happen will benefit like capitalization.\n    /// @param _id A Box ID.\n    function closeDust(uint256 _id) external onlyExists(_id) validTx {\n        // Check collateral percent of the Box\n        require(collateralPercent(_id) \u003e= settings.minStability(), \"This Box isn\u0027t collapsable\");\n\n        // Check collateral amount of the Box\n        require(boxes[_id].collateral.mul(rate()) \u003c precision.mul(3).mul(10 ** 18), \"It\u0027s only possible to collapse dust\");\n\n        // Burn needed TMV amount to close\n        uint256 _tmvReleased = boxes[_id].tmvReleased;\n        _burnTMV(msg.sender, _tmvReleased);\n\n        uint256 _collateral = boxes[_id].collateral;\n\n        // Calculate the Ether equivalent of tokens according to the logic\n        // where 1 TMV is equal to 1 USD\n        uint256 _eth = _tmvReleased.mul(precision).div(rate());\n\n        // Calculate user bonus\n        uint256 _userReward = _tmvReleased.mul(settings.userFee()).div(rate());\n\n        // The owner of the Box\n        address _owner = ownerOf(_id);\n\n        // Remove a Box\n        delete boxes[_id];\n\n        // Burn Box token\n        _burn(_owner, _id);\n\n        // Send the Ether equivalent \u0026 user benefit to the person who made closing happen\n        msg.sender.transfer(_eth.add(_userReward));\n\n        // Decrease global Ether counter\n        globalETH = globalETH.sub(_collateral);\n\n        // Fire the event\n        emit Closed(_id, _owner, msg.sender);\n    }\n\n    /// @dev Burns specified number of TMV tokens.\n    function _burnTMV(address _from, uint256 _amount) internal {\n        if (_amount \u003e 0) {\n            require(IToken(settings.tmvAddress()).balanceOf(_from) \u003e= _amount, \"You don\u0027t have enough tokens\");\n            IToken(settings.tmvAddress()).burnLogic(_from, _amount);\n        }\n    }\n\n    /// @dev Returns current oracle ETH/USD price with precision.\n    function rate() public view returns(uint256) {\n        return IOracle(settings.oracleAddress()).ethUsdPrice();\n    }\n\n    /// @dev Given a Box ID, returns a number of tokens that can be withdrawn.\n    function boxWithdrawableTmv(uint256 _id) public view onlyExists(_id) returns(uint256) {\n        Box memory box = boxes[_id];\n\n        // Number of tokens that can be withdrawn for Box\u0027s collateral\n        uint256 _amount = withdrawableTmv(box.collateral);\n\n        if (box.tmvReleased \u003e= _amount) {\n            return 0;\n        }\n\n        // Return withdrawable rest\n        return _amount.sub(box.tmvReleased);\n    }\n\n    /// @dev Given a Box ID, returns an amount of Ether that can be withdrawn.\n    function withdrawableEth(uint256 _id) public view onlyExists(_id) returns(uint256) {\n\n        // Amount of Ether that is not used in collateralization\n        uint256 _avlbl = _freeEth(_id);\n        // Return available Ether to withdraw\n        if (_avlbl == 0) {\n            return 0;\n        }\n        uint256 _rest = boxes[_id].collateral.sub(_avlbl);\n        if (_rest \u003c settings.minDeposit()) {\n            return boxes[_id].collateral.sub(settings.minDeposit());\n        }\n        else return _avlbl;\n    }\n\n    /// @dev Given a Box ID, returns amount of ETH that is not used in collateralization.\n    function _freeEth(uint256 _id) internal view returns(uint256) {\n        // Grab a reference to the Box\n        Box memory box = boxes[_id];\n\n        // When there are no tokens withdrawn\n        if (box.tmvReleased == 0) {\n            return box.collateral;\n        }\n\n        // The amount of Ether that can be safely withdrawn from the system\n        uint256 _maxGlobal = globalWithdrawableEth();\n        uint256 _globalAvailable;\n\n        if (_maxGlobal \u003e 0) {\n            // The amount of Ether backing the tokens when the system is overcapitalized\n            uint256 _need = overCapFrozenEth(box.tmvReleased);\n            if (box.collateral \u003e _need) {\n                // Free Ether amount when the system is overcapitalized\n                uint256 _free = box.collateral.sub(_need);\n                if (_free \u003e _maxGlobal) {\n                    // Store available amount when Box available Ether amount\n                    // is more than global available\n                    _globalAvailable = _maxGlobal;\n                }\n\n                // Return available amount of Ether to withdraw when the Box withdrawable\n                // amount of Ether is smaller than global withdrawable amount of Ether\n                else return _free;\n            }\n        }\n\n        // The amount of Ether backing the tokens by default\n        uint256 _frozen = defaultFrozenEth(box.tmvReleased);\n        if (box.collateral \u003e _frozen) {\n            // Define the biggest number and return available Ether amount\n            uint256 _localAvailable = box.collateral.sub(_frozen);\n            return (_localAvailable \u003e _globalAvailable) ? _localAvailable : _globalAvailable;\n        } else {\n            // Return available Ether amount\n            return _globalAvailable;\n        }\n\n    }\n\n    /// @dev Given a Box ID, returns collateral percent.\n    function collateralPercent(uint256 _id) public view onlyExists(_id) returns(uint256) {\n        Box memory box = boxes[_id];\n        if (box.tmvReleased == 0) {\n            return 10**27; //some unreachable number\n        }\n        uint256 _ethCollateral = box.collateral;\n        // division by 100 is not necessary because to get the percent you need to multiply by 100\n        return _ethCollateral.mul(rate()).div(box.tmvReleased);\n    }\n\n    /// @dev Checks if a given address currently has approval for a particular Box.\n    /// @param _spender the address we are confirming Box is approved for.\n    /// @param _tokenId Box ID.\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\n        return _isApprovedOrOwner(_spender, _tokenId);\n    }\n\n    /// @dev Returns the global collateralization percent.\n    function globalCollateralization() public view returns (uint256) {\n        uint256 _supply = IToken(settings.tmvAddress()).totalSupply();\n        if (_supply == 0) {\n            return settings.globalTargetCollateralization();\n        }\n        return globalETH.mul(rate()).div(_supply);\n    }\n\n    /// @dev Returns the number of tokens that can be safely withdrawn from the system.\n    function globalWithdrawableTmv(uint256 _value) public view returns (uint256) {\n        uint256 _supply = IToken(settings.tmvAddress()).totalSupply();\n        if (globalCollateralization() \u003c= settings.globalTargetCollateralization()) {\n            return 0;\n        }\n        uint256 _totalBackedTmv = defaultWithdrawableTmv(globalETH.add(_value));\n        return _totalBackedTmv.sub(_supply);\n    }\n\n    /// @dev Returns Ether amount that can be safely withdrawn from the system.\n    function globalWithdrawableEth() public view returns (uint256) {\n        uint256 _supply = IToken(settings.tmvAddress()).totalSupply();\n        if (globalCollateralization() \u003c= settings.globalTargetCollateralization()) {\n            return 0;\n        }\n        uint256 _need = defaultFrozenEth(_supply);\n        return globalETH.sub(_need);\n    }\n\n    /// @dev Returns the number of tokens that can be withdrawn\n    ///  for the specified collateral amount by default.\n    function defaultWithdrawableTmv(uint256 _collateral) public view returns (uint256) {\n        uint256 _num = _collateral.mul(rate());\n        uint256 _div = settings.globalTargetCollateralization();\n        return _num.div(_div);\n    }\n\n    /// @dev Returns the number of tokens that can be withdrawn\n    ///  for the specified collateral amount when the system is overcapitalized.\n    function overCapWithdrawableTmv(uint256 _collateral) public view returns (uint256) {\n        uint256 _num = _collateral.mul(rate());\n        uint256 _div = settings.ratio();\n        return _num.div(_div);\n    }\n\n    /// @dev Returns Ether amount backing the specified number of tokens by default.\n    function defaultFrozenEth(uint256 _supply) public view returns (uint256) {\n        return _supply.mul(settings.globalTargetCollateralization()).div(rate());\n    }\n\n\n    /// @dev Returns Ether amount backing the specified number of tokens\n    ///  when the system is overcapitalized.\n    function overCapFrozenEth(uint256 _supply) public view returns (uint256) {\n        return _supply.mul(settings.ratio()).div(rate());\n    }\n\n\n    /// @dev Returns the number of TMV that can capitalize the specified Box.\n    function maxCapAmount(uint256 _id) public view onlyExists(_id) returns (uint256) {\n        uint256 _colP = collateralPercent(_id);\n        require(_colP \u003e= settings.minStability() \u0026\u0026 _colP \u003c settings.maxStability(), \"It\u0027s only possible to capitalize toxic Boxes\");\n\n        Box memory box = boxes[_id];\n\n        uint256 _num = box.tmvReleased.mul(settings.ratio()).sub(box.collateral.mul(rate()));\n        uint256 _div = settings.ratio().sub(settings.minStability());\n        return _num.div(_div);\n    }\n\n    /// @dev Returns the number of tokens that can be actually withdrawn\n    ///  for the specified collateral.\n    function withdrawableTmv(uint256 _collateral) public view returns(uint256) {\n        uint256 _amount = overCapWithdrawableTmv(_collateral);\n        uint256 _maxGlobal = globalWithdrawableTmv(0);\n        if (_amount \u003e _maxGlobal) {\n            _amount = _maxGlobal;\n        }\n        uint256 _local = defaultWithdrawableTmv(_collateral);\n        if (_amount \u003c _local) {\n            _amount = _local;\n        }\n        return _amount;\n    }\n\n    /// @dev Returns the collateral percentage for which tokens can be withdrawn\n    ///  for the specified collateral.\n    function withdrawPercent(uint256 _collateral) external view returns(uint256) {\n        uint256 _amount = overCapWithdrawableTmv(_collateral);\n        uint256 _maxGlobal = globalWithdrawableTmv(_collateral);\n        if (_amount \u003e _maxGlobal) {\n            _amount = _maxGlobal;\n        }\n        uint256 _local = defaultWithdrawableTmv(_collateral);\n        if (_amount \u003c _local) {\n            _amount = _local;\n        }\n        return _collateral.mul(rate()).div(_amount);\n    }\n}\n"},"TBoxToken.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./ERC721.sol\";\nimport \"./ERC721Enumerable.sol\";\nimport \"./ERC721Metadata.sol\";\n\n\n/**\n * @title TBoxClassic Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract TBoxToken is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) ERC721Metadata(name, symbol) public {}\n}\n"}}