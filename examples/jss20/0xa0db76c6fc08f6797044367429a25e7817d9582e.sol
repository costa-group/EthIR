{"Lot.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./LotInterface.sol\";\n\nimport \"./OrganizationInterface.sol\";\nimport \"./PermissionsEnum.sol\";\n\n/**\n * @title Lot\n * @dev Lot contract to create new lot and change the states and change the ownership\n */\ncontract Lot is PermissionsEnum, LotInterface {\n    address public factory;\n\n    address public organization;\n    address public parentLot;\n    address public nextPermitted;\n\n    string public infoFileHash;\n    string public name;\n\n    uint32 public totalSupply;\n    uint32 public transferredSupply;\n\n    mapping(address =\u003e uint32) public supplyDistributionInfo;\n\n    enum LotState {\n        NEW,\n        INITIAL,\n        GROW,\n        HARVEST,\n        EXTRACTING,\n        EXTRACTED,\n        TESTING,\n        TESTED,\n        PRODUCT,\n        COMPLETE\n    }\n\n    LotState public state;\n\n    event LotTotalSupplyConfigured (\n        address organization,\n        address lot,\n        uint32 totalSupply\n    );\n\n    event LotNextPermittedChanged (\n        address lot,\n        address permitted\n    );\n\n    event LotStateChanged (\n        address organization,\n        address lot,\n        uint previousState,\n        uint nextState,\n        string infoFileHash\n    );\n\n    event LotOwnershipTransferred (\n        address lot,\n        address currentOwner,\n        address newOwner\n    );\n\n    modifier hasPermission(Permissions perm) {\n        require(OrganizationInterface(organization).hasPermissions(msg.sender, uint256(perm)), \"Not Allowed\");\n        _;\n    }\n\n    constructor(\n        address _organization,\n        address _factory,\n        string memory _name,\n        uint32 _totalSupply,\n        address _parentLot,\n        address _permitted)\n    public {\n        organization = _organization;\n        factory = _factory;\n\n        name = _name;\n        totalSupply = _totalSupply;\n        parentLot = _parentLot;\n        initLot(0);\n\n        nextPermitted = _permitted;\n        if (_permitted != address(0)) {\n            emit LotNextPermittedChanged(address(this), _permitted);\n        }\n    }\n\n    function getOrganization() public view returns (address) {\n        return organization;\n    }\n\n    function _getSubmittingOrganization(Permissions perm) internal view returns (address) {\n        // check nextPermitted oranization\n        if (nextPermitted != address(0) \u0026\u0026 OrganizationInterface(nextPermitted).hasPermissions(msg.sender, uint256(perm))) return nextPermitted;\n\n        if (OrganizationInterface(organization).hasPermissions(msg.sender, uint256(perm))) return organization;\n\n        return address(0);\n    }\n\n    /**\n     * @dev Change the Lot State.\n     * @param _nextState The next state of the Lot.\n     * @param _infoFileHash The new infoFileHash of the Lot from IPFS .\n     */\n    function changeLotState(\n        uint _nextState,\n        string memory _infoFileHash\n    )\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint(state);\n        require(_nextState != previousState, \"Cannot submit the same state over\");\n        \n        state = LotState(_nextState);\n        infoFileHash = _infoFileHash;\n\n        // Always return back to null after lot has changed\n        nextPermitted = address(0);\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _nextState, _infoFileHash);\n    }\n\n    /**\n     * @dev Changes the Lot state to Next State\n     * @param _nextState The next Lot State.\n     * @param _infoFileHash The File Hash representing IPFS record.\n     * @param _permitted Next permitted user for the Lot.\n     */\n    function changeLotStateWithNextPermitted(\n        uint _nextState,\n        string memory _infoFileHash,\n        address _permitted\n    )\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint(state);\n        require(_nextState != previousState, \"Cannot submit the same state over\");\n\n        state = LotState(_nextState);\n        infoFileHash = _infoFileHash;\n\n        nextPermitted = _permitted;\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _nextState, _infoFileHash);\n        emit LotNextPermittedChanged(address(this), _permitted);\n    }\n\n    /**\n     * @dev Sets the lot sate\n     * @param _lotState The state of the lot.\n     */\n    function setLotState(uint _lotState)\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        uint previousState = uint256(state);\n\n        state = LotState(_lotState);\n\n        emit LotStateChanged(submittingOrganization, address(this), previousState, _lotState, infoFileHash);\n    }\n\n    /**\n     * @dev Allows to set infoHas to current Lot IPFS.\n     * @param _infoFileHash The File Hash representing IPFS record.\n     */\n    function setInfoFileHash(string memory _infoFileHash)\n    public\n    {\n        address submittingOrganization = _getSubmittingOrganization(Permissions.UPDATE_LOT);\n        require(submittingOrganization != address(0), \"Not Allowed\");\n\n        infoFileHash = _infoFileHash;\n    }\n\n    /**\n     * @dev Allows to set totalSupply to current Lot.\n     * @param _totalSupply The total supply of the current lot.\n     */\n    function setTotalSupply(uint32 _totalSupply)\n    public\n    hasPermission(Permissions.UPDATE_LOT)\n    {\n        require(totalSupply == 0, \"Total supply already set\");\n\n        totalSupply = _totalSupply;\n\n        emit LotTotalSupplyConfigured(organization, address(this), _totalSupply);\n    }\n\n    /**\n     * @dev Sets the next permitted address to do a state change on Lot\n     * @param _permitted the address to be added\n     */\n    function setNextPermitted(address _permitted)\n    public\n    hasPermission(Permissions.UPDATE_LOT)\n    {\n        nextPermitted = _permitted;\n        emit LotNextPermittedChanged(address(this), _permitted);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner)\n    public\n    hasPermission(Permissions.TRANSFER_LOT_OWNERSHIP)\n    returns (bool)\n    {\n        address currentOwner = organization;\n        organization = _newOwner;\n\n        emit LotOwnershipTransferred(address(this), currentOwner, _newOwner);\n        return true;\n    }\n\n    /**\n     * @dev Retieve the File Hash.\n     */\n    function retrieveFileHash()\n    public\n    view\n    returns (string memory)\n    {\n        return infoFileHash;\n    }\n\n    /**\n     * @dev Retieve Lot state.\n     */\n    function retrieveState()\n    public\n    view\n    returns (uint)\n    {\n        return uint(state);\n    }\n\n    /**\n     * @dev Retieve Total Supply.\n     */\n    function retrieveTotalSupply()\n    public\n    view\n    returns (uint32)\n    {\n        return totalSupply;\n    }\n\n    /**\n     * @dev Retieve Total Supply.\n     */\n    function retrieveTransferredSupply()\n    public\n    view\n    returns (uint32)\n    {\n        return transferredSupply;\n    }\n\n    /**\n     * @dev Retieve Sub Lot Supply.\n     * @param _lotAddress The address to Sub Lot.\n     */\n    function retrieveSubLotSupply(address _lotAddress)\n    public\n    view\n    returns (uint32)\n    {\n        return supplyDistributionInfo[_lotAddress];\n    }\n\n    /**\n     * @dev Creates a new Lot.\n     * @param _lotState The current state of the Lot.\n     */\n    function initLot(\n        uint _lotState\n    )\n    private\n    {\n        state = LotState(_lotState);\n    }\n\n    /**\n     * @dev Allocates supply for a given lot address\n     * @param _quantity The total supply transferred\n     */\n    function allocateSupply(address _lotAddress, uint32 _quantity)\n    public\n    hasPermission(Permissions.ALLOCATE_SUPPLY)\n    {\n        require((transferredSupply + _quantity) \u003c= totalSupply, \"Cannot allocate supply, exceeds total supply\");\n        supplyDistributionInfo[_lotAddress] = _quantity;\n        transferredSupply += _quantity;\n    }\n}\n"},"LotFactory.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./LotFactoryInterface.sol\";\nimport \"./LotInterface.sol\";\nimport \"./OrganizationInterface.sol\";\nimport \"./PermissionsEnum.sol\";\n\nimport \"./Lot.sol\";\n\ncontract LotFactory is PermissionsEnum, LotFactoryInterface {\n    event LotCreated (\n        address organization,\n        address lot,\n        string name\n    );\n\n    event SubLotCreated (\n        address organization,\n        address lot,\n        address parentLot,\n        string name,\n        uint32 totalSupply\n    );\n\n    function createLot(\n        address _organization,\n        string memory _name)\n    public \n    returns (address) \n    {\n        require(OrganizationInterface(_organization).hasPermissions(msg.sender, uint256(Permissions.CREATE_LOT)), \"Not Allowed\");\n\n        address lot = _createLot(_organization, _name, 0, address(0), address(0));\n\n        emit LotCreated(_organization, lot, _name);\n        return lot;\n    }\n\n    function createSubLot(\n        address _organization,\n        address _parentLot,\n        string memory _name,\n        uint32 _totalSupply,\n        address _nextPermitted)\n    public\n    returns (address)\n    {\n        require(OrganizationInterface(_organization).hasPermissions(msg.sender, uint256(Permissions.CREATE_SUB_LOT)), \"Not Allowed\");\n        require(LotInterface(_parentLot).getOrganization() == _organization, \"Lot does not belong to the organization\");\n        require(_totalSupply \u003e 0, \"Total supply must be greater than 0\");\n\n        address lot = _createLot(_organization, _name, _totalSupply, _parentLot, _nextPermitted);\n        LotInterface(_parentLot).allocateSupply(lot, _totalSupply);\n\n        emit SubLotCreated(_organization, lot, _parentLot, _name, _totalSupply);\n        return lot;\n    }\n\n    function _createLot(\n        address _organization,\n        string memory _name,\n        uint32 _totalSupply,\n        address _parentLot,\n        address _nextPermitted\n    ) internal returns (address) {\n        return address (new Lot(_organization, address(this), _name, _totalSupply, _parentLot, _nextPermitted));\n    }\n}\n"},"LotFactoryInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract LotFactoryInterface {\n    function createLot(\n        address _organization,\n        string memory _name)\n    public\n    returns(\n        address);\n\n    /*\n     * @dev Create Sub Lot for existing Lot.\n     */\n    function createSubLot(\n        address _organization,\n        address _parentLot,\n        string memory _name,\n        uint32 _totalSupply,\n        address _nextPermitted)\n    public\n    returns (\n        address);\n}\n"},"LotInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract LotInterface {\n    function getOrganization() public view returns (address);\n    function allocateSupply(address _lotAddress, uint32 _quantity) public;\n}\n"},"OrganizationInterface.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract OrganizationInterface {\n    function hasPermissions(address permittee, uint256 permission) public view returns (bool);\n}\n"},"PermissionsEnum.sol":{"content":"pragma solidity ^0.5.0;\n\ncontract PermissionsEnum {\n    enum Permissions {\n        CREATE_LOT,\n        CREATE_SUB_LOT,\n        UPDATE_LOT,\n        TRANSFER_LOT_OWNERSHIP,\n        ALLOCATE_SUPPLY\n    }\n}\n"}}