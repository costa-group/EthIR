{"AlumniStore.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\ncontract AlumniStore {\n    function getAlumniAddress(bytes32 _blockchainCertificateHash) public view returns (address payable _address){}\n}"},"OpenCertsStore.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\ncontract OpenCertsStore {\n    function isIssued(bytes32 document) public view returns (bool){}\n}"},"ScholarshipContract.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\nimport \"./AlumniStore.sol\";\nimport \"./OpenCertsStore.sol\";\nimport \"./TokenContract.sol\";\n\ncontract ScholarshipContract {\n    OpenCertsStore openCertsStore;\n    AlumniStore alumniStore;\n    TokenContract tokenContract;\n\n    address payable owner;\n\n    constructor(address _openCertsStoreAddress, address _alumniStoreAddress, address _tokenContractAddress) public {\n        owner = msg.sender;\n        openCertsStore = OpenCertsStore(_openCertsStoreAddress);\n        alumniStore = AlumniStore(_alumniStoreAddress);\n        tokenContract = TokenContract(_tokenContractAddress);\n    }\n\n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only owner can call this function.\"\n        );\n        _;\n    }\n\n    function() external payable {}\n\n    function changeOwner(address payable _newOwnerAddress) public onlyOwner returns (bool) {\n        owner = _newOwnerAddress;\n        return true;\n    }\n\n    function isCertificateIssued(bytes32 _blockchainCertificateHash) private view returns (address payable _address) {\n        if (openCertsStore.isIssued(_blockchainCertificateHash)) {\n            return alumniStore.getAlumniAddress(_blockchainCertificateHash);\n        } else {\n            return 0x0000000000000000000000000000000000000000;\n        }\n    }\n\n    function unlockScholarship(bytes32 _blockchainCertificateHash) public returns (bool){\n        address payable studentAddress = isCertificateIssued(_blockchainCertificateHash);\n        if (studentAddress != address(0x0)) {\n            tokenContract.transfer(studentAddress,tokenContract.balanceOf(address(this)));\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function refund() public onlyOwner returns (bool) {\n        tokenContract.transfer(owner,tokenContract.balanceOf(address(this)));\n        return true;\n    }\n\n    function selfDestruct() public onlyOwner {\n        selfdestruct(owner);\n    }\n}"},"TokenContract.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\ncontract TokenContract {\n    function balanceOf(address ownerAddress) public view returns (uint);\n    function transfer(address to, uint tokens) public returns (bool success);\n}"}}