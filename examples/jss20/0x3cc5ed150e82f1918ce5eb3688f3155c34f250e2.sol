{"A360_coin.sol":{"content":"/*\r\n * Copyright 2019 Authpaper Team\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npragma solidity \u003e=0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"SafeMath.sol\";\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Adminstrator {\r\n  mapping (address =\u003e bool) public admin;\r\n  address payable public owner;\r\n  modifier onlyAdmin() { \r\n        require(admin[msg.sender] == true || msg.sender == owner,\"Not authorized\"); \r\n        _;\r\n  } \r\n  modifier onlyOwner(){\r\n      require(msg.sender == owner,\"Not authorized\"); \r\n        _;\r\n  }\r\n  constructor() public {\r\n    admin[msg.sender]=true;\r\n\towner = msg.sender;\r\n  }\r\n  function addAdmin(address newAdmin) public onlyOwner {\r\n    admin[newAdmin]=true;\r\n  }\r\n  function removeAdmin(address newAdmin) public onlyOwner {\r\n    admin[newAdmin]=false;\r\n  }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, Adminstrator {\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    \r\n    // Public variables of the token\r\n    string public name = \"A360_Coin_TestB\";\r\n    string public symbol = \"A360\";\r\n    uint8 public decimals = 18;\r\n    uint256 private _totalSupply = 5 * 10 ** (uint256(decimals)+9);\r\n    mapping (address =\u003e mapping (bytes =\u003e uint256)) private _loanFromAdmin;\r\n    mapping (bytes =\u003e uint256) private _phoneBalances;\r\n    event IssueLoan(address indexed _creditor, bytes indexed _debtor, uint256 amount);\r\n    event ReduceLoan(address indexed _creditor, bytes indexed _debtor, uint256 amount);\r\n\t\r\n    event Transfer(bytes indexed _personalAddr, address indexed _paymentAddr, uint256 amount);\r\n    event Transfer(address indexed _paymentAddr, bytes indexed _personalAddr2, uint256 amount);\r\n\tevent Transfer(bytes indexed _personalAddr, bytes indexed _personalAddr2, uint256 amount);\r\n\r\n    fallback () external payable  { \r\n        revert();   \r\n    }\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n    constructor() public {\r\n        _balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\tfunction balanceOfHashedAddress(bytes memory hashedPhoneNumber) public view returns (uint256) {\r\n        return _phoneBalances[hashedPhoneNumber];\r\n    }\r\n    function balanceOfPerson(string memory phoneNumber) public view returns (uint256){\r\n        return _phoneBalances[getShaAddress(phoneNumber)];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(amount == 0 || _allowances[_msgSender()][spender] == 0, \r\n\t\t\t\"ERC20: Reset allowance to zero before setting a new value\");\r\n\t\t_approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n    function getShaAddress(string memory identifier) public pure returns(bytes memory){\r\n        uint256 strLength = bytes(identifier).length;\r\n\t\trequire(strLength \u003e=4,\"Input ID too short\");\r\n\t\treturn _strTrim(sha256(bytes(identifier)),20);\r\n\t}\r\n\tfunction _strTrim(bytes32  _a, uint256 _l) internal pure returns(bytes memory){\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j \u003c 32; j++) {\r\n            byte char = byte(bytes32(uint(_a) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(_l);\r\n        for (uint j = 0; j \u003c _l; j++) {\r\n            bytesStringTrimmed[j] = (j\u003ccharCount)? bytesString[j] : byte(0);\r\n        }\r\n        //return string(bytesStringTrimmed);\r\n        return bytesStringTrimmed;\r\n    }\r\n    \r\n\tfunction batchPersonToPersonTransfer(bytes[] memory fromAddr,bytes[] memory toAddr,uint256[] memory amount) \r\n\t\tpublic onlyAdmin returns (bool){\r\n\t\tfor (uint i = 0; i \u003c fromAddr.length; i++){\r\n\t\t\tif(!personToPersonTransfer(fromAddr[i],toAddr[i],amount[i])) return false;\r\n\t\t} \r\n\t\treturn true;\r\n\t}\r\n\tfunction personToPersonTransfer(bytes memory fromAddr,bytes memory toAddr,uint256 amount) \r\n\t\tpublic onlyAdmin returns (bool){\r\n\t\trequire( fromAddr.length \u003e10 || toAddr.length \u003e10, \"Invalid address\");\r\n\t\tif(fromAddr.length \u003c=10){\r\n\t\t\t//Admin is paying to someone\r\n\t\t\trequire(_balances[_msgSender()] \u003e=amount,\"ERC20: admin does not have enough balance\");\r\n\t\t\t_balances[_msgSender()] = _balances[_msgSender()]\r\n\t\t\t\t.sub(amount,\"ERC20: admin does not have enough token to send to others\");\r\n\t\t\t_phoneBalances[toAddr] = _phoneBalances[toAddr].add(amount);\r\n\t\t\temit Transfer(_msgSender(), toAddr, amount);\r\n\t\t\treturn true;\r\n\t\t} \r\n\t\tif(toAddr.length \u003c=10){\r\n\t\t\t//Someone is sending to admin\r\n\t\t\trequire(_phoneBalances[fromAddr] \u003e=amount,\"ERC20: token sender does not have enough balance\");\r\n\t\t\t_phoneBalances[fromAddr] = _phoneBalances[fromAddr]\r\n\t\t\t\t.sub(amount,\"ERC20: token sender does not have enough token to send to others\");\r\n\t\t\t_balances[_msgSender()] = _balances[_msgSender()].add(amount);\r\n\t\t\t//Treat it as repaying loan if fromAddr has a loan from admin\r\n\t\t\tif(_loanFromAdmin[_msgSender()][fromAddr] \u003e0) reduceLoan(fromAddr,amount);\r\n\t\t\temit Transfer(fromAddr, _msgSender(), amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t//Someone sends to someone\r\n\t\tif(_phoneBalances[fromAddr] \u003e=amount){\r\n\t\t\t_phoneBalances[fromAddr] = _phoneBalances[fromAddr]\r\n\t\t\t\t.sub(amount,\"ERC20: token sender does not have enough token to send to others\");\r\n\t\t}else{\r\n\t\t\t//The sender does not have enough token, so admin issue loan to the sender\r\n\t\t\tuint256 loanRequire = amount.sub(_phoneBalances[fromAddr],\"ERC20: fromAddr cannot get loan\");\r\n\t\t\t_phoneBalances[fromAddr] = 0;\r\n\t\t\tissueLoan(fromAddr,loanRequire);\r\n\t\t}\r\n\t\t_phoneBalances[toAddr] = _phoneBalances[toAddr].add(amount);\r\n\t\temit Transfer(fromAddr, toAddr, amount);\r\n\t\treturn true;\r\n\t}\r\n    function loanOf(address creditor, bytes memory debtor) public view returns (uint256) {\r\n        return _loanFromAdmin[creditor][debtor];\r\n    }\r\n    function issueLoan(bytes memory debtor, uint256 loanRequire) public returns (bool) {\r\n        require(msg.sender != address(0), \"ERC20: creditor has zero address\");\r\n        require( bytes(debtor).length \u003e0, \"Invalid address\");\r\n        require(_balances[_msgSender()] \u003e=loanRequire,\"ERC20: admin does not have enough token to loan\");\r\n        _balances[_msgSender()] = _balances[_msgSender()]\r\n\t\t\t\t.sub(loanRequire,\"ERC20: admin does not have enough token to send to others\");\t\r\n        _loanFromAdmin[_msgSender()][debtor] = _loanFromAdmin[_msgSender()][debtor]\r\n\t\t\t\t.add(loanRequire);\r\n\t\temit IssueLoan(_msgSender(),debtor,loanRequire);\r\n        return true;\r\n    }\r\n    function reduceLoan(bytes memory debtor, uint256 amount) public returns (bool) {\r\n        require(msg.sender != address(0), \"ERC20: creditor has zero address\");\r\n        require( bytes(debtor).length \u003e0, \"Invalid address\");\r\n\t\tuint256 loan = _loanFromAdmin[msg.sender][debtor];\r\n        require(loan \u003e0, \"No loan to pay\");\r\n        uint256 loanToPay = (loan\u003camount)? loan:amount;\r\n        //uint256 extraAmount = (loan\u003camount)? amount.sub(loan, \"ERC20: not enugh amount\"):0;\r\n        _loanFromAdmin[msg.sender][debtor] = _loanFromAdmin[msg.sender][debtor]\r\n            .sub(loanToPay, \"ERC20: pay loan too much\");\r\n        emit ReduceLoan(msg.sender,debtor,loanToPay);\r\n        return true;\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity \u003e=0.6.2;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}