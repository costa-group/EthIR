{"DoubleProxy.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"./IDoubleProxy.sol\";\r\n\r\ncontract DoubleProxy is IDoubleProxy {\r\n\r\n    address private _proxy;\r\n\r\n    mapping(address =\u003e bool) private _isProxy;\r\n\r\n    address[] private _proxies;\r\n\r\n    constructor(address[] memory proxies, address currentProxy) public {\r\n        init(proxies, currentProxy);\r\n    }\r\n\r\n    function init(address[] memory proxies, address currentProxy) public override {\r\n        require(_proxies.length == 0, \"Init already called!\");\r\n        for(uint256 i = 0; i \u003c proxies.length; i++) {\r\n            if(proxies[i] != address(0)) {\r\n                _proxies.push(proxies[i]);\r\n                _isProxy[proxies[i]] = true;\r\n            }\r\n        }\r\n        if(currentProxy != address(0)) {\r\n            _proxy = currentProxy;\r\n            if(!_isProxy[currentProxy]) {\r\n                _proxies.push(currentProxy);\r\n                _isProxy[currentProxy] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function proxy() public override view returns(address) {\r\n        return _proxy;\r\n    }\r\n\r\n    function setProxy() public override {\r\n        require(_proxy == address(0) || _proxy == msg.sender, _proxy != address(0) ? \"Proxy already set!\" : \"Only Proxy can toggle itself!\");\r\n        _proxy = _proxy == address(0) ?  msg.sender : address(0);\r\n        if(_proxy != address(0) \u0026\u0026 !_isProxy[_proxy]) {\r\n            _proxies.push(_proxy);\r\n            _isProxy[_proxy] = true;\r\n        }\r\n    }\r\n\r\n    function isProxy(address addr) public override view returns(bool) {\r\n        return _isProxy[addr];\r\n    }\r\n\r\n    function proxiesLength() public override view returns(uint256) {\r\n        return _proxies.length;\r\n    }\r\n\r\n    function proxies() public override view returns(address[] memory) {\r\n        return proxies(0, _proxies.length);\r\n    }\r\n\r\n    function proxies(uint256 start, uint256 offset) public override view returns(address[] memory out) {\r\n        require(start \u003c _proxies.length, \"Invalid start\");\r\n        uint256 length = offset \u003e _proxies.length ? _proxies.length : offset;\r\n        out = new address[](length);\r\n        length += start;\r\n        length = length \u003e _proxies.length ? _proxies.length : length;\r\n        uint256 pos = 0;\r\n        for(uint256 i = start; i \u003c length; i++) {\r\n            out[pos++] = _proxies[i];\r\n        }\r\n    }\r\n}"},"ICommonUtilities.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface ICommonUtilities {\r\n    function toString(address _addr) external pure returns(string memory);\r\n    function toString(uint _i) external pure returns(string memory);\r\n    function toUint256(bytes calldata bs) external pure returns(uint256 x);\r\n    function toAddress(bytes calldata b) external pure returns (address addr);\r\n    function compareStrings(string calldata a, string calldata b) external pure returns(bool);\r\n    function getFirstJSONPart(address sourceLocation, uint256 sourceLocationId, address location) external pure returns(bytes memory);\r\n    function formatReturnAbiParametersArray(string calldata m) external pure returns(string memory);\r\n    function toLowerCase(string calldata str) external pure returns(string memory);\r\n}"},"IDoubleProxy.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IDoubleProxy {\r\n    function init(address[] calldata proxies, address currentProxy) external;\r\n    function proxy() external view returns(address);\r\n    function setProxy() external;\r\n    function isProxy(address) external view returns(bool);\r\n    function proxiesLength() external view returns(uint256);\r\n    function proxies(uint256 start, uint256 offset) external view returns(address[] memory);\r\n    function proxies() external view returns(address[] memory);\r\n}"},"IERC20.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IERC721.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IERC721 {\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}"},"IERC721Receiver.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IERC721Receiver {\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}"},"IMVDFunctionalitiesManager.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IMVDFunctionalitiesManager {\n\n    function getProxy() external view returns (address);\n    function setProxy() external;\n\n    function init(address sourceLocation,\n        uint256 getMinimumBlockNumberSourceLocationId, address getMinimumBlockNumberFunctionalityAddress,\n        uint256 getEmergencyMinimumBlockNumberSourceLocationId, address getEmergencyMinimumBlockNumberFunctionalityAddress,\n        uint256 getEmergencySurveyStakingSourceLocationId, address getEmergencySurveyStakingFunctionalityAddress,\n        uint256 checkVoteResultSourceLocationId, address checkVoteResultFunctionalityAddress) external;\n\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender) external;\n    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, uint256 position) external;\n    function removeFunctionality(string calldata codeName) external returns(bool removed, uint256 position);\n    function isValidFunctionality(address functionality) external view returns(bool);\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n    function setCallingContext(address location) external returns(bool);\n    function clearCallingContext() external;\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\n    function hasFunctionality(string calldata codeName) external view returns(bool);\n    function getFunctionalitiesAmount() external view returns(uint256);\n    function functionalitiesToJSON() external view returns(string memory);\n    function functionalitiesToJSON(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\n    function functionalityNames() external view returns(string memory);\n    function functionalityNames(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\n    function functionalityToJSON(string calldata codeName) external view returns(string memory);\n\n    function preConditionCheck(string calldata codeName, bytes calldata data, uint8 submitable, address sender, uint256 value) external view returns(address location, bytes memory payload);\n\n    function setupFunctionality(address proposalAddress) external returns (bool);\n}"},"IMVDFunctionalityModelsManager.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IMVDFunctionalityModelsManager {\r\n    function init() external;\r\n    function checkWellKnownFunctionalities(string calldata codeName, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, string calldata replaces) external view;\r\n}"},"IMVDFunctionalityProposal.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IMVDFunctionalityProposal {\n\n    function init(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces, address proxy) external;\n    function setCollateralData(bool emergency, address sourceLocation, uint256 sourceLocationId, bool submitable, bool isInternal, bool needsSender, address proposer, uint256 votesHardCap) external;\n\n    function getProxy() external view returns(address);\n    function getCodeName() external view returns(string memory);\n    function isEmergency() external view returns(bool);\n    function getSourceLocation() external view returns(address);\n    function getSourceLocationId() external view returns(uint256);\n    function getLocation() external view returns(address);\n    function isSubmitable() external view returns(bool);\n    function getMethodSignature() external view returns(string memory);\n    function getReturnAbiParametersArray() external view returns(string memory);\n    function isInternal() external view returns(bool);\n    function needsSender() external view returns(bool);\n    function getReplaces() external view returns(string memory);\n    function getProposer() external view returns(address);\n    function getSurveyEndBlock() external view returns(uint256);\n    function getSurveyDuration() external view returns(uint256);\n    function isVotesHardCapReached() external view returns(bool);\n    function getVotesHardCapToReach() external view returns(uint256);\n    function toJSON() external view returns(string memory);\n    function getVote(address addr) external view returns(uint256 accept, uint256 refuse);\n    function getVotes() external view returns(uint256, uint256);\n    function start() external;\n    function disable() external;\n    function isDisabled() external view returns(bool);\n    function isTerminated() external view returns(bool);\n    function accept(uint256 amount) external;\n    function retireAccept(uint256 amount) external;\n    function moveToAccept(uint256 amount) external;\n    function refuse(uint256 amount) external;\n    function retireRefuse(uint256 amount) external;\n    function moveToRefuse(uint256 amount) external;\n    function retireAll() external;\n    function withdraw() external;\n    function terminate() external;\n    function set() external;\n\n    event Accept(address indexed voter, uint256 amount);\n    event RetireAccept(address indexed voter, uint256 amount);\n    event MoveToAccept(address indexed voter, uint256 amount);\n    event Refuse(address indexed voter, uint256 amount);\n    event RetireRefuse(address indexed voter, uint256 amount);\n    event MoveToRefuse(address indexed voter, uint256 amount);\n    event RetireAll(address indexed voter, uint256 amount);\n}"},"IMVDFunctionalityProposalManager.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IMVDFunctionalityProposalManager {\n    function newProposal(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces) external returns(address);\n    function checkProposal(address proposalAddress) external;\n    function getProxy() external view returns (address);\n    function setProxy() external;\n    function isValidProposal(address proposal) external view returns (bool);\n}"},"IMVDProxy.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IMVDProxy {\n\n    function init(address votingTokenAddress, address functionalityProposalManagerAddress, address stateHolderAddress, address functionalityModelsManagerAddress, address functionalitiesManagerAddress, address walletAddress, address doubleProxyAddress) external;\n\n    function getDelegates() external view returns(address[] memory);\n    function getToken() external view returns(address);\n    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\n    function getStateHolderAddress() external view returns(address);\n    function getMVDFunctionalityModelsManagerAddress() external view returns(address);\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n    function getMVDWalletAddress() external view returns(address);\n    function getDoubleProxyAddress() external view returns(address);\n    function setDelegate(uint256 position, address newAddress) external returns(address oldAddress);\n    function changeProxy(address newAddress, bytes calldata initPayload) external;\n    function isValidProposal(address proposal) external view returns (bool);\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n    function newProposal(string calldata codeName, bool emergency, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnParametersJSONArray, bool isInternal, bool needsSender, string calldata replaces) external returns(address proposalAddress);\n    function startProposal(address proposalAddress) external;\n    function disableProposal(address proposalAddress) external;\n    function transfer(address receiver, uint256 value, address token) external;\n    function transfer721(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\n    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\n    function setProposal() external;\n    function read(string calldata codeName, bytes calldata data) external view returns(bytes memory returnData);\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n    function callFromManager(address location, bytes calldata payload) external returns(bool, bytes memory);\n    function emitFromManager(string calldata codeName, address proposal, string calldata replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address location, bool submitable, string calldata methodSignature, bool isInternal, bool needsSender, address proposalAddress) external;\n\n    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\n\n    event ProxyChanged(address indexed newAddress);\n    event DelegateChanged(uint256 position, address indexed oldAddress, address indexed newAddress);\n\n    event Proposal(address proposal);\n    event ProposalCheck(address indexed proposal);\n    event ProposalSet(address indexed proposal, bool success);\n    event FunctionalitySet(string codeName, address indexed proposal, string replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address indexed replacedLocation, bool replacedWasSubmitable, string replacedMethodSignature, bool replacedWasInternal, bool replacedNeededSender, address indexed replacedProposal);\n\n    event Event(string indexed key, bytes32 indexed firstIndex, bytes32 indexed secondIndex, bytes data);\n}"},"IMVDWallet.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IMVDWallet {\n\n    function getProxy() external view returns (address);\n\n    function setProxy() external;\n\n    function setNewWallet(address payable newWallet, address tokenAddress) external;\n\n    function transfer(address receiver, uint256 value, address tokenAddress) external;\n    \n    function transfer(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\n\n    function flushToNewWallet(address token) external;\n\n    function flush721ToNewWallet(uint256 tokenId, bytes calldata data, bool safe, address tokenAddress) external;\n}"},"IStateHolder.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IStateHolder {\n\n    function init() external;\n\n    function getProxy() external view returns (address);\n    function setProxy() external;\n    function toJSON() external view returns(string memory);\n    function toJSON(uint256 start, uint256 l) external view returns(string memory);\n    function getStateSize() external view returns (uint256);\n    function exists(string calldata varName) external view returns(bool);\n    function getDataType(string calldata varName) external view returns(string memory dataType);\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n    function setBytes(string calldata varName, bytes calldata val) external returns(bytes memory);\n    function getBytes(string calldata varName) external view returns(bytes memory);\n    function setString(string calldata varName, string calldata val) external returns(string memory);\n    function getString(string calldata varName) external view returns (string memory);\n    function setBool(string calldata varName, bool val) external returns(bool);\n    function getBool(string calldata varName) external view returns (bool);\n    function getUint256(string calldata varName) external view returns (uint256);\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\n    function getAddress(string calldata varName) external view returns (address);\n    function setAddress(string calldata varName, address val) external returns (address);\n}"},"IVotingToken.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IVotingToken {\r\n    function init(string calldata name, string calldata symbol, uint256 decimals, uint256 totalSupply) external;\r\n\r\n    function getProxy() external view returns (address);\r\n    function setProxy() external;\r\n\r\n    function name() external view returns(string memory);\r\n    function symbol() external view returns(string memory);\r\n    function decimals() external view returns(uint256);\r\n\r\n    function mint(uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}"}}