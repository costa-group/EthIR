{"Collt.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Collt {\r\n    struct Buyer {\r\n        uint availableBalance;\r\n        uint lockedBalance;\r\n    }\r\n\r\n    struct Lock {\r\n        uint lockTime;\r\n        uint unlockTime;\r\n        uint lockedAmount;\r\n        address sellerAddress;\r\n        uint lockId;\r\n        address payable buyerAddress;\r\n        bool isAutoWithdraw;\r\n    }\r\n\r\n    mapping(address =\u003e mapping(uint =\u003eLock)) internal locks;\r\n    mapping(address =\u003e Buyer) internal buyers;\r\n\r\n    event LockCreated(address indexed sellerAddress, uint lockId, address indexed buyerAddress);\r\n    event LockDestroyed(address indexed sellerAddress, uint lockId, address indexed buyerAddress);\r\n\r\n    function getLock(address _sellerAddress, uint _lockId) external view returns (Lock memory) {\r\n        return locks[_sellerAddress][_lockId];\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(msg.value \u003e 0, \"You are trying to deposit 0 Wei\");\r\n        Buyer storage refBuyer = buyers[msg.sender];\r\n        refBuyer.availableBalance = SafeMath.add(refBuyer.availableBalance, msg.value);\r\n    }\r\n\r\n    function withdraw(uint _value) external {\r\n        Buyer storage refBuyer = buyers[msg.sender];\r\n        uint availableBalance = refBuyer.availableBalance;\r\n        require(availableBalance \u003e 0, \"You are trying to withdraw from an empty (or non existent) account\");\r\n        require(_value \u003c= availableBalance, \"You are trying to withdraw more than you have\");\r\n        refBuyer.availableBalance -= _value;\r\n        msg.sender.transfer(_value);\r\n    }\r\n\r\n    function lock(uint _lockAmount, uint _unlockTime, uint _lockId, address _sellerAddress, bool _isAutoWithdraw) external payable {\r\n        require(_lockAmount \u003e 0, \"You are trying to lock 0 Ether\");\r\n        require(_unlockTime \u003e block.timestamp, \"You are trying to set unlock time before (or equal to) lock time\");\r\n        require(msg.sender != _sellerAddress, \"You are trying to buy from yourself\");\r\n        Lock storage refLock = locks[_sellerAddress][_lockId];\r\n        require(refLock.lockedAmount == 0, \"A lock with the same seller and lock ID already exists\");\r\n        if (msg.value \u003e 0) {\r\n            deposit();\r\n        }\r\n        Buyer storage buyer = buyers[msg.sender];\r\n        require(buyer.availableBalance \u003e 0, \"Your available balance is zero\");\r\n        require(buyer.availableBalance \u003e= _lockAmount, \"You are trying to lock more than you have\");\r\n        buyer.availableBalance -= _lockAmount;\r\n        buyer.lockedBalance = SafeMath.add(buyer.lockedBalance, _lockAmount);\r\n        locks[_sellerAddress][_lockId] = Lock({\r\n            lockTime: block.timestamp,\r\n            unlockTime: _unlockTime,\r\n            lockedAmount: _lockAmount,\r\n            sellerAddress: _sellerAddress,\r\n            lockId: _lockId,\r\n            buyerAddress: msg.sender,\r\n            isAutoWithdraw: _isAutoWithdraw\r\n        });\r\n        emit LockCreated(_sellerAddress, _lockId, msg.sender);\r\n    }\r\n\r\n    function unlock(address _sellerAddress, uint _lockId) external {\r\n        // Copy what we need (everything except lockTime, sellerAddress and lockId) and delete the lock right away to prevent reentrancy vulnerability:\r\n        Lock storage refLock = locks[_sellerAddress][_lockId];\r\n        uint unlockTime = refLock.unlockTime;\r\n        uint lockedAmount = refLock.lockedAmount;\r\n        address payable buyerAddress = refLock.buyerAddress;\r\n        address sellerAddress = refLock.sellerAddress;\r\n        bool isAutoWithdraw = refLock.isAutoWithdraw;\r\n        delete locks[_sellerAddress][_lockId];\r\n        require(lockedAmount \u003e 0, \"You are trying to unlock a non existent lock\");\r\n        if (block.timestamp \u003e unlockTime) {\r\n            require(buyerAddress == msg.sender || sellerAddress == msg.sender, \"Only the buyer or the seller of this order can unlock this lock now and in the future\");\r\n        } else {\r\n            require(sellerAddress == msg.sender, \"Only the seller of this order can unlock this lock now (wait for a while if you are the buyer)\");\r\n        }\r\n        Buyer storage refBuyer = buyers[buyerAddress];\r\n        refBuyer.lockedBalance -= lockedAmount;\r\n        if (!isAutoWithdraw) {\r\n            refBuyer.availableBalance = SafeMath.add(refBuyer.availableBalance, lockedAmount);\r\n        } else {\r\n            buyerAddress.transfer(lockedAmount);\r\n        }\r\n        emit LockDestroyed(_sellerAddress, _lockId, buyerAddress);\r\n    }\r\n\r\n    // The seller can repossess the funds at any time, before or after unlockTime\r\n    function repossess(uint _lockId, uint _releaseAmount) external {\r\n        // Copy what we need (lockedAmount and buyerAddress) and delete the lock right away to prevent reentrancy vulnerability:\r\n        Lock storage refLock = locks[msg.sender][_lockId];\r\n        uint lockedAmount = refLock.lockedAmount;\r\n        address payable buyerAddress = refLock.buyerAddress;\r\n        delete locks[msg.sender][_lockId];\r\n        require(lockedAmount \u003e 0, \"You can\u0027t repossess this lock either because you are not its seller or because it doesn\u0027t exist\");\r\n        require(_releaseAmount \u003c= lockedAmount, \"You are trying to repossess more than the lock has\");\r\n        Buyer storage refBuyer = buyers[buyerAddress];\r\n        refBuyer.lockedBalance -= lockedAmount;\r\n        if (_releaseAmount \u003e 0) {\r\n            refBuyer.availableBalance = SafeMath.add(refBuyer.availableBalance, lockedAmount - _releaseAmount);\r\n            msg.sender.transfer(_releaseAmount);\r\n        } else {\r\n            msg.sender.transfer(lockedAmount);\r\n        }\r\n        emit LockDestroyed(msg.sender, _lockId, buyerAddress);\r\n    }\r\n\r\n    function extendUnlockTime(uint _lockId, uint _newUnlockTime) external {\r\n        Lock storage refLock = locks[msg.sender][_lockId];\r\n        require(msg.sender == refLock.sellerAddress, \"Only the seller of this lock can extend it, you are not the seller of this lock\");\r\n        require(_newUnlockTime \u003e block.timestamp, \"You are trying to set new unlock time in the past\");\r\n        require(_newUnlockTime \u003e refLock.unlockTime, \"You are trying to shrink unlock time, not extend\");\r\n        refLock.unlockTime = _newUnlockTime;\r\n    }\r\n\r\n    function getBuyerBalances(address _buyerAddress) external view returns (Buyer memory) {\r\n        return buyers[_buyerAddress];\r\n    }\r\n\r\n    function test_getCurrentTimestampInSeconds() external view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}