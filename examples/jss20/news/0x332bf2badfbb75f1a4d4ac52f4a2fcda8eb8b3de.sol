{"ERC20contract.sol":{"content":"//\"SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}"},"Owned.sol":{"content":"//\"SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}"},"PRT.sol":{"content":"//\"SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// \u0027PRT\u0027 token contract\r\n\r\n// Symbol      : PRT\r\n// Name        : PartyCoin\r\n// Total supply: 1,00,000 (100K PRT)\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./ERC20contract.sol\u0027;\r\nimport \u0027./Owned.sol\u0027;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"PRT\";\r\n    string public  name = \"PartyCoin\";\r\n    uint256 public decimals = 18;\r\n    uint256 _totalSupply = 1e5* 10 ** (decimals); \r\n    uint256 soldTokens;\r\n    \r\n    mapping(address =\u003e uint256) balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) allowed;\r\n    \r\n    event TransferEth(address to, uint256 amount);\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = 0xB8B1423b115E6560B1168Fb1Ad1c01f8Dc9bbcF0;\r\n        balances[address(this)] = totalSupply();\r\n        \r\n        emit Transfer(address(0),address(this), totalSupply());\r\n    }\r\n    \r\n    receive() external payable{\r\n        // receive ethers\r\n        require(msg.value \u003e= 0.3 ether);\r\n        uint tokens = getTokenAmount(msg.value);\r\n        _transfer(msg.sender, tokens);\r\n        // send received funds to the owner - 40%, rest 60% will stay in contract\r\n        owner.transfer((msg.value * 40 )/100);\r\n        emit TransferEth(owner, (msg.value * 40)/100);\r\n    }\r\n    \r\n    function getTokenAmount(uint256 amount) internal pure returns(uint256){\r\n        return (amount * 10); // 1 ETH = 10 PRT\r\n    }\r\n    \r\n    function sellTokens(uint256 tokens) public{\r\n        transfer(address(this), tokens);\r\n    }\r\n    \r\n    function _sell(uint256 _tokens) private{\r\n        // subtract tokens from sold tokens\r\n        soldTokens = soldTokens.sub(_tokens);\r\n        // get ethers to return\r\n        uint256 ethersToReturn = (6 * _tokens)/1e2; // 6 * tokens / 100\r\n        msg.sender.transfer(ethersToReturn);\r\n        emit TransferEth(msg.sender, ethersToReturn);\r\n    }\r\n    \r\n    /** ERC20Interface function\u0027s implementation **/\r\n    \r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply; \r\n    }\r\n    \r\n    function totalTokensSold() public view returns(uint256){\r\n        return soldTokens;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner\u0027s account to `to` account\r\n    // - Owner\u0027s account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] \u003e= tokens );\r\n        require(balances[to] + tokens \u003e= balances[to]);\r\n            \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        \r\n        if(to == address(this))\r\n            _sell(tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner\u0027s account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens \u003c= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] \u003e= tokens);\r\n            \r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        \r\n        if(to == address(this))\r\n            _sell(tokens);\r\n        return true;\r\n    }\r\n    \r\n    function donations(address to, uint256 tokens) public onlyOwner {\r\n        _transfer(to, tokens);\r\n    }\r\n    \r\n    function _transfer(address to, uint256 tokens) internal {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[address(this)] \u003e= tokens );\r\n        require(balances[to] + tokens \u003e= balances[to]);\r\n            \r\n        balances[address(this)] = balances[address(this)].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        soldTokens += tokens;\r\n        emit Transfer(address(this),to,tokens);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender\u0027s account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Burn the ``value` amount of tokens from the `account`\r\n    // ------------------------------------------------------------------------\r\n    function burnTokens(uint256 value) public onlyOwner {\r\n        _burn(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(uint256 value) internal {\r\n        require(_totalSupply - soldTokens \u003e= value); // burn only unsold tokens\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[address(this)] = balances[address(this)].sub(value);\r\n        emit Transfer(address(this), address(0), value);\r\n    }\r\n}"},"SafeMath.sol":{"content":"//\"SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}"}}