{"ower-model.sol":{"content":"pragma solidity ^0.4.17;\r\n\r\ncontract OwerModel {\r\n    struct Abstract {\r\n        uint timestamp;\r\n        address sender;\r\n        uint version;\r\n        bytes32 hash;\r\n        byte[512] extend;\r\n    }\r\n    mapping(bytes32 =\u003e Abstract) abstractData;\r\n    mapping(address =\u003e bool) public allowedMap;\r\n    address[] public allowedArray;\r\n\r\n    event AddressAllowed(address _handler, address _address);\r\n    event AddressDenied(address _handler, address _address);\r\n    event DataSaved(address indexed _handler, uint timestamp, address indexed sender, uint version, bytes32 hash);\r\n    event ExtendSaved(address indexed _handler, byte[512] extend);\r\n    event ExtendNotSave(address indexed _handler, uint version, byte[512] extend);\r\n\r\n    function DataModel() public {\r\n        allowedMap[msg.sender] = true;\r\n        allowedArray.push(msg.sender);\r\n    }\r\n\r\n    modifier allow() {\r\n        require(allowedMap[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function allowAccess(address _address) allow public {\r\n        allowedMap[_address] = true;\r\n        allowedArray.push(_address);\r\n        AddressAllowed(msg.sender, _address);\r\n    }\r\n\r\n    function denyAccess(address _address) allow public {\r\n        allowedMap[_address] = false;\r\n        AddressDenied(msg.sender, _address);\r\n    }\r\n\r\n    function getData(bytes32 _key) public view returns(uint, address, uint, bytes32, byte[512]) {\r\n        return (\r\n            abstractData[_key].timestamp,\r\n            abstractData[_key].sender,\r\n            abstractData[_key].version,\r\n            abstractData[_key].hash,\r\n            abstractData[_key].extend\r\n        );\r\n    }\r\n\r\n    function setData(bytes32 _key, uint timestamp, address sender, uint version, bytes32 hash) allow public {\r\n        abstractData[_key].timestamp = timestamp;\r\n        abstractData[_key].sender = sender;\r\n        abstractData[_key].version = version;\r\n        abstractData[_key].hash = hash;\r\n        DataSaved(msg.sender, timestamp, sender, version, hash);\r\n    }\r\n\r\n    function setExtend(bytes32 _key, byte[512] extend) allow public {\r\n        if (abstractData[_key].version \u003e 0) {\r\n            for (uint256 i; i \u003c 512; i++) {\r\n                abstractData[_key].extend[i] = extend[i];\r\n            }\r\n            ExtendSaved(msg.sender, extend);\r\n        } else {\r\n            ExtendNotSave(msg.sender, abstractData[_key].version, extend);\r\n        }\r\n    }\r\n}"},"Storage.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\nimport \"./ower-model.sol\";\r\n\r\ncontract Storage {\r\n    OwerModel dataModel;\r\n    uint currentVersion = 1;\r\n\r\n    event StorageSaved(address handler, bytes32 indexed hashKey, uint timestamp, uint version, byte[512] extend);\r\n\r\n    function Storage(address dataModelAddress) public {\r\n        dataModel = OwerModel(dataModelAddress);\r\n        // require(dataModelAddress.delegatecall(bytes4(keccak256(\"allowAccess(address)\")), this));\r\n    }\r\n\r\n    function getData(bytes32 key) public view returns(uint timestamp, address sender, uint version, bytes32 hashKey, string extend) {\r\n        byte[512] memory extendByte;\r\n\r\n        (timestamp, sender, version, hashKey, extendByte) = dataModel.getData(key);\r\n\r\n        bytes memory bytesArray = new bytes(512);\r\n        for (uint256 i; i \u003c 512; i++) {\r\n            bytesArray[i] = extendByte[i];\r\n        }\r\n\r\n        extend = string(bytesArray);\r\n        return(timestamp, sender, version, hashKey, extend);\r\n    }\r\n\r\n    function saveData(bytes32 hashKey, byte[512] extend) public {\r\n        dataModel.setData(hashKey, block.timestamp, msg.sender, currentVersion, hashKey);\r\n        dataModel.setExtend(hashKey, extend);\r\n\r\n        StorageSaved(msg.sender, hashKey, block.timestamp, currentVersion, extend);\r\n    }\r\n}"}}