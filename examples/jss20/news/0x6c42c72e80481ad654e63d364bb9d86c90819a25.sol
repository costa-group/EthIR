{"SwipeTeamTimeLock.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nimport \"./SwipeToken.sol\";\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Swipe Tokens Team Time Lock Contract\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SwipeTeamTimeLock is Owned {\r\n    using SafeMath for uint;\r\n    SwipeToken token;\r\n    uint lastCompleteRelease;\r\n    uint restRelease;\r\n    uint constant releasePerMonth = 6 * 10**23; //600k\r\n    \r\n    constructor(address payable addrToken) public {\r\n        token = SwipeToken(addrToken);\r\n        restRelease = 0;\r\n        lastCompleteRelease = now;\r\n    }\r\n    \r\n    function getLockedTokenAmount() public view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function getAllowedAmount() public view returns (uint) {\r\n        uint amount = restRelease;\r\n        if (now \u003c lastCompleteRelease) return amount;\r\n        \r\n        uint lockedAmount = getLockedTokenAmount();\r\n\r\n        uint months = (now - lastCompleteRelease) / (30 days) + 1;\r\n        uint possible = lockedAmount.sub(restRelease).div(releasePerMonth);\r\n        if (possible \u003e months) {\r\n            possible = months;\r\n        }\r\n        amount = amount.add(possible.mul(releasePerMonth));\r\n        return amount;\r\n    }\r\n    \r\n    function withdraw(uint amount) external onlyOwner {\r\n        uint allowedAmount = getAllowedAmount();\r\n\r\n        require(allowedAmount \u003e= amount, \u0027not enough tokens\u0027);\r\n\r\n        if (token.transfer(msg.sender, amount)) {\r\n            restRelease = allowedAmount.sub(amount);\r\n            while(now \u003e lastCompleteRelease) {\r\n                lastCompleteRelease += 30 days;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n\r\n    // Don\u0027t accept ETH\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function () external payable {\r\n\r\n        revert();\r\n\r\n    }\r\n}\r\n"},"SwipeToken.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// \u0027SXP\u0027 \u0027Swipe\u0027 token contract\r\n\r\n//\r\n\r\n// Symbol      : SXP\r\n\r\n// Name        : Swipe\r\n\r\n// Total supply: 300,000,000.000000000000000000\r\n\r\n// Decimals    : 18\r\n\r\n// Website     : https://swipe.io\r\n\r\n\r\n//\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe maths\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c \u003e= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b \u003c= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b \u003e 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC Token Standard #20 Interface\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Contract function to receive approval and execute function in one call\r\n\r\n//\r\n\r\n// Borrowed from MiniMeToken\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Owned contract\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Tokenlock contract\r\n\r\n// ----------------------------------------------------------------------------\r\ncontract Tokenlock is Owned {\r\n    \r\n    uint8 isLocked = 0;       //flag indicates if token is locked\r\n\r\n    event Freezed();\r\n    event UnFreezed();\r\n\r\n    modifier validLock {\r\n        require(isLocked == 0);\r\n        _;\r\n    }\r\n    \r\n    function freeze() public onlyOwner {\r\n        isLocked = 1;\r\n        \r\n        emit Freezed();\r\n    }\r\n\r\n    function unfreeze() public onlyOwner {\r\n        isLocked = 0;\r\n        \r\n        emit UnFreezed();\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Limit users in blacklist\r\n\r\n// ----------------------------------------------------------------------------\r\ncontract UserLock is Owned {\r\n    \r\n    mapping(address =\u003e bool) blacklist;\r\n        \r\n    event LockUser(address indexed who);\r\n    event UnlockUser(address indexed who);\r\n\r\n    modifier permissionCheck {\r\n        require(!blacklist[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    function lockUser(address who) public onlyOwner {\r\n        blacklist[who] = true;\r\n        \r\n        emit LockUser(who);\r\n    }\r\n\r\n    function unlockUser(address who) public onlyOwner {\r\n        blacklist[who] = false;\r\n        \r\n        emit UnlockUser(who);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n\r\n// fixed supply\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SwipeToken is ERC20Interface, Tokenlock, UserLock {\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    string public symbol;\r\n\r\n    string public  name;\r\n\r\n    uint8 public decimals;\r\n\r\n    uint _totalSupply;\r\n\r\n\r\n    mapping(address =\u003e uint) balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint)) allowed;\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Constructor\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    constructor() public {\r\n\r\n        symbol = \"SXP\";\r\n\r\n        name = \"Swipe\";\r\n\r\n        decimals = 18;\r\n\r\n        _totalSupply = 300000000 * 10**uint(decimals);\r\n\r\n        balances[owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Total supply\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function totalSupply() public view returns (uint) {\r\n\r\n        return _totalSupply.sub(balances[address(0)]);\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Get the token balance for account `tokenOwner`\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\r\n        return balances[tokenOwner];\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Transfer the balance from token owner\u0027s account to `to` account\r\n\r\n    // - Owner\u0027s account must have sufficient balance to transfer\r\n\r\n    // - 0 value transfers are allowed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transfer(address to, uint tokens) public validLock permissionCheck returns (bool success) {\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\r\n    // from the token owner\u0027s account\r\n\r\n    //\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n    // recommends that there are no checks for the approval double-spend attack\r\n\r\n    // as this should be implemented in user interfaces\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approve(address spender, uint tokens) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n\r\n    //\r\n\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n\r\n    // for spending from the `from` account and\r\n\r\n    // - From account must have sufficient balance to transfer\r\n\r\n    // - Spender must have sufficient allowance to transfer\r\n\r\n    // - 0 value transfers are allowed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferFrom(address from, address to, uint tokens) public validLock permissionCheck returns (bool success) {\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n\r\n        emit Transfer(from, to, tokens);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Returns the amount of tokens approved by the owner that can be\r\n\r\n    // transferred to the spender\u0027s account\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\r\n        return allowed[tokenOwner][spender];\r\n\r\n    }\r\n\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Destroys `amount` tokens from `account`, reducing the\r\n     // total supply.\r\n     \r\n     // Emits a `Transfer` event with `to` set to the zero address.\r\n     \r\n     // Requirements\r\n     \r\n     // - `account` cannot be the zero address.\r\n     // - `account` must have at least `amount` tokens.\r\n     \r\n     // ------------------------------------------------------------------------\r\n    function burn(uint256 value) public validLock permissionCheck returns (bool success) {\r\n        require(msg.sender != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\r\n    // from the token owner\u0027s account. The `spender` contract function\r\n\r\n    // `receiveApproval(...)` is then executed\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Destoys `amount` tokens from `account`.`amount` is then deducted\r\n    // from the caller\u0027s allowance.\r\n    \r\n    //  See `burn` and `approve`.\r\n    // ------------------------------------------------------------------------\r\n    function burnForAllowance(address account, address feeAccount, uint256 amount) public onlyOwner returns (bool success) {\r\n        require(account != address(0), \"burn from the zero address\");\r\n        require(balanceOf(account) \u003e= amount, \"insufficient balance\");\r\n\r\n        uint feeAmount = amount.mul(2).div(10);\r\n        uint burnAmount = amount.sub(feeAmount);\r\n        \r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n        balances[account] = balances[account].sub(amount);\r\n        balances[feeAccount] = balances[feeAccount].add(feeAmount);\r\n        emit Transfer(account, address(0), burnAmount);\r\n        emit Transfer(account, msg.sender, feeAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Don\u0027t accept ETH\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function () external payable {\r\n\r\n        revert();\r\n\r\n    }\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n\r\n    }\r\n\r\n}\r\n"}}