{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "byzantium",
    "libraries": {},
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "/Users/simon/ws/in3/in3-contracts/contracts/IERC20.sol": {
      "keccak256": "0xb94cda223b95eaa18773de593f3c1db30f26b579729b995a061ad87ce349f3f2",
      "content": "pragma solidity 0.5.10;\n\n// file taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\n\ninterface IERC20 {\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value); // solhint-disable-line\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "/Users/simon/ws/in3/in3-contracts/contracts/NodeRegistryData.sol": {
      "keccak256": "0x9ba0477cc04cd01b7ab34713512cdecf50409b5eaa3f04181a37493ef03cc097",
      "content": "/***********************************************************\n* This file is part of the Slock.it IoT Layer.             *\n* The Slock.it IoT Layer contains:                         *\n*   - USN (Universal Sharing Network)                      *\n*   - INCUBED (Trustless INcentivized remote Node Network) *\n************************************************************\n* Copyright (C) 2016 - 2018 Slock.it GmbH                  *\n* All Rights Reserved.                                     *\n************************************************************\n* You may use, distribute and modify this code under the   *\n* terms of the license contract you have concluded with    *\n* Slock.it GmbH.                                           *\n* For information about liability, maintenance etc. also   *\n* refer to the contract concluded with Slock.it GmbH.      *\n************************************************************\n* For more information, please refer to https://slock.it   *\n* For questions, please contact info@slock.it              *\n***********************************************************/\n\npragma solidity 0.5.10;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC20.sol\";\n\n\n/// @title Registry for IN3-nodes\ncontract NodeRegistryData {\n\n\n    /// node has been registered\n    event LogNodeRegistered(string url, uint props, address signer, uint deposit);\n\n    /// a Node is removed\n    event LogNodeRemoved(string url, address signer);\n\n    /// a node has been updated\n    event LogNodeUpdated(string url, uint props, address signer, uint deposit);\n\n    /// the ownership of a node changed\n    event LogOwnershipChanged(address signer, address oldOwner, address newOwner);\n\n    /// a user received its deposit back\n    event LogDepositReturned(address nodeOwner, uint amount);\n\n    struct In3Node {\n        string url;                         /// the url of the node\n\n        uint deposit;                       /// stored deposit\n\n        uint64 registerTime;                /// timestamp when the node was registered\n        uint192 props;                      /// a list of properties-flags representing the capabilities of the node\n\n        uint64 weight;                      ///  the flag for (future) incentivisation\n        address signer;                     /// the signer for requests\n\n        bytes32 proofHash;                  /// keccak(deposit,timeout,registerTime,props,signer,url)\n    }\n\n    /// information of a in3-node owner\n    struct SignerInformation {\n        uint64 lockedTime;                  /// timestamp until the deposit of an in3-node can not be withdrawn after the node was removed\n        address owner;                      /// the owner of the node\n\n        uint stage;                       /// state of the address\n\n        uint depositAmount;                 /// amount of deposit to be locked, used only after a node had been removed\n\n        uint index;                         /// current index-position of the node in the node-array\n    }\n\n    /// information of an url\n    struct UrlInformation {\n        bool used;                          /// flag whether the url is currently used\n        address signer;                     /// address of the owner of the url\n    }\n\n    /// node list of incubed nodes\n    In3Node[] public nodes;\n\n    /// id used for signing in3-requests and in order to prevent cross-chain convicts\n    /// in case a fork happens there is the possibility that a node can be convicted on the other fork,\n    /// because they would use the very same registryId. Nevertheless we cannot change the registryId.\n    /// So in case of a fork a node should chose one of the forks and unregister his nodes on the others.\n    /// In this case it is also recommend to not sign requests until the node get his deposits from the forked contracts\n    bytes32 public registryId;\n\n    /// timeout for all nodes until they can receive their deposit after unregistering\n    uint public timeout;\n\n    /// tokenContract to be used\n    IERC20 public supportedToken;\n\n    /// add your additional storage here. If you add information before this line you will break in3 nodelist\n\n    /// Logic-contract that is allowed to call certain functions within the smart contract\n    address public ownerContract;\n\n    /// mapping for information of the owner\n    mapping (address => SignerInformation) public signerIndex;\n\n    /// mapping for the information of the url\n    /// can be used to access the SignerInformation-struct\n    mapping (bytes32 => UrlInformation) public urlIndex;\n\n    /// mapping for convicts: sender => convictHash => block number when the convict-tx had been mined)\n    mapping (address => mapping(bytes32 => uint)) public convictMapping;\n\n    /// version: major minor fork(000) date(yyyy/mm/dd)\n    uint constant public VERSION = 12300020190709;\n\n    modifier onlyLogicContract {\n        require(ownerContract == msg.sender, \"not the owner\");\n        _;\n    }\n\n    /// @notice constructor\n    /// @dev cannot be deployed in a genesis block\n    constructor() public {\n        // solium-disable-next-line security/no-block-members\n        registryId = keccak256(abi.encodePacked(address(this), blockhash(block.number-1)));\n        timeout = 40 days;\n        ownerContract = msg.sender;\n    }\n\n    /// @notice removes an in3-node from the nodeList\n    /// @param _signer the signer-address of the in3-node\n    function adminRemoveNodeFromRegistry(address _signer)\n        external\n        onlyLogicContract\n    {\n        SignerInformation memory si = signerIndex[_signer];\n        _removeNodeInternal(si.index);\n\n    }\n\n    /// @notice sets the logic-address / owner of the contract\n    /// @dev used to update the corresponding logic contract\n    /// @dev only callable by the current logic contract\n    /// @param _newLogic the new logic-contract / owner\n    /// @return true if successfull\n    function adminSetLogic(address _newLogic) external onlyLogicContract returns (bool) {\n        require(address(_newLogic) != address(0x0), \"no address provided\");\n        ownerContract = _newLogic;\n        return true;\n    }\n\n    /// @notice sets the deposit of the node\n    /// @dev only callable by the logic contract\n    /// @dev used to delete the deposit after being being convicted\n    /// @param _signer the signer for the node\n    /// @param _newDeposit the new deposit\n    /// @return true if successfull\n    function adminSetNodeDeposit(address _signer, uint _newDeposit) external onlyLogicContract returns (bool) {\n        SignerInformation memory si = signerIndex[_signer];\n        In3Node storage node = nodes[si.index];\n        require(node.signer == _signer, \"not the correct signer of the in3-node\");\n        node.deposit = _newDeposit;\n        return true;\n    }\n\n    /// @notice sets the stage of a certain signer\n    /// @dev only callable by the current logic contract\n    /// @param _signer the signer-account for the stage to be set\n    /// @param _stage the new stage\n    /// @return true if successfull\n    function adminSetStage(address _signer, uint _stage) external onlyLogicContract returns (bool) {\n        SignerInformation storage si = signerIndex[_signer];\n        si.stage = _stage;\n        return true;\n    }\n\n    /// @notice changes the supported token\n    /// @dev only callable by the current logic contract\n    /// @param _newToken the new token-contract\n    /// @return true if successfull\n    function adminSetSupportedToken(IERC20 _newToken) external onlyLogicContract returns (bool) {\n        require(address(_newToken) != address(0x0), \"0x0 is invalid\");\n        supportedToken = _newToken;\n        return true;\n    }\n\n    /// @notice sets a new timeout for all node until they can recive their deposit\n    /// @dev only callable by the current logic contract\n    /// @param _newTimeout the new timeout\n    /// @return true if successfull\n    function adminSetTimeout(uint _newTimeout) external onlyLogicContract returns (bool) {\n        timeout = _newTimeout;\n        return true;\n    }\n\n    /// @notice transfers tokens to an address\n    /// @dev used when returning deposit or rewarding successfull convicts\n    /// @dev only callable by the logic contract\n    /// @param _to the address that shall receive tokens\n    /// @param _amount the amount of tokens to be transfered\n    /// @return true when successfull\n    function adminTransferDeposit(address _to, uint _amount) external onlyLogicContract returns (bool) {\n        require(supportedToken.transfer(_to, _amount), \"ERC20 token transfer failed\");\n        return true;\n    }\n\n    /// @notice writes a value to te convictMapping to be used later for revealConvict in the logic contract\n    /// @param _hash keccak256(wrong blockhash, msg.sender, v, r, s); used to prevent frontrunning.\n    /// @param _caller the address for that called convict in the logic-contract\n    function setConvict(bytes32 _hash, address _caller) external onlyLogicContract {\n        convictMapping[_caller][_hash] = block.number;\n    }\n\n    /// @notice registers a new node in the nodeList\n    /// @dev only callable by the logic contract\n    /// @param _url the url of the node, has to be unique\n    /// @param _props properties of the node\n    /// @param _signer the signer of the in3-node\n    /// @param _weight how many requests per second the node is able to handle\n    /// @param _owner the owner of the node\n    /// @param _deposit the deposit of the in3-node (in erc20 token)\n    /// @param _stage the stage of the in3-node\n    /// @return true if successfull\n    function registerNodeFor(\n        string calldata _url,\n        uint192 _props,\n        address _signer,\n        uint64 _weight,\n        address _owner,\n        uint _deposit,\n        uint _stage\n    )\n        external\n        onlyLogicContract\n        returns (bool)\n    {\n        bytes32 urlHash = keccak256(bytes(_url));\n\n        // sets the information of the owner\n        SignerInformation storage si = signerIndex[_signer];\n\n        si.index = nodes.length;\n        si.owner = _owner;\n        si.stage = _stage;\n\n        // add new In3Node\n        In3Node memory m;\n        m.url = _url;\n        m.props = _props;\n        m.signer = _signer;\n        m.deposit = _deposit;\n        // solium-disable-next-line security/no-block-members\n        m.registerTime = uint64(block.timestamp); // solhint-disable-line not-rely-on-time\n        m.weight = _weight;\n\n        m.proofHash = _calcProofHashInternal(m);\n        nodes.push(m);\n\n        // sets the information of the url\n        UrlInformation memory ui;\n        ui.used = true;\n        ui.signer = _signer;\n        urlIndex[urlHash] = ui;\n\n        emit LogNodeRegistered(\n            _url,\n            _props,\n            _signer,\n            _deposit\n        );\n\n        return true;\n    }\n\n    /// @notice changes the ownership of an in3-node\n    /// @dev only callable by the logic contract\n    /// @param _signer the signer-address of the in3-node, used as an identifier\n    /// @param _newOwner the new owner\n    /// @return true if successfull\n    function transferOwnership(address _signer, address _newOwner)\n        external\n        onlyLogicContract\n        returns (bool)\n    {\n        SignerInformation storage si = signerIndex[_signer];\n        emit LogOwnershipChanged(_signer, si.owner, _newOwner);\n\n        si.owner = _newOwner;\n        return true;\n    }\n\n    /// @notice removes a node from the registry\n    /// @dev only callable by the logic contract\n    /// @param _signer the signer of the in3-node\n    /// @return true if successfull\n    function unregisteringNode(address _signer)\n        external\n        onlyLogicContract\n        returns (bool)\n    {\n\n        SignerInformation storage si = signerIndex[_signer];\n        In3Node memory n = nodes[si.index];\n        _unregisterNodeInternal(si, n);\n        return true;\n    }\n\n    /// @notice updates a node by adding the msg.value to the deposit and setting the props or timeout\n    /// @dev reverts when trying to change the url to an already existing one\n    /// @dev only callable by the logic contract\n    /// @param _signer the signer-address of the in3-node, used as an identifier\n    /// @param _url the url, will be changed if different from the current one\n    /// @param _props the new properties, will be changed if different from the current onec\n    /// @param _weight the amount of requests per second the node is able to handle\n    /// @param _deposit the deposit of the in3-node\n    /// @return true if successfull\n    function updateNode(\n        address _signer,\n        string calldata _url,\n        uint192 _props,\n        uint64 _weight,\n        uint _deposit\n    )\n        external\n        onlyLogicContract\n        returns (bool)\n    {\n        SignerInformation memory si = signerIndex[_signer];\n\n        In3Node storage node = nodes[si.index];\n\n        bytes32 newURL = keccak256(bytes(_url));\n        bytes32 oldURL = keccak256(bytes(node.url));\n\n        // the url got changed\n        if (newURL != oldURL) {\n\n            // make sure the new url is not already in use\n            require(!urlIndex[newURL].used, \"url is already in use\");\n\n            UrlInformation memory ui;\n            ui.used = true;\n            ui.signer = node.signer;\n            urlIndex[newURL] = ui;\n            node.url = _url;\n\n            // deleting the old entry\n            delete urlIndex[oldURL];\n        }\n\n        if (_deposit != node.deposit) {\n            node.deposit = _deposit;\n        }\n\n        if (_props != node.props) {\n            node.props = _props;\n        }\n\n        if (_weight != node.weight) {\n            node.weight = _weight;\n        }\n\n        node.proofHash = _calcProofHashInternal(node);\n\n        emit LogNodeUpdated(\n            node.url,\n            _props,\n            _signer,\n            node.deposit\n        );\n\n        return true;\n    }\n\n    /// @notice returns the In3Node-struct of a certain index\n    /// @param _index the position of the NodeInfo in the node-array\n    /// @return the In3Node for the index provided\n    function getIn3NodeInformation(uint _index) external view returns (In3Node memory) {\n        return nodes[_index];\n    }\n\n    /// @notice returns the SignerInformation of a signer\n    /// @param _signer the signer for the information to get\n    /// @return the SignerInformation for the signer\n    function getSignerInformation(address _signer) external view returns (SignerInformation memory) {\n        return signerIndex[_signer];\n    }\n\n    /// @notice returns the In3Node-struct for a signer\n    /// @param _signer the signer for the information to get\n    /// @return the In3Node-struct for that signer\n    function getNodeInfromationBySigner(address _signer) external view returns (In3Node memory) {\n        return nodes[signerIndex[_signer].index];\n    }\n\n    /// @notice length of the nodelist\n    /// @return the number of total in3-nodes\n    function totalNodes() external view returns (uint) {\n        return nodes.length;\n    }\n\n    /// @notice sets the signerInformation for a signer\n    /// @dev only callable by the logic contract\n    /// @dev gets used for updating the information after returning the deposit\n    /// @dev public-visibility due to passing a struct to the function\n    /// @param _signer the address for the information to be set\n    /// @param _si the new signerInformation\n    /// @return true when successfull\n    function adminSetSignerInfo(address _signer, SignerInformation memory _si) public onlyLogicContract returns (bool) {\n        signerIndex[_signer] = _si;\n        return true;\n    }\n\n    /// @notice calculates the sha3 hash of the most important properties in order to make the proof more efficient\n    /// @param _node the in3 node to calculate the hash from\n    /// @return the hash of the properties of an in3-node\n    function _calcProofHashInternal(In3Node memory _node) internal pure returns (bytes32) {\n\n        return keccak256(\n            abi.encodePacked(\n                _node.deposit,\n                _node.registerTime,\n                _node.props,\n                _node.weight,\n                _node.signer,\n                _node.url\n            )\n        );\n    }\n\n    /// @notice Handles the setting of the unregister values for a node internally\n    /// @param _si information of the signer\n    /// @param _n information of the in3-node\n    function _unregisterNodeInternal(SignerInformation  storage _si, In3Node memory _n) internal {\n\n        // solium-disable-next-line security/no-block-members\n        _si.lockedTime = uint64(block.timestamp + timeout);// solhint-disable-line not-rely-on-time\n        _si.depositAmount = _n.deposit;\n\n        _removeNodeInternal(_si.index);\n    }\n\n    /// @notice removes a node from the node-array\n    /// @param _nodeIndex the nodeIndex to be removed\n    function _removeNodeInternal(uint _nodeIndex) internal {\n\n        require(_nodeIndex < nodes.length, \"invalid node index provided\");\n        // trigger event\n        emit LogNodeRemoved(nodes[_nodeIndex].url, nodes[_nodeIndex].signer);\n        // deleting the old entry\n        delete urlIndex[keccak256(bytes(nodes[_nodeIndex].url))];\n        uint length = nodes.length;\n\n        assert(length > 0);\n\n        // we set the SignerIndex to an invalid index.\n        signerIndex[nodes[_nodeIndex].signer].index = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n        // move the last entry to the removed one.\n        In3Node memory m = nodes[length - 1];\n        nodes[_nodeIndex] = m;\n\n        SignerInformation storage si = signerIndex[m.signer];\n        si.index = _nodeIndex;\n        nodes.length--;\n    }\n}\n"
    }
  }
}}