{"TessaManager.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.7.0;\n\ncontract TessaManager {\n    string public name = \"TESSA MANAGER @2020\";\n\n    address internal _owner;\n    mapping (address =\u003e bool) internal _whitelist;\n    mapping (address =\u003e bool) internal _managers;\n\n    event SetWhitelist(address indexed _addr, bool state);\n    event SetManager(address indexed _addr, bool state);\n\n    constructor() public {\n        _owner = msg.sender;\n        setWhitelist(msg.sender, true);\n        setManager(msg.sender, true);\n    }\n\n    function setWhitelist(address _addr, bool state) public returns (bool) {\n        require(msg.sender == _owner, \"owner:false\");\n        require(_addr != address(0), \"addr:0x0\");\n        _whitelist[_addr] = state;\n        emit SetWhitelist(_addr, state);\n        return true;\n    }\n\n    function isWhitelist(address _addr) public view returns (bool) {\n        require(_addr != address(0), \"addr:0x0\");\n        return _whitelist[_addr];\n    }\n\n    function setManager(address _addr, bool state) public returns (bool) {\n        require(msg.sender == _owner, \"owner:false\");\n        require(_addr != address(0), \"addr:0x0\");\n        _managers[_addr] = state;\n        _whitelist[_addr] = state;\n        emit SetManager(_addr, state);\n        emit SetWhitelist(_addr, state);\n        return true;\n    }\n\n    function isManager(address _addr) public view returns (bool) {\n        require(_addr != address(0), \"addr:0x0\");\n        return _managers[_addr];\n    }\n}"},"TessaToken.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.7.0;\n\nimport \"./TessaManager.sol\";\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b \u003e 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn\u0027t hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b \u003c= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c \u003e= _a);\n        return c;\n    }\n}\n\n/**\n * @title IERC20 interface\n * @dev see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract TessaToken is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) internal balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal allowed;\n\n    uint256 internal totalSupply_;\n    address internal issuer_;\n    bool internal state_;\n\n    TessaManager internal tManager_;\n\n    event TransferFrom(address indexed issuer, address indexed from, address indexed to, uint256 value);\n\n    function setManager(address _tmAddr) public returns (bool) {\n        require(issuer_ == msg.sender, \"issuer:false\");\n        tManager_ = TessaManager(_tmAddr);\n        return true;\n    }\n\n    function setState(bool state) public returns (bool) {\n        require(issuer_ == msg.sender, \"issuer:false\");\n        state_ = state;\n        return true;\n    }\n\n    function getState() public view returns (bool) {\n        return state_;\n    }\n\n    /**\n  * @dev Total number of tokens in existence\n  */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(state_, \"state:false\");\n        require(_to != address(0), \"addr:0x0\");\n        require(tManager_.isWhitelist(_to), \"whitelist:false\");\n        require(_value \u003c= balances[msg.sender], \"balance:not enough\");\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n   * @dev Transfer tokens from one address to another by manager\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n    {\n        require(tManager_.isManager(msg.sender), \"manager:false\");\n        require(state_, \"state:false\");\n        require(_to != address(0), \"addr:0x0\");\n        require(tManager_.isWhitelist(_to), \"whitelist:false\");\n        require(_value \u003c= balances[_from], \"balance:not enough\");\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit TransferFrom(msg.sender, _from, _to, _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(false, \"Access denied!\");\n        // allowed[msg.sender][_spender] = _value;\n        // emit Approval(msg.sender, _spender, _value);\n        return false;\n    }\n\n    /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n    function allowance(address _owner, address _spender) public view returns (uint256)\n    {\n        require(false, \"Access denied!\");\n        //return allowed[_owner][_spender];\n        return 0;\n    }\n\n    /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool)\n    {\n        require(false, \"Access denied!\");\n        // allowed[msg.sender][_spender] = (\n        // allowed[msg.sender][_spender].add(_addedValue));\n        // emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool)\n    {\n        require(false, \"Access denied!\");\n        // uint256 oldValue = allowed[msg.sender][_spender];\n        // if (_subtractedValue \u003e= oldValue) {\n        //   allowed[msg.sender][_spender] = 0;\n        // } else {\n        //   allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        // }\n        // emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}"},"Tessa_0001_DH1.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.7.0;\n\nimport \"./TessaToken.sol\";\n\ncontract Tessa_0001_DH1 is TessaToken {\n    string public name = \"TESSA[#0001] : David Hockney [1]\";\n    string public symbol = \"TSA\";\n    uint8 public decimals = 0;\n\n    constructor(uint256 supply_, bool state, address addr_) public {\n        totalSupply_ = supply_;\n        balances[msg.sender] = totalSupply_;\n        issuer_ = msg.sender;\n        state_ = state;\n        tManager_ = TessaManager(addr_);\n    }\n}\n"}}