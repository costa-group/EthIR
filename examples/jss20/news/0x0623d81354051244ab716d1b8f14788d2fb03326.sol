{"BN256G2.sol":{"content":"/**\n * @title Elliptic curve operations on twist points for alt_bn128\n * @author Mustafa Al-Bassam (mus@musalbas.com)\n * @dev Homepage: https://github.com/musalbas/solidity-BN256G2\n */\n\npragma solidity ^0.6.3;\n\nlibrary BN256G2 {\n    uint256 internal constant FIELD_MODULUS = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\n    uint256 internal constant TWISTBX = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\n    uint256 internal constant TWISTBY = 0x9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2;\n    uint256 internal constant PTXX = 0;\n    uint256 internal constant PTXY = 1;\n    uint256 internal constant PTYX = 2;\n    uint256 internal constant PTYY = 3;\n    uint256 internal constant PTZX = 4;\n    uint256 internal constant PTZY = 5;\n\n    /**\n     * @notice Add two twist points\n     * @param pt1xx Coefficient 1 of x on point 1\n     * @param pt1xy Coefficient 2 of x on point 1\n     * @param pt1yx Coefficient 1 of y on point 1\n     * @param pt1yy Coefficient 2 of y on point 1\n     * @param pt2xx Coefficient 1 of x on point 2\n     * @param pt2xy Coefficient 2 of x on point 2\n     * @param pt2yx Coefficient 1 of y on point 2\n     * @param pt2yy Coefficient 2 of y on point 2\n     * @return (pt3xx, pt3xy, pt3yx, pt3yy)\n     */\n    function ECTwistAdd(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt2xx,\n        uint256 pt2xy,\n        uint256 pt2yx,\n        uint256 pt2yy\n    ) public view returns (uint256, uint256, uint256, uint256) {\n        if (pt1xx == 0 \u0026\u0026 pt1xy == 0 \u0026\u0026 pt1yx == 0 \u0026\u0026 pt1yy == 0) {\n            if (!(pt2xx == 0 \u0026\u0026 pt2xy == 0 \u0026\u0026 pt2yx == 0 \u0026\u0026 pt2yy == 0)) {\n                assert(_isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\n            }\n            return (pt2xx, pt2xy, pt2yx, pt2yy);\n        } else if (pt2xx == 0 \u0026\u0026 pt2xy == 0 \u0026\u0026 pt2yx == 0 \u0026\u0026 pt2yy == 0) {\n            assert(_isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\n            return (pt1xx, pt1xy, pt1yx, pt1yy);\n        }\n\n        assert(_isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\n        assert(_isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\n\n        uint256[6] memory pt3 = _ECTwistAddJacobian(\n            pt1xx,\n            pt1xy,\n            pt1yx,\n            pt1yy,\n            1,\n            0,\n            pt2xx,\n            pt2xy,\n            pt2yx,\n            pt2yy,\n            1,\n            0\n        );\n\n        return\n            _fromJacobian(\n                pt3[PTXX],\n                pt3[PTXY],\n                pt3[PTYX],\n                pt3[PTYY],\n                pt3[PTZX],\n                pt3[PTZY]\n            );\n    }\n\n    /**\n     * @notice Multiply a twist point by a scalar\n     * @param s     Scalar to multiply by\n     * @param pt1xx Coefficient 1 of x\n     * @param pt1xy Coefficient 2 of x\n     * @param pt1yx Coefficient 1 of y\n     * @param pt1yy Coefficient 2 of y\n     * @return (pt2xx, pt2xy, pt2yx, pt2yy)\n     */\n    function ECTwistMul(\n        uint256 s,\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy\n    ) public view returns (uint256, uint256, uint256, uint256) {\n        uint256 pt1zx = 1;\n        if (pt1xx == 0 \u0026\u0026 pt1xy == 0 \u0026\u0026 pt1yx == 0 \u0026\u0026 pt1yy == 0) {\n            pt1xx = 1;\n            pt1yx = 1;\n            pt1zx = 0;\n        } else {\n            assert(_isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\n        }\n\n        uint256[6] memory pt2 = _ECTwistMulJacobian(\n            s,\n            pt1xx,\n            pt1xy,\n            pt1yx,\n            pt1yy,\n            pt1zx,\n            0\n        );\n\n        return\n            _fromJacobian(\n                pt2[PTXX],\n                pt2[PTXY],\n                pt2[PTYX],\n                pt2[PTYY],\n                pt2[PTZX],\n                pt2[PTZY]\n            );\n    }\n\n    /**\n     * @notice Get the field modulus\n     * @return The field modulus\n     */\n    function GetFieldModulus() public pure returns (uint256) {\n        return FIELD_MODULUS;\n    }\n\n    function submod(uint256 a, uint256 b, uint256 n)\n        internal\n        pure\n        returns (uint256)\n    {\n        return addmod(a, n - b, n);\n    }\n\n    function _FQ2Mul(uint256 xx, uint256 xy, uint256 yx, uint256 yy)\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        return (\n            submod(\n                mulmod(xx, yx, FIELD_MODULUS),\n                mulmod(xy, yy, FIELD_MODULUS),\n                FIELD_MODULUS\n            ),\n            addmod(\n                mulmod(xx, yy, FIELD_MODULUS),\n                mulmod(xy, yx, FIELD_MODULUS),\n                FIELD_MODULUS\n            )\n        );\n    }\n\n    function _FQ2Muc(uint256 xx, uint256 xy, uint256 c)\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        return (mulmod(xx, c, FIELD_MODULUS), mulmod(xy, c, FIELD_MODULUS));\n    }\n\n    function _FQ2Add(uint256 xx, uint256 xy, uint256 yx, uint256 yy)\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        return (addmod(xx, yx, FIELD_MODULUS), addmod(xy, yy, FIELD_MODULUS));\n    }\n\n    function _FQ2Sub(uint256 xx, uint256 xy, uint256 yx, uint256 yy)\n        internal\n        pure\n        returns (uint256 rx, uint256 ry)\n    {\n        return (submod(xx, yx, FIELD_MODULUS), submod(xy, yy, FIELD_MODULUS));\n    }\n\n    function _FQ2Div(uint256 xx, uint256 xy, uint256 yx, uint256 yy)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        (yx, yy) = _FQ2Inv(yx, yy);\n        return _FQ2Mul(xx, xy, yx, yy);\n    }\n\n    function _FQ2Inv(uint256 x, uint256 y)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        uint256 inv = _modInv(\n            addmod(\n                mulmod(y, y, FIELD_MODULUS),\n                mulmod(x, x, FIELD_MODULUS),\n                FIELD_MODULUS\n            ),\n            FIELD_MODULUS\n        );\n        return (\n            mulmod(x, inv, FIELD_MODULUS),\n            FIELD_MODULUS - mulmod(y, inv, FIELD_MODULUS)\n        );\n    }\n\n    function _isOnCurve(uint256 xx, uint256 xy, uint256 yx, uint256 yy)\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 yyx;\n        uint256 yyy;\n        uint256 xxxx;\n        uint256 xxxy;\n        (yyx, yyy) = _FQ2Mul(yx, yy, yx, yy);\n        (xxxx, xxxy) = _FQ2Mul(xx, xy, xx, xy);\n        (xxxx, xxxy) = _FQ2Mul(xxxx, xxxy, xx, xy);\n        (yyx, yyy) = _FQ2Sub(yyx, yyy, xxxx, xxxy);\n        (yyx, yyy) = _FQ2Sub(yyx, yyy, TWISTBX, TWISTBY);\n        return yyx == 0 \u0026\u0026 yyy == 0;\n    }\n\n    function _modInv(uint256 a, uint256 n)\n        internal\n        view\n        returns (uint256 result)\n    {\n        bool success;\n        assembly {\n            let freemem := mload(0x40)\n            mstore(freemem, 0x20)\n            mstore(add(freemem, 0x20), 0x20)\n            mstore(add(freemem, 0x40), 0x20)\n            mstore(add(freemem, 0x60), a)\n            mstore(add(freemem, 0x80), sub(n, 2))\n            mstore(add(freemem, 0xA0), n)\n            success := staticcall(\n                sub(gas(), 2000),\n                5,\n                freemem,\n                0xC0,\n                freemem,\n                0x20\n            )\n            result := mload(freemem)\n        }\n        require(success);\n    }\n\n    function _fromJacobian(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt1zx,\n        uint256 pt1zy\n    )\n        internal\n        view\n        returns (uint256 pt2xx, uint256 pt2xy, uint256 pt2yx, uint256 pt2yy)\n    {\n        uint256 invzx;\n        uint256 invzy;\n        (invzx, invzy) = _FQ2Inv(pt1zx, pt1zy);\n        (pt2xx, pt2xy) = _FQ2Mul(pt1xx, pt1xy, invzx, invzy);\n        (pt2yx, pt2yy) = _FQ2Mul(pt1yx, pt1yy, invzx, invzy);\n    }\n\n    function _ECTwistAddJacobian(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt1zx,\n        uint256 pt1zy,\n        uint256 pt2xx,\n        uint256 pt2xy,\n        uint256 pt2yx,\n        uint256 pt2yy,\n        uint256 pt2zx,\n        uint256 pt2zy\n    ) internal pure returns (uint256[6] memory pt3) {\n        if (pt1zx == 0 \u0026\u0026 pt1zy == 0) {\n            (\n                pt3[PTXX],\n                pt3[PTXY],\n                pt3[PTYX],\n                pt3[PTYY],\n                pt3[PTZX],\n                pt3[PTZY]\n            ) = (pt2xx, pt2xy, pt2yx, pt2yy, pt2zx, pt2zy);\n            return pt3;\n        } else if (pt2zx == 0 \u0026\u0026 pt2zy == 0) {\n            (\n                pt3[PTXX],\n                pt3[PTXY],\n                pt3[PTYX],\n                pt3[PTYY],\n                pt3[PTZX],\n                pt3[PTZY]\n            ) = (pt1xx, pt1xy, pt1yx, pt1yy, pt1zx, pt1zy);\n            return pt3;\n        }\n\n        (pt2yx, pt2yy) = _FQ2Mul(pt2yx, pt2yy, pt1zx, pt1zy); // U1 = y2 * z1\n        (pt3[PTYX], pt3[PTYY]) = _FQ2Mul(pt1yx, pt1yy, pt2zx, pt2zy); // U2 = y1 * z2\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt1zx, pt1zy); // V1 = x2 * z1\n        (pt3[PTZX], pt3[PTZY]) = _FQ2Mul(pt1xx, pt1xy, pt2zx, pt2zy); // V2 = x1 * z2\n\n        if (pt2xx == pt3[PTZX] \u0026\u0026 pt2xy == pt3[PTZY]) {\n            if (pt2yx == pt3[PTYX] \u0026\u0026 pt2yy == pt3[PTYY]) {\n                (\n                    pt3[PTXX],\n                    pt3[PTXY],\n                    pt3[PTYX],\n                    pt3[PTYY],\n                    pt3[PTZX],\n                    pt3[PTZY]\n                ) = _ECTwistDoubleJacobian(\n                    pt1xx,\n                    pt1xy,\n                    pt1yx,\n                    pt1yy,\n                    pt1zx,\n                    pt1zy\n                );\n                return pt3;\n            }\n            (\n                pt3[PTXX],\n                pt3[PTXY],\n                pt3[PTYX],\n                pt3[PTYY],\n                pt3[PTZX],\n                pt3[PTZY]\n            ) = (1, 0, 1, 0, 0, 0);\n            return pt3;\n        }\n\n        (pt2zx, pt2zy) = _FQ2Mul(pt1zx, pt1zy, pt2zx, pt2zy); // W = z1 * z2\n        (pt1xx, pt1xy) = _FQ2Sub(pt2yx, pt2yy, pt3[PTYX], pt3[PTYY]); // U = U1 - U2\n        (pt1yx, pt1yy) = _FQ2Sub(pt2xx, pt2xy, pt3[PTZX], pt3[PTZY]); // V = V1 - V2\n        (pt1zx, pt1zy) = _FQ2Mul(pt1yx, pt1yy, pt1yx, pt1yy); // V_squared = V * V\n        (pt2yx, pt2yy) = _FQ2Mul(pt1zx, pt1zy, pt3[PTZX], pt3[PTZY]); // V_squared_times_V2 = V_squared * V2\n        (pt1zx, pt1zy) = _FQ2Mul(pt1zx, pt1zy, pt1yx, pt1yy); // V_cubed = V * V_squared\n        (pt3[PTZX], pt3[PTZY]) = _FQ2Mul(pt1zx, pt1zy, pt2zx, pt2zy); // newz = V_cubed * W\n        (pt2xx, pt2xy) = _FQ2Mul(pt1xx, pt1xy, pt1xx, pt1xy); // U * U\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt2zx, pt2zy); // U * U * W\n        (pt2xx, pt2xy) = _FQ2Sub(pt2xx, pt2xy, pt1zx, pt1zy); // U * U * W - V_cubed\n        (pt2zx, pt2zy) = _FQ2Muc(pt2yx, pt2yy, 2); // 2 * V_squared_times_V2\n        (pt2xx, pt2xy) = _FQ2Sub(pt2xx, pt2xy, pt2zx, pt2zy); // A = U * U * W - V_cubed - 2 * V_squared_times_V2\n        (pt3[PTXX], pt3[PTXY]) = _FQ2Mul(pt1yx, pt1yy, pt2xx, pt2xy); // newx = V * A\n        (pt1yx, pt1yy) = _FQ2Sub(pt2yx, pt2yy, pt2xx, pt2xy); // V_squared_times_V2 - A\n        (pt1yx, pt1yy) = _FQ2Mul(pt1xx, pt1xy, pt1yx, pt1yy); // U * (V_squared_times_V2 - A)\n        (pt1xx, pt1xy) = _FQ2Mul(pt1zx, pt1zy, pt3[PTYX], pt3[PTYY]); // V_cubed * U2\n        (pt3[PTYX], pt3[PTYY]) = _FQ2Sub(pt1yx, pt1yy, pt1xx, pt1xy); // newy = U * (V_squared_times_V2 - A) - V_cubed * U2\n    }\n\n    function _ECTwistDoubleJacobian(\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt1zx,\n        uint256 pt1zy\n    )\n        internal\n        pure\n        returns (\n            uint256 pt2xx,\n            uint256 pt2xy,\n            uint256 pt2yx,\n            uint256 pt2yy,\n            uint256 pt2zx,\n            uint256 pt2zy\n        )\n    {\n        (pt2xx, pt2xy) = _FQ2Muc(pt1xx, pt1xy, 3); // 3 * x\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt1xx, pt1xy); // W = 3 * x * x\n        (pt1zx, pt1zy) = _FQ2Mul(pt1yx, pt1yy, pt1zx, pt1zy); // S = y * z\n        (pt2yx, pt2yy) = _FQ2Mul(pt1xx, pt1xy, pt1yx, pt1yy); // x * y\n        (pt2yx, pt2yy) = _FQ2Mul(pt2yx, pt2yy, pt1zx, pt1zy); // B = x * y * S\n        (pt1xx, pt1xy) = _FQ2Mul(pt2xx, pt2xy, pt2xx, pt2xy); // W * W\n        (pt2zx, pt2zy) = _FQ2Muc(pt2yx, pt2yy, 8); // 8 * B\n        (pt1xx, pt1xy) = _FQ2Sub(pt1xx, pt1xy, pt2zx, pt2zy); // H = W * W - 8 * B\n        (pt2zx, pt2zy) = _FQ2Mul(pt1zx, pt1zy, pt1zx, pt1zy); // S_squared = S * S\n        (pt2yx, pt2yy) = _FQ2Muc(pt2yx, pt2yy, 4); // 4 * B\n        (pt2yx, pt2yy) = _FQ2Sub(pt2yx, pt2yy, pt1xx, pt1xy); // 4 * B - H\n        (pt2yx, pt2yy) = _FQ2Mul(pt2yx, pt2yy, pt2xx, pt2xy); // W * (4 * B - H)\n        (pt2xx, pt2xy) = _FQ2Muc(pt1yx, pt1yy, 8); // 8 * y\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt1yx, pt1yy); // 8 * y * y\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt2zx, pt2zy); // 8 * y * y * S_squared\n        (pt2yx, pt2yy) = _FQ2Sub(pt2yx, pt2yy, pt2xx, pt2xy); // newy = W * (4 * B - H) - 8 * y * y * S_squared\n        (pt2xx, pt2xy) = _FQ2Muc(pt1xx, pt1xy, 2); // 2 * H\n        (pt2xx, pt2xy) = _FQ2Mul(pt2xx, pt2xy, pt1zx, pt1zy); // newx = 2 * H * S\n        (pt2zx, pt2zy) = _FQ2Mul(pt1zx, pt1zy, pt2zx, pt2zy); // S * S_squared\n        (pt2zx, pt2zy) = _FQ2Muc(pt2zx, pt2zy, 8); // newz = 8 * S * S_squared\n    }\n\n    function _ECTwistMulJacobian(\n        uint256 d,\n        uint256 pt1xx,\n        uint256 pt1xy,\n        uint256 pt1yx,\n        uint256 pt1yy,\n        uint256 pt1zx,\n        uint256 pt1zy\n    ) internal pure returns (uint256[6] memory pt2) {\n        while (d != 0) {\n            if ((d \u0026 1) != 0) {\n                pt2 = _ECTwistAddJacobian(\n                    pt2[PTXX],\n                    pt2[PTXY],\n                    pt2[PTYX],\n                    pt2[PTYY],\n                    pt2[PTZX],\n                    pt2[PTZY],\n                    pt1xx,\n                    pt1xy,\n                    pt1yx,\n                    pt1yy,\n                    pt1zx,\n                    pt1zy\n                );\n            }\n            (pt1xx, pt1xy, pt1yx, pt1yy, pt1zx, pt1zy) = _ECTwistDoubleJacobian(\n                pt1xx,\n                pt1xy,\n                pt1yx,\n                pt1yy,\n                pt1zx,\n                pt1zy\n            );\n\n            d = d / 2;\n        }\n    }\n}\n"},"Pairing.sol":{"content":"// This file is MIT Licensed.\n//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\npragma solidity ^0.6.3;\n\nimport \"./BN256G2.sol\";\n\nlibrary Pairing {\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n    function P2() internal pure returns (G2Point memory) {\n        return\n            G2Point(\n                [\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\n                ],\n                [\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\n                ]\n            );\n    }\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 \u0026\u0026 p.Y == 0) return G1Point(0, 0);\n        return G1Point(p.X, q - (p.Y % q));\n    }\n    function addition(G1Point memory p1, G1Point memory p2)\n        internal\n        returns (G1Point memory r)\n    {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        assembly {\n            success := call(sub(gas(), 2000), 6, 0, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success);\n    }\n    function addition(G2Point memory p1, G2Point memory p2)\n        internal\n        view\n        returns (G2Point memory r)\n    {\n        (r.X[1], r.X[0], r.Y[1], r.Y[0]) = BN256G2.ECTwistAdd(\n            p1.X[1],\n            p1.X[0],\n            p1.Y[1],\n            p1.Y[0],\n            p2.X[1],\n            p2.X[0],\n            p2.Y[1],\n            p2.Y[0]\n        );\n    }\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n    function scalar_mul(G1Point memory p, uint256 s)\n        internal\n        returns (G1Point memory r)\n    {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        assembly {\n            success := call(sub(gas(), 2000), 7, 0, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success);\n    }\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n    function pairing(G1Point[] memory p1, G2Point[] memory p2)\n        internal\n        returns (bool)\n    {\n        require(p1.length == p2.length);\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint256[](inputSize);\n        for (uint256 i = 0; i \u003c elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint256[1] memory out;\n        bool success;\n        assembly {\n            success := call(\n                sub(gas(), 2000),\n                8,\n                0,\n                add(input, 0x20),\n                mul(inputSize, 0x20),\n                out,\n                0x20\n            )\n            // Use \"invalid\" to make gas estimation work\n            switch success\n                case 0 {\n                    invalid()\n                }\n        }\n        require(success);\n        return out[0] != 0;\n    }\n    /// Convenience method for a pairing check for two pairs.\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for three pairs.\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for four pairs.\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n"},"ZeneKa.sol":{"content":"pragma solidity ^0.6.3;\n\nimport \"./BN256G2.sol\";\nimport \"./Pairing.sol\";\n\ncontract ZeneKa {\n    using Pairing for *;\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    event Register(bytes32 indexed _id, address indexed _registrant);\n    event Commit(\n        bytes32 indexed _id,\n        bytes32 indexed _proofHash,\n        address indexed _prover\n    );\n    event Verify(\n        bytes32 indexed _id,\n        bytes32 indexed _proofHash,\n        address indexed _prover\n    );\n\n    mapping(bytes32 =\u003e bytes32) _idToCommit;\n    mapping(bytes32 =\u003e address) _proofHashToProver;\n    mapping(bytes32 =\u003e uint256) _proofHashToBlock;\n    mapping(bytes32 =\u003e bool) _proofHashToProven;\n    mapping(bytes32 =\u003e mapping(address =\u003e uint256[])) _idToProverToInput;\n    mapping(bytes32 =\u003e mapping(address =\u003e bool)) _idToProverToVerified;\n\n    function _verified(bytes32 _id, bytes32 _proofHash, uint256[] memory _input)\n        internal\n    {\n        _proofHashToProven[_proofHash] = true;\n        _idToProverToVerified[_id][msg.sender] = true;\n        _idToProverToInput[_id][msg.sender] = _input;\n        emit Verify(_id, _proofHash, msg.sender);\n    }\n\n    function verify(bytes32 _id, address _address)\n        public\n        view\n        returns (bool isVerified)\n    {\n        return _idToProverToVerified[_id][_address];\n    }\n\n    function input(bytes32 _id, address _prover)\n        public\n        view\n        returns (uint256[] memory zkInput)\n    {\n        require(_idToProverToVerified[_id][_prover], \"Unverified\");\n        return _idToProverToInput[_id][_prover];\n    }\n\n    function prover(bytes32 _proofHash)\n        public\n        view\n        returns (address commitProver)\n    {\n        return _proofHashToProver[_proofHash];\n    }\n\n    function commitBlock(bytes32 _proofHash)\n        public\n        view\n        returns (uint256 commitBlockNumber)\n    {\n        return _proofHashToBlock[_proofHash];\n    }\n}\n"},"ZeneKaG16.sol":{"content":"pragma solidity ^0.6.3;\n\nimport \"./ZeneKa.sol\";\n\n// Based on ZoKrates Verifier @ https://github.com/Zokrates/ZoKrates\n\ncontract ZeneKaG16 is ZeneKa {\n    using Pairing for *;\n\n    struct VerifyingKeyG16 {\n        Pairing.G1Point a;\n        Pairing.G2Point b;\n        Pairing.G2Point gamma;\n        Pairing.G2Point delta;\n        Pairing.G1Point[] gamma_abc;\n    }\n\n    struct ProofG16 {\n        Pairing.G1Point a;\n        Pairing.G2Point b;\n        Pairing.G1Point c;\n    }\n\n    struct ParamsG16 {\n        bytes32[2] a;\n        bytes32[2][2] b;\n        bytes32[2][2] gamma;\n        bytes32[2][2] delta;\n        uint256 gamma_abc_len;\n        bytes32[2][] gamma_abc;\n        bool registered;\n    }\n\n    mapping(bytes32 =\u003e ParamsG16) private _idToVkParamsG16;\n\n    function _verifyingKeyG16(bytes32 _id)\n        internal\n        view\n        returns (VerifyingKeyG16 memory vk)\n    {\n        ParamsG16 memory params = _idToVkParamsG16[_id];\n\n        vk.a = Pairing.G1Point(uint256(params.a[0]), uint256(params.a[1]));\n        vk.b = Pairing.G2Point(\n            [uint256(params.b[0][0]), uint256(params.b[0][1])],\n            [uint256(params.b[1][0]), uint256(params.b[1][1])]\n        );\n        vk.gamma = Pairing.G2Point(\n            [uint256(params.gamma[0][0]), uint256(params.gamma[0][1])],\n            [uint256(params.gamma[1][0]), uint256(params.gamma[1][1])]\n        );\n        vk.delta = Pairing.G2Point(\n            [uint256(params.delta[0][0]), uint256(params.delta[0][1])],\n            [uint256(params.delta[1][0]), uint256(params.delta[1][1])]\n        );\n        vk.gamma_abc = new Pairing.G1Point[](params.gamma_abc_len);\n        for (uint256 i = 0; i \u003c params.gamma_abc_len; i++) {\n            vk.gamma_abc[i] = Pairing.G1Point(\n                uint256(params.gamma_abc[i][0]),\n                uint256(params.gamma_abc[i][1])\n            );\n        }\n    }\n\n    function registerG16(\n        bytes32[2] memory _a,\n        bytes32[2][2] memory _b,\n        bytes32[2][2] memory _gamma,\n        bytes32[2][2] memory _delta,\n        uint256 _gamma_abc_len,\n        bytes32[2][] memory _gamma_abc\n    ) public returns (bool isRegistered) {\n        bytes32 id = keccak256(\n            abi.encodePacked(_a, _b, _gamma, _delta, _gamma_abc_len, _gamma_abc)\n        );\n\n        if (_idToVkParamsG16[id].registered) return true;\n\n        _idToVkParamsG16[id] = ParamsG16({\n            a: _a,\n            b: _b,\n            gamma: _gamma,\n            delta: _delta,\n            gamma_abc_len: _gamma_abc_len,\n            gamma_abc: _gamma_abc,\n            registered: true\n        });\n\n        emit Register(id, msg.sender);\n        return true;\n    }\n\n    function commitG16(bytes32 _id, bytes32 _proofHash)\n        public\n        returns (bool didCommit)\n    {\n        // Stores a proof hash (throws if pre-existing value)\n        if (\n            !_idToVkParamsG16[_id].registered ||\n            _proofHashToProver[_proofHash] != address(0)\n        ) return false;\n        _proofHashToProver[_proofHash] = msg.sender;\n        _proofHashToBlock[_proofHash] = block.number;\n        emit Commit(_id, _proofHash, msg.sender);\n        return true;\n    }\n\n    function proveG16(\n        bytes32 _id,\n        uint256[2] memory _a,\n        uint256[2][2] memory _b,\n        uint256[2] memory _c,\n        uint256[] memory _input\n    ) public returns (bool isValid) {\n        bytes32 proofHash = keccak256(abi.encodePacked(_a, _b, _c, _input));\n        if (_proofHashToProven[proofHash]) return true;\n        if (\n            !_idToVkParamsG16[_id].registered ||\n            _proofHashToProver[proofHash] != msg.sender ||\n            block.number \u003c= _proofHashToBlock[proofHash]\n        ) return false;\n\n        VerifyingKeyG16 memory vk = _verifyingKeyG16(_id);\n        if (_input.length + 1 != _idToVkParamsG16[_id].gamma_abc_len)\n            return false;\n        ProofG16 memory proof;\n        proof.a = Pairing.G1Point(_a[0], _a[1]);\n        proof.b = Pairing.G2Point([_b[0][0], _b[0][1]], [_b[1][0], _b[1][1]]);\n        proof.c = Pairing.G1Point(_c[0], _c[1]);\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\n        for (uint256 i = 0; i \u003c _input.length; i++) {\n            if (_input[i] \u003e= SNARK_SCALAR_FIELD) return false;\n            vk_x = Pairing.addition(\n                vk_x,\n                Pairing.scalar_mul(vk.gamma_abc[i + 1], _input[i])\n            );\n        }\n        vk_x = Pairing.addition(vk_x, vk.gamma_abc[0]);\n        if (\n            !Pairing.pairingProd4(\n                proof.a,\n                proof.b,\n                Pairing.negate(vk_x),\n                vk.gamma,\n                Pairing.negate(proof.c),\n                vk.delta,\n                Pairing.negate(vk.a),\n                vk.b\n            )\n        ) return false;\n\n        _verified(_id, proofHash, _input);\n        return true;\n    }\n}\n"}}