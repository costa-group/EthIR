{"IERC20.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\n/**\r\n * @dev ERC20 contract interface.\r\n */\r\ncontract IERC20\r\n{\r\n\tfunction totalSupply() public view returns (uint);\r\n\t\r\n\tfunction transfer(address _to, uint _value) public returns (bool success);\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint balance);\r\n\t\r\n\tfunction approve(address _spender, uint _value) public returns (bool success);\r\n\t\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint tokens);\r\n}"},"Mortal.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\nimport \"./Owned.sol\";\r\n\r\ncontract Mortal is Owned\r\n{\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}"},"OrFeedInterface.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n  //function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string[] tokens,  uint256 amount, string[] exchanges) external payable returns (bool);\r\n}"},"OrFeedLIVETest.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\nimport \"./Owned.sol\";\r\nimport \"./Mortal.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./OrFeedInterface.sol\";\r\n\r\n// ----------------------------------------------------------------------------\r\n// Oracle Feed LIVE Test contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract OrFeedLIVETest is Owned, Mortal, OrFeedInterface\r\n{\r\n\t// Oracle feed for ETH/USDT real time exchange rate contrat address\r\n\taddress public orFeedContractAddress;\r\n\tOrFeedInterface public orFeed;\r\n\t\r\n\tuint public oneEthAsWei = 10**18;\r\n\t\r\n\t\r\n\t\r\n\t// ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(OrFeedInterface _orFeedContract) public\r\n\t{\r\n\t\torFeedContractAddress = address(_orFeedContract);\r\n\t\torFeed = OrFeedInterface(orFeedContractAddress);\r\n    }\r\n\t\r\n\t\r\n\t\r\n\tfunction setOrFeedAddress(OrFeedInterface _orFeedContract) public onlyOwner returns(bool) {\r\n\t\trequire(orFeedContractAddress != address(_orFeedContract), \"New orfeed address required\");\r\n\t\t\r\n\t\torFeedContractAddress = address(_orFeedContract);\r\n\t\torFeed = OrFeedInterface(orFeedContractAddress);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getEthUsdPrice() public view returns(uint) {\r\n\t\treturn orFeed.getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", oneEthAsWei);\r\n\t}\r\n\t\r\n\tfunction getEthWeiAmountPrice(uint ethWeiAmount) public view returns(uint) {\r\n\t\treturn orFeed.getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", ethWeiAmount);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getEthUsdPrice2() public view returns(uint) {\r\n\t\treturn OrFeedInterface(orFeedContractAddress).getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", oneEthAsWei);\r\n\t}\r\n\t\r\n\tfunction getEthWeiAmountPrice2(uint ethWeiAmount) public view returns(uint) {\r\n\t\treturn OrFeedInterface(orFeedContractAddress).getExchangeRate(\"ETH\", \"USDT\", \"DEFAULT\", ethWeiAmount);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getExchangeRate( string fromSymbol,\r\n\t\t\t\t\t\t\tstring toSymbol,\r\n\t\t\t\t\t\t\tstring venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\tuint256 r = orFeed.getExchangeRate(fromSymbol, toSymbol, venue, amount);\r\n\t\treturn r;\r\n\t}\r\n\t\r\n\tfunction getExchangeRateX( string fromSymbol,\r\n\t\t\t\t\t\t\tstring toSymbol,\r\n\t\t\t\t\t\t\tstring venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\treturn (orFeed.getExchangeRate(fromSymbol, toSymbol, venue, amount));\r\n\t}\r\n\t\r\n\tfunction getExchangeRate2( string fromSymbol,\r\n\t\t\t\t\t\t\tstring toSymbol,\r\n\t\t\t\t\t\t\tstring venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\tuint256 r = OrFeedInterface(orFeedContractAddress).getExchangeRate(fromSymbol, toSymbol, venue, amount);\r\n\t\treturn r;\r\n\t}\r\n\t\r\n\tfunction getExchangeRate2X( string fromSymbol,\r\n\t\t\t\t\t\t\tstring toSymbol,\r\n\t\t\t\t\t\t\tstring venue,\r\n\t\t\t\t\t\t\tuint256 amount )\r\n\t\t\t\t\t\texternal view returns ( uint256 )\r\n\t{\r\n\t\treturn (OrFeedInterface(orFeedContractAddress).getExchangeRate(fromSymbol, toSymbol, venue, amount));\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 ) {\r\n\t\treturn orFeed.getTokenDecimalCount(tokenAddress);\r\n\t}\r\n\t\r\n\tfunction getTokenAddress ( string symbol ) external view returns ( address ) {\r\n\t\treturn orFeed.getTokenAddress(symbol);\r\n\t}\r\n\t\r\n\tfunction getSynthBytes32 ( string symbol ) external view returns ( bytes32 ) {\r\n\t\treturn orFeed.getSynthBytes32(symbol);\r\n\t}\r\n\t\r\n\tfunction getForexAddress ( string symbol ) external view returns ( address ) {\r\n\t\treturn orFeed.getForexAddress(symbol);\r\n\t}\r\n\t\r\n\t/*function arb(address  fundsReturnToAddress,\r\n\t\t\t\taddress liquidityProviderContractAddress,\r\n\t\t\t\tstring[] calldata tokens,\r\n\t\t\t\tuint256 amount,\r\n\t\t\t\tstring[] calldata exchanges)\r\n\t\t\texternal payable returns (bool)\r\n\t{\r\n\t\trevert();\r\n\t}*/\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Accept ETH donations\r\n\t */\r\n    function () external payable {\r\n\t\trevert();\r\n    }\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev Owner can transfer out (recover) any ERC20 tokens accidentally sent to this contract.\r\n\t * @param tokenAddress Token contract address we want to recover lost tokens from.\r\n\t * @param tokens Amount of tokens to be recovered, usually the same as the balance of this contract.\r\n\t * @return bool\r\n\t */\r\n    function recoverAnyERC20Token(address tokenAddress, uint tokens) external onlyOwner returns (bool ok) {\r\n\t\tok = IERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}"},"Owned.sol":{"content":"pragma solidity ^0.4.26;\r\n\r\ncontract Owned {\r\n\t\r\n\taddress public owner;\r\n\t\r\n    constructor() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n    // This contract only defines a modifier but it will be used in derived contracts.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Owner required\");\r\n        _;\r\n    }\r\n}"}}