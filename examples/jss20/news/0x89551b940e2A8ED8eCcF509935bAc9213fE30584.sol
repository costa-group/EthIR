{"BasicToken.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\n\r\nimport \"./ERC20Basic.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address =\u003e uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value \u003c= balances[msg.sender], \"The balance of account is insufficient.\");\r\n    require(_to != address(0), \"Recipient address is zero address(0). Check the address again.\");\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}"},"DoDreamChain.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\nimport \"./DoDreamChainBase.sol\";\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title DoDreamChain\r\n */\r\ncontract DoDreamChain is DoDreamChainBase {\r\n\r\n  event TransferedToDRMDapp(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        address indexed to, uint256 value, DRMReceiver.DRMReceiveType receiveType);\r\n\r\n  string public constant name = \"DoDreamChain\";\r\n  string public constant symbol = \"DRM\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 250 * 1000 * 1000 * (10 ** uint256(decimals)); // 250,000,000 DRM\r\n\r\n  /**\r\n   * @dev Constructor 생성자에게 DRM토큰을 보냅니다.\r\n   */\r\n  constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n  function drmTransfer(address _to, uint256 _value, string memory  _note) public returns (bool ret) {\r\n      ret = super.drmTransfer(_to, _value, _note);\r\n      postTransfer(msg.sender, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function drmTransferFrom(address _from, address _to, uint256 _value, string memory _note) public returns (bool ret) {\r\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\r\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\r\n  }\r\n\r\n  function postTransfer(address owner, address spender, address to, uint256 value,\r\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\r\n        if (Address.isContract(to)) {\r\n            \r\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\"onDRMReceived(address,address,uint256,uint8)\", owner, spender, value, receiveType));\r\n            if (callOk) {\r\n                emit TransferedToDRMDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmMintTo(to, amount, note);\r\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMReceiveType.DRM_MINT);\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = super.drmBurnFrom(from, value, note);\r\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMReceiveType.DRM_BURN);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title DRM Receiver\r\n */\r\ncontract DRMReceiver {\r\n    enum DRMReceiveType { DRM_TRANSFER, DRM_MINT, DRM_BURN }\r\n    function onDRMReceived(address owner, address spender, uint256 value, DRMReceiveType receiveType) public returns (bool);\r\n}"},"DoDreamChainBase.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\nimport \"./LockableToken.sol\";\r\n\r\n/**\r\n * @title DRMBaseToken\r\n * dev 트랜잭션 실행 시 메모를 남길 수 있다.\r\n */\r\ncontract DoDreamChainBase is LockableToken   {\r\n    event DRMTransfer(address indexed from, address indexed to, uint256 value, string note);\r\n    event DRMTransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n    event DRMApproval(address indexed owner, address indexed spender, uint256 value, string note);\r\n\r\n    event DRMMintTo(address indexed controller, address indexed to, uint256 amount, string note);\r\n    event DRMBurnFrom(address indexed controller, address indexed from, uint256 value, string note);\r\n\r\n    event DRMTransferToTeam(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n    event DRMTransferToPartner(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n\r\n    event DRMTransferToEcosystem(address indexed owner, address indexed spender, address indexed to\r\n    , uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\r\n\r\n    // ERC20 함수들을 오버라이딩 작업 \u003e drm~ 함수를 타게 한다.\r\n    function transfer(address to, uint256 value) public returns (bool ret) {\r\n        return drmTransfer(to, value, \"transfer\");\r\n    }\r\n\r\n    function drmTransfer(address to, uint256 value, string memory note) public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transfer(to, value);\r\n        emit DRMTransfer(msg.sender, to, value, note);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        return drmTransferFrom(from, to, value, \"\");\r\n    }\r\n             \r\n     function drmTransferFrom(address from, address to, uint256 value, string memory note) public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferFrom(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        return drmApprove(spender, value, \"\");\r\n    }\r\n\r\n    function drmApprove(address spender, uint256 value, string memory note) public returns (bool ret) {\r\n        ret = super.approve(spender, value);\r\n        emit DRMApproval(msg.sender, spender, value, note);\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\r\n        return drmIncreaseApproval(spender, addedValue, \"\");\r\n    }\r\n\r\n    function drmIncreaseApproval(address spender, uint256 addedValue, string memory note) public returns (bool ret) {\r\n        ret = super.increaseApproval(spender, addedValue);\r\n        emit DRMApproval(msg.sender, spender, allowed[msg.sender][spender], note);\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\r\n        return drmDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public returns (bool ret) {\r\n        ret = super.decreaseApproval(spender, subtractedValue);\r\n        emit DRMApproval(msg.sender, spender, allowed[msg.sender][spender], note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 발행시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        require(to != address(0x0), \"This address to be set is zero address(0). Check the input address.\");\r\n    \r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit DRMMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각시 반드시 주석을 남길수 있도록한다.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value \u003c= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit DRMBurnFrom(msg.sender, from, value, note);\r\n    }\r\n    \r\n    /**\r\n     * dev DRM 팀에게 전송하는 경우\r\n     */\r\n    function drmTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\r\n        return ret;\r\n    }\r\n    \r\n    /**\r\n     * dev 파트너(어드바이저)에게 전송하는 경우\r\n     */\r\n    function drmTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 보상을 DRM 지급\r\n     * dev EOA가 트랜잭션을 일으켜서 처리 * 여러개 계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function drmBatchTransferToEcosystem(\r\n        address from, address[] memory to,\r\n        uint256[] memory values,\r\n        uint256 processIdHash,\r\n        uint256[] memory userIdHash,\r\n        string memory note\r\n    ) public onlyOwner returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The sizes of \\\u0027to\\\u0027 and \\\u0027values\\\u0027 arrays are different.\");\r\n        require(length == userIdHash.length, \"The sizes of \\\u0027to\\\u0027 and \\\u0027userIdHash\\\u0027 arrays are different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i \u003c length; i++) {\r\n            require(to[i] != address(this), \"The receive address is the Contact Address of DoDreamChain.\");\r\n\r\n            ret = ret \u0026\u0026 super.transferFrom(from, to[i], values[i]);\r\n            emit DRMTransferToEcosystem(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\r\n        }\r\n    }\r\n    \r\n    function destroy() public onlyRoot {\r\n        selfdestruct(msg.sender);\r\n    }\r\n   \r\n}"},"ERC20.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\nimport \"./ERC20Basic.sol\";\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}"},"ERC20Basic.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}"},"LockableToken.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\nimport \"./StandardToken.sol\";\r\nimport \"./MultiOwnable.sol\";\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is StandardToken, MultiOwnable {\r\n    bool public locked = true;\r\n\r\n    /**\r\n     * dev 락 = TRUE  이여도  거래 가능한 언락 계정\r\n     */\r\n    mapping(address =\u003e bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev - 계정마다 lockValue만큼 락이 걸린다.\r\n     * dev - lockValue = 0 \u003e limit이 없음\r\n     */\r\n    mapping(address =\u003e uint256) public lockValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string note);\r\n    event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!locked || unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) \u003e= lockValues[addr], \"Transferable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string memory note) public onlyOwner {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r\n\r\n    function unlock(string memory note) public onlyOwner {\r\n        locked = false;\r\n        emit Locked(locked, note);\r\n    }\r\n\r\n    function lockTo(address addr, string memory note) public onlyOwner {\r\n        setLockValue(addr, balanceOf(addr), note);\r\n        unlockAddrs[addr] = false;\r\n\r\n        emit LockedTo(addr, true, note);\r\n    }\r\n\r\n    function unlockTo(address addr, string memory note) public onlyOwner {\r\n        setLockValue(addr, 0, note);\r\n        unlockAddrs[addr] = true;\r\n\r\n        emit LockedTo(addr, false, note);\r\n    }\r\n\r\n    function setLockValue(address addr, uint256 value, string memory note) public onlyOwner {\r\n        lockValues[addr] = value;\r\n        if(value == 0){\r\n            unlockAddrs[addr] = true;    \r\n        }else{\r\n            unlockAddrs[addr] = false;\r\n        }\r\n\r\n        emit SetLockValue(addr, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 이체 가능 금액 체크\r\n     */\r\n    function getMyUnlockValue() public view returns (uint256) {\r\n        address addr = msg.sender;\r\n        if ((!locked || unlockAddrs[addr]) )\r\n            return balances[addr].sub(lockValues[addr]);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public checkUnlock(msg.sender, value) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public checkUnlock(from, value) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n}"},"MultiOwnable.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\n/**\r\n * @title MultiOwnable\r\n */\r\ncontract MultiOwnable {\r\n  address public root;\r\n  mapping (address =\u003e address) public owners;\r\n\r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() public {\r\n    root = msg.sender;\r\n    owners[root] = root;\r\n  }\r\n\r\n  /**\r\n  * @dev check owner\r\n  */\r\n  modifier onlyOwner() {\r\n    require(owners[msg.sender] != address(0), \"permission error[onlyOwner]\");\r\n    _;\r\n  }\r\n\r\n   modifier onlyRoot() {\r\n    require(msg.sender == root, \"permission error[onlyRoot]\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev add new owner\r\n  */\r\n  function newOwner(address _owner) external onlyOwner returns (bool) {\r\n    require(_owner != address(0), \"Invalid address.\");\r\n    require(owners[_owner] == address(0), \"permission error[onlyOwner]\");\r\n    owners[_owner] = msg.sender;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev delete owner\r\n    */\r\n  function deleteOwner(address _owner) external onlyOwner returns (bool) {\r\n    owners[_owner] = address(0);\r\n    return true;\r\n  }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"StandardToken.sol":{"content":"pragma solidity ^0.5.5;\r\n\r\nimport \"./BasicToken.sol\";\r\nimport \"./ERC20.sol\";\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value \u003c= balances[_from], \"Not enough balance.\");\r\n    require(_value \u003c= allowed[_from][msg.sender], \"Not allowed.\");\r\n    require(_to != address(0), \"Invalid address.\");\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue \u003e= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}"}}