{{
  "language": "Solidity",
  "sources": {
    "contracts/extensions/PooledCDAIKyberExtension.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"../PooledCDAI.sol\";\nimport \"../interfaces/KyberNetworkProxy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n\n/**\n  @dev An extension to PooledCDAI that enables minting & burning pcDAI using ETH & ERC20 tokens\n    supported by Kyber Network, rather than just DAI. There's no need to deploy one for each pool,\n    since it uses pcDAI as a black box.\n */\ncontract PooledCDAIKyberExtension {\n    using SafeERC20 for ERC20;\n    using SafeERC20 for PooledCDAI;\n    using SafeMath for uint256;\n\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant KYBER_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    ERC20 internal constant ETH_TOKEN_ADDRESS = ERC20(\n        0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n    );\n    bytes internal constant PERM_HINT = \"PERM\"; // Only use permissioned reserves from Kyber\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\n\n    function mintWithETH(PooledCDAI pcDAI, address to)\n        public\n        payable\n        returns (bool)\n    {\n        // convert `msg.value` ETH to DAI\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        (uint256 actualDAIAmount, uint256 actualETHAmount) = _kyberTrade(\n            ETH_TOKEN_ADDRESS,\n            msg.value,\n            dai\n        );\n\n        // mint `actualDAIAmount` pcDAI\n        _mint(pcDAI, to, actualDAIAmount);\n\n        // return any leftover ETH\n        if (actualETHAmount < msg.value) {\n            msg.sender.transfer(msg.value.sub(actualETHAmount));\n        }\n\n        return true;\n    }\n\n    function mintWithToken(\n        PooledCDAI pcDAI,\n        address tokenAddress,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        require(\n            tokenAddress != address(ETH_TOKEN_ADDRESS),\n            \"Use mintWithETH() instead\"\n        );\n        require(tokenAddress != DAI_ADDRESS, \"Use mint() instead\");\n\n        // transfer `amount` token from msg.sender\n        ERC20 token = ERC20(tokenAddress);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        // convert `amount` token to DAI\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        (uint256 actualDAIAmount, uint256 actualTokenAmount) = _kyberTrade(\n            token,\n            amount,\n            dai\n        );\n\n        // mint `actualDAIAmount` pcDAI\n        _mint(pcDAI, to, actualDAIAmount);\n\n        // return any leftover tokens\n        if (actualTokenAmount < amount) {\n            token.safeTransfer(msg.sender, amount.sub(actualTokenAmount));\n        }\n\n        return true;\n    }\n\n    function burnToETH(PooledCDAI pcDAI, address payable to, uint256 amount)\n        public\n        returns (bool)\n    {\n        // burn `amount` pcDAI for msg.sender to get DAI\n        _burn(pcDAI, amount);\n\n        // convert `amount` DAI to ETH\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        (uint256 actualETHAmount, uint256 actualDAIAmount) = _kyberTrade(\n            dai,\n            amount,\n            ETH_TOKEN_ADDRESS\n        );\n\n        // transfer `actualETHAmount` ETH to `to`\n        to.transfer(actualETHAmount);\n\n        // transfer any leftover DAI\n        if (actualDAIAmount < amount) {\n            dai.safeTransfer(msg.sender, amount.sub(actualDAIAmount));\n        }\n\n        return true;\n    }\n\n    function burnToToken(\n        PooledCDAI pcDAI,\n        address tokenAddress,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        require(\n            tokenAddress != address(ETH_TOKEN_ADDRESS),\n            \"Use burnToETH() instead\"\n        );\n        require(tokenAddress != DAI_ADDRESS, \"Use burn() instead\");\n\n        // burn `amount` pcDAI for msg.sender to get DAI\n        _burn(pcDAI, amount);\n\n        // convert `amount` DAI to token\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        ERC20 token = ERC20(tokenAddress);\n        (uint256 actualTokenAmount, uint256 actualDAIAmount) = _kyberTrade(\n            dai,\n            amount,\n            token\n        );\n\n        // transfer `actualTokenAmount` token to `to`\n        token.safeTransfer(to, actualTokenAmount);\n\n        // transfer any leftover DAI\n        if (actualDAIAmount < amount) {\n            dai.safeTransfer(msg.sender, amount.sub(actualDAIAmount));\n        }\n\n        return true;\n    }\n\n    function _mint(PooledCDAI pcDAI, address to, uint256 actualDAIAmount)\n        internal\n    {\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        dai.safeApprove(address(pcDAI), 0);\n        dai.safeApprove(address(pcDAI), actualDAIAmount);\n        require(pcDAI.mint(to, actualDAIAmount), \"Failed to mint pcDAI\");\n    }\n\n    function _burn(PooledCDAI pcDAI, uint256 amount) internal {\n        // transfer `amount` pcDAI from msg.sender\n        pcDAI.safeTransferFrom(msg.sender, address(this), amount);\n\n        // burn `amount` pcDAI for DAI\n        require(pcDAI.burn(address(this), amount), \"Failed to burn pcDAI\");\n    }\n\n    /**\n     * @notice Get the token balance of an account\n     * @param _token the token to be queried\n     * @param _addr the account whose balance will be returned\n     * @return token balance of the account\n     */\n    function _getBalance(ERC20 _token, address _addr)\n        internal\n        view\n        returns (uint256)\n    {\n        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n            return uint256(_addr.balance);\n        }\n        return uint256(_token.balanceOf(_addr));\n    }\n\n    function _toPayableAddr(address _addr)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(_addr));\n    }\n\n    /**\n     * @notice Wrapper function for doing token conversion on Kyber Network\n     * @param _srcToken the token to convert from\n     * @param _srcAmount the amount of tokens to be converted\n     * @param _destToken the destination token\n     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n     *         _srcPriceInDest the price of the source token, in terms of dest tokens\n     *         _actualDestAmount actual amount of dest token traded\n     *         _actualSrcAmount actual amount of src token traded\n     */\n    function _kyberTrade(ERC20 _srcToken, uint256 _srcAmount, ERC20 _destToken)\n        internal\n        returns (uint256 _actualDestAmount, uint256 _actualSrcAmount)\n    {\n        // Get current rate & ensure token is listed on Kyber\n        KyberNetworkProxy kyber = KyberNetworkProxy(KYBER_ADDRESS);\n        (, uint256 rate) = kyber.getExpectedRate(\n            _srcToken,\n            _destToken,\n            _srcAmount\n        );\n        require(rate > 0, \"Price for token is 0 on Kyber\");\n\n        uint256 beforeSrcBalance = _getBalance(_srcToken, address(this));\n        uint256 msgValue;\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\n            msgValue = 0;\n            _srcToken.safeApprove(KYBER_ADDRESS, 0);\n            _srcToken.safeApprove(KYBER_ADDRESS, _srcAmount);\n        } else {\n            msgValue = _srcAmount;\n        }\n        _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\n            _srcToken,\n            _srcAmount,\n            _destToken,\n            _toPayableAddr(address(this)),\n            MAX_QTY,\n            rate,\n            address(0),\n            PERM_HINT\n        );\n        require(_actualDestAmount > 0, \"Received 0 dest token\");\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\n            _srcToken.safeApprove(KYBER_ADDRESS, 0);\n        }\n\n        _actualSrcAmount = beforeSrcBalance.sub(\n            _getBalance(_srcToken, address(this))\n        );\n    }\n\n    function() external payable {}\n}\n"
    },
    "contracts/PooledCDAI.sol": {
      "content": "pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"./interfaces/CERC20.sol\";\n\n\ncontract PooledCDAI is ERC20, Ownable {\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    uint256 internal constant PRECISION = 10**18;\n    uint256 internal constant ERR_CODE_OK = 0;\n\n    CERC20 public constant cDAI = CERC20(\n        0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\n    );\n    ERC20 public constant dai = ERC20(\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\n    );\n\n    string private _name;\n    string private _symbol;\n\n    struct Beneficiary {\n        address dest;\n        uint256 weight;\n    }\n    Beneficiary[] public beneficiaries; // the accounts that will receive the interests from Compound\n    uint256 public totalBeneficiaryWeight; // sum of all beneficiary weights\n    bool public initialized;\n\n    event Mint(address indexed sender, address indexed to, uint256 amount);\n    event Burn(address indexed sender, address indexed to, uint256 amount);\n    event WithdrawInterest(address indexed sender, uint256 amount);\n    event SetBeneficiaries(address indexed sender);\n\n    /**\n     * @dev Sets the values for `name` and `symbol`. Both of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    function init(\n        string calldata name,\n        string calldata symbol,\n        Beneficiary[] calldata _beneficiaries\n    ) external {\n        require(!initialized, \"Already initialized\");\n        initialized = true;\n\n        _name = name;\n        _symbol = symbol;\n\n        // Transfer ownership to msg.sender\n        _transferOwnership(msg.sender);\n\n        // Set beneficiaries\n        uint256 totalWeight = 0;\n        for (uint256 i = 0; i < _beneficiaries.length; i = i.add(1)) {\n            totalWeight = totalWeight.add(_beneficiaries[i].weight);\n            beneficiaries.push(\n                Beneficiary({\n                    dest: _beneficiaries[i].dest,\n                    weight: _beneficiaries[i].weight\n                })\n            );\n        }\n        totalBeneficiaryWeight = totalWeight;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function mint(address to, uint256 amount) external returns (bool) {\n        // transfer `amount` DAI from msg.sender\n        dai.safeTransferFrom(msg.sender, address(this), amount);\n\n        // use `amount` DAI to mint cDAI\n        dai.safeApprove(address(cDAI), amount);\n        require(cDAI.mint(amount) == ERR_CODE_OK, \"Failed to mint cDAI\");\n\n        // mint `amount` pcDAI for `to`\n        _mint(to, amount);\n\n        // emit event\n        emit Mint(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function burn(address to, uint256 amount) external returns (bool) {\n        // burn `amount` pcDAI for msg.sender\n        _burn(msg.sender, amount);\n\n        // burn cDAI for `amount` DAI\n        require(cDAI.redeemUnderlying(amount) == ERR_CODE_OK, \"Failed to redeem\");\n\n        // transfer DAI to `to`\n        dai.safeTransfer(to, amount);\n\n        // emit event\n        emit Burn(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function accruedInterestCurrent() public returns (uint256) {\n        return\n            cDAI\n                .exchangeRateCurrent()\n                .mul(cDAI.balanceOf(address(this)))\n                .div(PRECISION)\n                .sub(totalSupply());\n    }\n\n    function accruedInterestStored() public view returns (uint256) {\n        return\n            cDAI\n                .exchangeRateStored()\n                .mul(cDAI.balanceOf(address(this)))\n                .div(PRECISION)\n                .sub(totalSupply());\n    }\n\n    function withdrawInterestInDAI() external returns (bool) {\n        // calculate amount of interest in DAI\n        uint256 interestAmount = accruedInterestCurrent();\n\n        // burn cDAI\n        require(cDAI.redeemUnderlying(interestAmount) == ERR_CODE_OK, \"Failed to redeem\");\n\n        // transfer DAI to beneficiaries\n        uint256 transferAmount = 0;\n        for (uint256 i = 0; i < beneficiaries.length; i = i.add(1)) {\n            transferAmount = interestAmount.mul(beneficiaries[i].weight).div(\n                totalBeneficiaryWeight\n            );\n            dai.safeTransfer(beneficiaries[i].dest, transferAmount);\n        }\n\n        emit WithdrawInterest(msg.sender, interestAmount);\n\n        return true;\n    }\n\n    function setBeneficiaries(Beneficiary[] calldata newBeneficiaries)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        emit SetBeneficiaries(msg.sender);\n\n        delete beneficiaries;\n        uint256 newTotalWeight = 0;\n        for (uint256 i = 0; i < newBeneficiaries.length; i = i.add(1)) {\n            newTotalWeight = newTotalWeight.add(newBeneficiaries[i].weight);\n            beneficiaries.push(\n                Beneficiary({\n                    dest: newBeneficiaries[i].dest,\n                    weight: newBeneficiaries[i].weight\n                })\n            );\n        }\n        totalBeneficiaryWeight = newTotalWeight;\n\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/ownership/Ownable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/CERC20.sol": {
      "content": "pragma solidity 0.5.17;\n\n\n// Compound finance ERC20 market interface\ninterface CERC20 {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function exchangeRateStored() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/KyberNetworkProxy.sol": {
      "content": "pragma solidity 0.5.17;\n\n/**\n * @title The interface for the KyberNetworkProxy smart contract\n */\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n\ninterface KyberNetworkProxy {\n    function getExpectedRate(ERC20 src, ERC20 dest, uint256 srcQty)\n        external\n        view\n        returns (uint256 expectedRate, uint256 slippageRate);\n\n    function tradeWithHint(\n        ERC20 src,\n        uint256 srcAmount,\n        ERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address walletId,\n        bytes calldata hint\n    ) external payable returns (uint256);\n}\n"
    },
    "contracts/lib/CloneFactory.sol": {
      "content": "pragma solidity 0.5.17;\n\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2018 Murray Software, LLC.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n//solhint-disable max-line-length\n//solhint-disable no-inline-assembly\n\ncontract CloneFactory {\n    function createClone(address target) internal returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(\n                clone,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(\n                add(clone, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            result := create(0, clone, 0x37)\n        }\n    }\n\n    function isClone(address target, address query)\n        internal\n        view\n        returns (bool result)\n    {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(\n                clone,\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\n            )\n            mstore(add(clone, 0xa), targetBytes)\n            mstore(\n                add(clone, 0x1e),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n\n            let other := add(clone, 0x40)\n            extcodecopy(query, other, 0, 0x2d)\n            result := and(\n                eq(mload(clone), mload(other)),\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n            )\n        }\n    }\n}\n"
    },
    "contracts/MetadataPooledCDAIFactory.sol": {
      "content": "pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\nimport \"./PooledCDAIFactory.sol\";\n\n\ncontract MetadataPooledCDAIFactory is PooledCDAIFactory {\n    event CreatePoolWithMetadata(\n        address sender,\n        address pool,\n        bool indexed renounceOwnership,\n        bytes metadata\n    );\n\n    constructor(address _libraryAddress)\n        public\n        PooledCDAIFactory(_libraryAddress)\n    {}\n\n    function createPCDAIWithMetadata(\n        string calldata name,\n        string calldata symbol,\n        PooledCDAI.Beneficiary[] calldata beneficiaries,\n        bool renounceOwnership,\n        bytes calldata metadata\n    ) external returns (PooledCDAI) {\n        PooledCDAI pcDAI = _createPCDAI(\n            name,\n            symbol,\n            beneficiaries,\n            renounceOwnership\n        );\n        emit CreatePoolWithMetadata(\n            msg.sender,\n            address(pcDAI),\n            renounceOwnership,\n            metadata\n        );\n    }\n}\n"
    },
    "contracts/PooledCDAIFactory.sol": {
      "content": "pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\nimport \"./lib/CloneFactory.sol\";\nimport \"./PooledCDAI.sol\";\n\n\ncontract PooledCDAIFactory is CloneFactory {\n    address public libraryAddress;\n\n    event CreatePool(\n        address sender,\n        address pool,\n        bool indexed renounceOwnership\n    );\n\n    constructor(address _libraryAddress) public {\n        libraryAddress = _libraryAddress;\n    }\n\n    function createPCDAI(\n        string calldata name,\n        string calldata symbol,\n        PooledCDAI.Beneficiary[] calldata beneficiaries,\n        bool renounceOwnership\n    ) external returns (PooledCDAI) {\n        PooledCDAI pcDAI = _createPCDAI(\n            name,\n            symbol,\n            beneficiaries,\n            renounceOwnership\n        );\n        emit CreatePool(msg.sender, address(pcDAI), renounceOwnership);\n        return pcDAI;\n    }\n\n    function _createPCDAI(\n        string memory name,\n        string memory symbol,\n        PooledCDAI.Beneficiary[] memory beneficiaries,\n        bool renounceOwnership\n    ) internal returns (PooledCDAI) {\n        address payable clone = _toPayableAddr(createClone(libraryAddress));\n        PooledCDAI pcDAI = PooledCDAI(clone);\n        pcDAI.init(name, symbol, beneficiaries);\n        if (renounceOwnership) {\n            pcDAI.renounceOwnership();\n        } else {\n            pcDAI.transferOwnership(msg.sender);\n        }\n        return pcDAI;\n    }\n\n    function _toPayableAddr(address _addr)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(_addr));\n    }\n}\n"
    },
    "contracts/sai2dai/PooledCSAI.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"../interfaces/CERC20.sol\";\n\n\ncontract PooledCSAI is ERC20, Ownable {\n    uint256 internal constant PRECISION = 10**18;\n\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\n    address public constant DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n\n    string private _name;\n    string private _symbol;\n\n    address public beneficiary; // the account that will receive the interests from Compound\n\n    event Mint(address indexed sender, address indexed to, uint256 amount);\n    event Burn(address indexed sender, address indexed to, uint256 amount);\n    event WithdrawInterest(\n        address indexed sender,\n        address beneficiary,\n        uint256 amount,\n        bool indexed inDAI\n    );\n    event SetBeneficiary(address oldBeneficiary, address newBeneficiary);\n\n    /**\n     * @dev Sets the values for `name` and `symbol`. Both of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    function init(\n        string memory name,\n        string memory symbol,\n        address _beneficiary\n    ) public {\n        require(beneficiary == address(0), \"Already initialized\");\n\n        _name = name;\n        _symbol = symbol;\n\n        // Set beneficiary\n        require(_beneficiary != address(0), \"Beneficiary can't be zero\");\n        beneficiary = _beneficiary;\n        emit SetBeneficiary(address(0), _beneficiary);\n\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function mint(address to, uint256 amount) public returns (bool) {\n        // transfer `amount` DAI from msg.sender\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        require(\n            dai.transferFrom(msg.sender, address(this), amount),\n            \"Failed to transfer DAI from msg.sender\"\n        );\n\n        // use `amount` DAI to mint cDAI\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        require(dai.approve(CDAI_ADDRESS, 0), \"Failed to clear DAI allowance\");\n        require(\n            dai.approve(CDAI_ADDRESS, amount),\n            \"Failed to set DAI allowance\"\n        );\n        require(cDAI.mint(amount) == 0, \"Failed to mint cDAI\");\n\n        // mint `amount` pcDAI for `to`\n        _mint(to, amount);\n\n        // emit event\n        emit Mint(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function burn(address to, uint256 amount) public returns (bool) {\n        // burn `amount` pcDAI for msg.sender\n        _burn(msg.sender, amount);\n\n        // burn cDAI for `amount` DAI\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        require(cDAI.redeemUnderlying(amount) == 0, \"Failed to redeem\");\n\n        // transfer DAI to `to`\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        require(dai.transfer(to, amount), \"Failed to transfer DAI to target\");\n\n        // emit event\n        emit Burn(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function accruedInterestCurrent() public returns (uint256) {\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        return\n            cDAI\n                .exchangeRateCurrent()\n                .mul(cDAI.balanceOf(address(this)))\n                .div(PRECISION)\n                .sub(totalSupply());\n    }\n\n    function accruedInterestStored() public view returns (uint256) {\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        return\n            cDAI\n                .exchangeRateStored()\n                .mul(cDAI.balanceOf(address(this)))\n                .div(PRECISION)\n                .sub(totalSupply());\n    }\n\n    function withdrawInterestInDAI() public returns (bool) {\n        // calculate amount of interest in DAI\n        uint256 interestAmount = accruedInterestCurrent();\n\n        // burn cDAI\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        require(cDAI.redeemUnderlying(interestAmount) == 0, \"Failed to redeem\");\n\n        // transfer DAI to beneficiary\n        ERC20 dai = ERC20(DAI_ADDRESS);\n        require(\n            dai.transfer(beneficiary, interestAmount),\n            \"Failed to transfer DAI to beneficiary\"\n        );\n\n        emit WithdrawInterest(msg.sender, beneficiary, interestAmount, true);\n\n        return true;\n    }\n\n    function withdrawInterestInCDAI() public returns (bool) {\n        // calculate amount of cDAI to transfer\n        CERC20 cDAI = CERC20(CDAI_ADDRESS);\n        uint256 interestAmountInCDAI = accruedInterestCurrent()\n            .mul(PRECISION)\n            .div(cDAI.exchangeRateCurrent());\n\n        // transfer cDAI to beneficiary\n        require(\n            cDAI.transfer(beneficiary, interestAmountInCDAI),\n            \"Failed to transfer cDAI to beneficiary\"\n        );\n\n        // emit event\n        emit WithdrawInterest(\n            msg.sender,\n            beneficiary,\n            interestAmountInCDAI,\n            false\n        );\n\n        return true;\n    }\n\n    function setBeneficiary(address newBeneficiary)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(newBeneficiary != address(0), \"Beneficiary can't be zero\");\n        emit SetBeneficiary(beneficiary, newBeneficiary);\n\n        beneficiary = newBeneficiary;\n\n        return true;\n    }\n\n    function() external payable {\n        revert(\"Contract doesn't support receiving Ether\");\n    }\n}\n"
    },
    "contracts/sai2dai/Sai2Dai.sol": {
      "content": "pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./PooledCSAI.sol\";\nimport \"../PooledCDAI.sol\";\nimport \"../MetadataPooledCDAIFactory.sol\";\nimport \"./ScdMcdMigration.sol\";\n\ncontract Sai2Dai is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for PooledCSAI;\n\n    uint256 public constant DEV_WEIGHT = 5;\n    uint256 public constant BENEFICIARY_WEIGHT = 95;\n\n    mapping (address => address) pSAI2pDAI;\n    address public dev;\n\n    MetadataPooledCDAIFactory public factory;\n    IERC20 public constant sai = IERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\n    IERC20 public constant dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    ScdMcdMigration public constant mcdaiMigration = ScdMcdMigration(0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849);\n\n    constructor (address factoryAddress) public {\n        dev = 0x332D87209f7c8296389C307eAe170c2440830A47;\n        factory = MetadataPooledCDAIFactory(factoryAddress);\n    }\n\n    function migrate(address payable pSAIAddress, uint256 amount) public {\n        // Transfer `amount` pSAI from `msg.sender`\n        PooledCSAI pSAI = PooledCSAI(pSAIAddress);\n        pSAI.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Burn `amount` pSAI for SAI\n        pSAI.burn(address(this), amount);\n\n        // Convert `amount` SAI to DAI\n        sai.safeApprove(address(mcdaiMigration), amount);\n        mcdaiMigration.swapSaiToDai(amount);\n\n        // Create pDAI contract if not already created\n        PooledCDAI pDAI;\n        if (pSAI2pDAI[pSAIAddress] == address(0)) {\n            PooledCDAI.Beneficiary[] memory beneficiaries = new PooledCDAI.Beneficiary[](2);\n            beneficiaries[0] = PooledCDAI.Beneficiary({\n                dest: pSAI.beneficiary(),\n                weight: BENEFICIARY_WEIGHT\n            });\n            beneficiaries[1] = PooledCDAI.Beneficiary({\n                dest: dev,\n                weight: DEV_WEIGHT\n            });\n            pDAI = factory.createPCDAI(pSAI.name(), pSAI.symbol(), beneficiaries, false);\n            if (pSAI.owner() == address(0)) {\n                pDAI.renounceOwnership();\n            } else {\n                pDAI.transferOwnership(pSAI.owner());\n            }\n            pSAI2pDAI[pSAIAddress] = address(pDAI);\n        } else {\n            pDAI = PooledCDAI(pSAI2pDAI[pSAIAddress]);\n        }\n\n        // Mint `amount` pDAI for `msg.sender`\n        dai.safeApprove(address(pDAI), amount);\n        pDAI.mint(msg.sender, amount);\n    }\n\n    function setDev(address newDev) external onlyOwner {\n        dev = newDev;\n    }\n}"
    },
    "contracts/sai2dai/ScdMcdMigration.sol": {
      "content": "pragma solidity 0.5.17;\n\n\ninterface ScdMcdMigration {\n    // Function to swap SAI to DAI\n    // This function is to be used by users that want to get new DAI in exchange of old one (aka SAI)\n    // wad amount has to be <= the value pending to reach the debt ceiling (the minimum between general and ilk one)\n    function swapSaiToDai(uint256 wad) external;\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}