{"Context.sol":{"content":"pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"DualityConsole.sol":{"content":"pragma solidity \u003e=0.5.0;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\n\n/**\n * @title DualityConsole\n * Duality is a simple smart contract that allows two parties to open up a Duality contract\n * together where each party has their own currency, but this currency can only be\n * redeemed back to the party that minted them. This allows one party to mint\n * tokens as a gift to the other party, and the other party may then come back in the\n * future to redeem this currency for goods or services.\n */\ncontract DualityConsole is Ownable {\n    using SafeMath for uint256;\n\n    uint256 DUALITY_COST_WEI = 10**16; // 0.01 ETH\n\n    /// @notice Event to fire when a new duality conract is created\n    event DualityCreated(uint256 indexed dualityId, string name);\n    /// @notice Event to fire when one party mints tokens\n    event Minted(\n        uint256 indexed dualityId,\n        address indexed by,\n        uint256 indexed amount\n    );\n    /// @notice Event to fire when one party burns tokens\n    event Burned(\n        uint256 indexed dualityId,\n        address indexed by,\n        uint256 indexed amount\n    );\n\n    struct Duality {\n        string name; // Name of Duality\n        address aOne; // Address of party one\n        string nOne; // Name of party one\n        uint256 bOne; // Balance of party one\n        address aTwo; // Address of party two\n        string nTwo; // Name of party two\n        uint256 bTwo; // Balance of part two\n    }\n\n    Duality[] public dualities;\n\n    /// @notice Modifier used to ensure the correct payment has been made\n    /// @param _weiCost -The amount in wei that the payment needs to be\n    /// @dev Required that msg.value is greater than or equal to _weiCost. Also,\n    ///  _splitPayment is NOT used when a crest is purchased. The majority\n    ///  of that payment goes to the previous owner obviously.\n    modifier sufficientPayment(uint256 _weiCost) {\n        require(\n            (msg.value \u003e= _weiCost) || isOwner(),\n            \"There is not a sufficient payment to perform this action.\"\n        );\n        _;\n        if (msg.value \u003e _weiCost) msg.sender.transfer(msg.value - _weiCost);\n    }\n\n    function getDualityCount() public returns (uint256) {\n        return dualities.length;\n    }\n\n    /// @param dualityName Name given to the created crest\n    /// @param partyOneName Address that receives the fees for this crest.\n    function createDuality(\n        string calldata dualityName,\n        string calldata partyOneName,\n        string calldata partyTwoName,\n        address partyTwoAddress\n    ) external payable sufficientPayment(DUALITY_COST_WEI) returns (uint256) {\n        // TEST\n        require(\n            msg.sender != partyTwoAddress \u0026\u0026 partyTwoAddress != address(0),\n            \"Party two address cannot be the same as senders or be address zero.\"\n        );\n\n        uint256 tokenId = dualities.push(\n            Duality(\n                dualityName,\n                msg.sender, // One Address\n                partyOneName, // One Name\n                0, // One Balance\n                partyTwoAddress, // Two Address\n                partyTwoName, // Two Name\n                0 // Two Balance\n            )\n        ) - 1; // push() returns the new length of the array\n\n        emit DualityCreated(tokenId, dualityName);\n        return tokenId;\n    }\n\n    function withdrawalFunds() external payable onlyOwner() {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function setPartyName(uint256 dualityId, string calldata name) external {\n        require(dualityId \u003c dualities.length, \"This is an invalid dualityId\");\n        Duality storage duality = dualities[dualityId];\n        if (duality.aOne == msg.sender) {\n            duality.nOne = name;\n            return;\n        }\n        require(\n            duality.aTwo == msg.sender,\n            \"Sender address is not included in this duality.\"\n        );\n        duality.nTwo = name;\n    }\n\n    function mintDualityDollars(uint256 dualityId, uint256 amount) external {\n        require(dualityId \u003c dualities.length, \"This is an invalid dualityId\");\n        Duality storage duality = dualities[dualityId];\n        if (duality.aOne == msg.sender) {\n            // Here we are minting tokens for the other party\n            duality.bTwo = duality.bTwo.add(amount);\n            return;\n        }\n        require(\n            duality.aTwo == msg.sender,\n            \"Sender address is not included in this duality.\"\n        );\n        // Here we are minting tokens for the other party\n        duality.bOne = duality.bOne.add(amount);\n    }\n\n    function burnDualityDollars(uint256 dualityId, uint256 amount) external {\n        require(dualityId \u003c dualities.length, \"This is an invalid dualityId\");\n        Duality storage duality = dualities[dualityId];\n        if (duality.aOne == msg.sender) {\n            require(\n                duality.bOne \u003e= amount,\n                \"Sender does not have anout duality dollars to perform this action.\"\n            );\n            // Here we are burning tokens from the senders own balance\n            duality.bOne -= amount;\n            return;\n        }\n        require(\n            duality.aTwo == msg.sender,\n            \"Sender address is not included in this duality.\"\n        );\n        require(\n            duality.bTwo \u003e= amount,\n            \"Sender does not have anout duality dollars to perform this action.\"\n        );\n        // Here we are burning tokens from the senders own balance\n        duality.bTwo -= amount;\n    }\n}\n"},"Migrations.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.7.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./Context.sol\";\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}"}}