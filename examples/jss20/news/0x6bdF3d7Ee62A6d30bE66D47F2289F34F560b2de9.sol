{"access.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./Context.sol\";\nimport \"./user.sol\";\n\ncontract Access is Context{\n    using Users for Users.User;\n    Users.User private _authorizer;\n    \n    event AuthorizerAdded(address indexed account);\n    event AuthorizerDeleted(address indexed account);\n    \n    constructor () internal {\n        _addAdmin(_msgSender());\n    }\n    \n    modifier isAuthorizer() {\n        require(_authorizer.exists(_msgSender()), \"Access: Caller does not Authorizer\");\n        _;\n    }\n    \n    function addAdmin(address account) external isAuthorizer {\n        _addAdmin(account);\n    }\n    \n    function delAdmin(address account) external isAuthorizer {\n        _delAdmin(account);\n    }\n    \n    function _addAdmin(address account) internal {\n        _authorizer.add(account);\n        emit AuthorizerAdded(account);\n    }\n    \n    function _delAdmin(address account) internal {\n        _authorizer.del(account);\n        emit AuthorizerDeleted(account);\n    }\n}\n\n"},"Context.sol":{"content":"pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"junca.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./access.sol\";\nimport \"./pausable.sol\";\n\n\ncontract Junca is IERC20, Access, Pausable {\n    using SafeMath for uint256;\n    \n    string private _name = \"junca coin\";\n    string private _symbol = \"JCC\";\n    uint8 private _decimals = 18;\n\n    uint256 private _totalSupply;\n    \n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    \n    constructor () public {\n        uint256 amount = 130000000 * (uint256(10) ** decimals());\n        _mint(_msgSender(), amount);\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function transfer(address recipient, uint256 amount) public notPaused returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public notPaused returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"JCC: transfer amount exceeds allows\"));\n        return true;\n    }\n    \n    function approve(address spender, uint256 amount) public notPaused returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 sumValue) public notPaused returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(sumValue));\n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subValue) public notPaused returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subValue, \"JCC: decreased allowance zero value\"));\n        return true;\n    }\n    \n    function mint(address account, uint256 amount) public isAuthorizer returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n    \n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n    \n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"JCC: transfer from zero address\");\n        require(recipient != address(0), \"JCC: transfer to zero address\");\n        \n        _balances[sender] = _balances[sender].sub(amount, \"JCC: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        \n        emit Transfer(sender, recipient, amount);\n    }\n    \n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"JCC: approve from zero address\");\n        require(spender != address(0), \"JCC: approve to zero address\");\n        \n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"JCC: mint to zero address\");\n        \n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        \n        emit Transfer(address(0), account, amount);\n    }\n    \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"JCC: burn from the zero address\");\n        \n        _balances[account] = _balances[account].sub(amount, \"JCC: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        \n        emit Transfer(account, address(0), amount);\n    }\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(_msgSender(), account, amount);\n    }\n    \n}\n"},"pausable.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./pauser.sol\";\n\ncontract Pausable is Pauser {\n    bool private _stats;\n    \n    event Paused(address account);\n    event unPaused(address account);\n    \n    constructor () internal {\n        _stats = false;\n    }\n    \n    function isPause() public view returns (bool) {\n        return _stats;\n    }\n    \n    modifier notPaused() {\n        require(!_stats, \"paused.\");\n        _;\n    }\n    \n    modifier isPaused() {\n        require(_stats, \"not paused.\");\n        _;\n    }\n    \n    function pause() public isPauser notPaused {\n        _stats = true;\n        emit Paused(_msgSender());\n    }\n    \n    function unpause() public isPauser isPaused {\n        _stats = false;\n        emit unPaused(_msgSender());\n    }\n}\n\n"},"pauser.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./Context.sol\";\nimport \"./user.sol\";\n\n\ncontract Pauser is Context {\n    using Users for Users.User;\n    Users.User private _pauser;\n    \n    event PasuserAdded(address indexed account);\n    event PauserDeleted(address indexed account);\n    \n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n    \n    modifier isPauser() {\n        require(_pauser.exists(_msgSender()));\n        _;\n    }\n    \n    function addPauser(address account) public isPauser {\n        _addPauser(account);\n    }\n    \n    function delPauser(address account) public isPauser {\n        _delPauser(account);\n    }\n    \n    function _addPauser(address account) internal {\n        _pauser.add(account);\n        emit PasuserAdded(account);\n    }\n    \n    function _delPauser(address account) internal {\n        _pauser.del(account);\n        emit PauserDeleted(account);\n    }\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"user.sol":{"content":"\nlibrary Users {\n    struct User {\n        mapping (address =\u003e bool) authorizer;\n    }\n    \n    function add(User storage admin, address account) internal {\n        require(!exists(admin, account), \"Admin: account has already\");\n        admin.authorizer[account] = true;\n    }\n    \n    function del(User storage admin, address account) internal {\n        require(exists(admin, account), \"Admin: account does not authorizer\");\n        admin.authorizer[account] = false;\n    }\n    \n    function exists(User storage admin, address account) internal view returns (bool) {\n        require(account != address(0), \"Admin: account is zero.\");\n        return admin.authorizer[account];\n    }\n}"}}