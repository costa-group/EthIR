{"ERC20.sol":{"content":"pragma solidity ^0.5.2;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\n    function approve(address _spender, uint _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}"},"ERC223.sol":{"content":"pragma solidity ^0.5.2;\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes calldata _data) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}"},"ERC223ReceivingContract.sol":{"content":"pragma solidity ^0.5.2;\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n}"},"Nox.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"Token.sol\";\nimport \"ERC20.sol\";\nimport \"ERC223.sol\";\nimport \"ERC223ReceivingContract.sol\";\n\ncontract Nox is Token(\"NOX\", \"Noximilien\", 18, 1000000000), ERC20, ERC223 {\n\n    constructor() public {\n        _balanceOf[msg.sender] = _totalSupply;\n    }\n    \n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _addr) public view returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value \u003e 0 \u0026\u0026 \n            _value \u003c= _balanceOf[msg.sender] \u0026\u0026\n            !isContract(_to)) {\n            _balanceOf[msg.sender] -= _value;\n            _balanceOf[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n        if (_value \u003e 0 \u0026\u0026 \n            _value \u003c= _balanceOf[msg.sender] \u0026\u0026\n            isContract(_to)) {\n            _balanceOf[msg.sender] -= _value;\n            _balanceOf[_to] += _value;\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n                _contract.tokenFallback(msg.sender, _value, _data);\n            emit Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) public view returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize \u003e 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] \u003e 0 \u0026\u0026\n            _value \u003e 0 \u0026\u0026\n            _allowances[_from][msg.sender] \u003e= _value \u0026\u0026\n            _balanceOf[_from] \u003e= _value) {\n            _balanceOf[_from] -= _value;\n            _balanceOf[_to] += _value;\n            _allowances[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}"},"Token.sol":{"content":"pragma solidity ^0.5.2;\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply;\n    mapping (address =\u003e uint) internal _balanceOf;\n    mapping (address =\u003e mapping (address =\u003e uint)) internal _allowances;\n    \n    constructor(string memory symbol, string memory name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply * 10**uint(decimals);\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _addr) public view returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}"}}