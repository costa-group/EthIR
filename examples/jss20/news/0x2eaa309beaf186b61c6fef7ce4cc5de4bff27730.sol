{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"TacosCrowdsale.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./IUniswapV2Router.sol\";\n\ninterface Pauseable {\n    function unpause() external;\n}\n\n/**\n * @title TacosCrowdsale\n * @dev Crowdsale contract for $TACO.\n *      Pre-Sale done in this manner:\n *        1st Round: Early Cooks (2 ETH contribution max during round, CAP 70 ETH)\n *        2nd Round: $KARMA holders (2 ETH contribution max during round, CAP 70 ETH)\n *        3rd Round: Public Sale (2 ETH contribution max during round, CAP 70 ETH)\n *        - Any single address can contribute at most 2 ETH -\n *      1 ETH = 20000 $TACO (during the entire sale)\n *      Hardcap = 210 ETH\n *      Once hardcap is reached:\n *        All liquidity is added to Uniswap and locked automatically, 0% risk of rug pull.\n *\n * @author soulbar@protonmail.com ($TEND)\n * @author @Onchained ($TACO)\n */\ncontract TacosCrowdsale is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    //===============================================//\n    //          Contract Variables                   //\n    //===============================================//\n\n    // Caps\n    uint256 public constant ROUND_1_CAP = 70 ether; // CAP = 70\n    uint256 public constant ROUND_2_CAP = 140 ether; // CAP = 70\n    uint256 public constant ROUND_3_CAP = 210 ether; // CAP = 70\n    // HARDCAP = ROUND_3_CAP\n    \n    // During tests, we should use 12 ether instead given that by default we only have 20 addresses.\n    uint256 public constant CAP_PER_ADDRESS = 2 ether;\n    uint256 public constant MIN_CONTRIBUTION = 0.1 ether;\n\n    // Start time 08/09/2020 @ 6:00am (UTC) // For Cooks\n    uint256 public constant CROWDSALE_START_TIME = 1596952800;\n\n    // Start time 08/10/2020 @ 4:00pm (UTC)\n    uint256 public constant KARMASALE_START_TIME = 1597075200;\n\n    // Start time 08/11/2020 @ 4:00pm (UTC)\n    uint256 public constant PUBLICSALE_START_TIME = 1597161600;\n\n    // End time\n    uint256 public constant CROWDSALE_END_TIME = PUBLICSALE_START_TIME + 1 days;\n\n    // Karma Membership = 200 Karma\n    uint256 public constant KARMA_MEMBERSHIP_AMOUNT = 2000000;\n\n    // Early cooks list for round 1\n    // Too many cooks? https://www.youtube.com/watch?v=QrGrOK8oZG8\n    mapping(address =\u003e bool) public cookslist;\n\n    // Contributions state\n    mapping(address =\u003e uint256) public contributions;\n\n    // Total wei raised (ETH)\n    uint256 public weiRaised;\n\n    // Flag to know if liquidity has been locked\n    bool public liquidityLocked = false;\n\n    // Pointer to the TacoToken\n    IERC20 public tacoToken;\n\n    // Pointer to the KarmaToken\n    IERC20 public karmaToken;\n\n    // How many tacos do we send per ETH contributed.\n    uint256 public tacosPerEth;\n\n    // Pointer to the UniswapRouter\n    IUniswapV2Router02 internal uniswapRouter;\n\n    //===============================================//\n    //                 Constructor                   //\n    //===============================================//\n    constructor(\n        IERC20 _tacoToken,\n        IERC20 _karmaToken,\n        uint256 _tacosPerEth,\n        address _uniswapRouter\n    ) public Ownable() {\n        tacoToken = _tacoToken;\n        karmaToken = _karmaToken;\n        tacosPerEth = _tacosPerEth;\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\n    }\n\n    //===============================================//\n    //                   Events                      //\n    //===============================================//\n    event TokenPurchase(\n        address indexed beneficiary,\n        uint256 weiAmount,\n        uint256 tokenAmount\n    );\n\n    //===============================================//\n    //                   Methods                     //\n    //===============================================//\n\n    // Main entry point for buying into the Pre-Sale. Contract Receives $ETH\n    receive() external payable {\n        // Prevent owner from buying tokens, but allow them to add pre-sale ETH to the contract for Uniswap liquidity\n        if (owner() != msg.sender) {\n            // Validations.\n            require(\n                msg.sender != address(0),\n                \"TacosCrowdsale: beneficiary is the zero address\"\n            );\n            require(isOpen(), \"TacosCrowdsale: sale did not start yet.\");\n            require(!hasEnded(), \"TacosCrowdsale: sale is over.\");\n            require(\n                weiRaised \u003c _totalCapForCurrentRound(),\n                \"TacosCrowdsale: The cap for the current round has been filled.\"\n            );\n            require(\n                _allowedInCurrentRound(msg.sender),\n                \"TacosCrowdsale: Address not allowed for this round.\"\n            );\n            require(\n                contributions[msg.sender] \u003c CAP_PER_ADDRESS,\n                \"TacosCrowdsale: Individual cap has been filled.\"\n            );\n\n            // If we\u0027ve passed most validations, let\u0027s get them $TACOs\n            _buyTokens(msg.sender);\n        }\n    }\n\n    /**\n     * Function to calculate how many `weiAmount` can the sender purchase\n     * based on total available cap for this round, and how many eth they\u0027ve contributed.\n     *\n     * At the end of the function we refund the remaining ETH not used for purchase.\n     */\n    function _buyTokens(address beneficiary) internal {\n        // How much ETH still available for the current Round CAP\n        uint256 weiAllowanceForRound = _totalCapForCurrentRound().sub(weiRaised);\n\n        // In case there is less allowance in this cap than what was sent, cap that.\n        uint256 weiAmountForRound = weiAllowanceForRound \u003c msg.value\n            ? weiAllowanceForRound\n            : msg.value;\n\n        // How many wei is this sender still able to get per their address CAP.\n        uint256 weiAllowanceForAddress = CAP_PER_ADDRESS.sub(\n            contributions[beneficiary]\n        );\n\n        // In case the allowance of this address is less than what was sent, cap that.\n        uint256 weiAmount = weiAllowanceForAddress \u003c weiAmountForRound\n            ? weiAllowanceForAddress\n            : weiAmountForRound;\n\n        // Internal call to run the final validations, and perform the purchase.\n        _buyTokens(beneficiary, weiAmount, weiAllowanceForRound);\n\n        // Refund all unused funds.\n        uint256 refund = msg.value.sub(weiAmount);\n        if (refund \u003e 0) {\n            payable(beneficiary).transfer(refund);\n        }\n    }\n\n    /**\n     * Function that validates the minimum wei amount, then perform the actual transfer of $TACOs\n     */\n    function _buyTokens(address beneficiary, uint256 weiAmount, uint256 weiAllowanceForRound) internal {\n        require(\n            weiAmount \u003e= MIN_CONTRIBUTION || weiAllowanceForRound \u003c MIN_CONTRIBUTION,\n            \"TacosCrowdsale: weiAmount is smaller than min contribution.\"\n        );\n\n        // Update how much wei we have raised\n        weiRaised = weiRaised.add(weiAmount);\n        // Update how much wei has this address contributed\n        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n\n        // Calculate how many $TACOs can be bought with that wei amount\n        uint256 tokenAmount = _getTokenAmount(weiAmount);\n        // Transfer the $TACOs to the beneficiary\n        tacoToken.safeTransfer(beneficiary, tokenAmount);\n\n        // Create an event for this purchase\n        emit TokenPurchase(beneficiary, weiAmount, tokenAmount);\n    }\n\n    // Calculate how many tacos do they get given the amount of wei\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256)\n    {\n        return weiAmount.mul(tacosPerEth);\n    }\n\n    // CONTROL FUNCTIONS\n\n    // Is the sale open now?\n    function isOpen() public view returns (bool) {\n        return now \u003e= CROWDSALE_START_TIME;\n    }\n\n    // Has the sale ended?\n    function hasEnded() public view returns (bool) {\n        return now \u003e= CROWDSALE_END_TIME || weiRaised \u003e= ROUND_3_CAP;\n    }\n\n    // Has the *Karma* sale started?\n    function karmaSaleStarted() public view returns (bool) {\n        return now \u003e= KARMASALE_START_TIME;\n    }\n\n    // Has the *Public* sale started?\n    function publicSaleStarted() public view returns (bool) {\n        return now \u003e= PUBLICSALE_START_TIME;\n    }\n\n    // Is the beneficiary allowed in the current Round?\n    function _allowedInCurrentRound(address beneficiary) internal view returns (bool) {\n        bool isKarmaRoundAndMember = karmaSaleStarted() \u0026\u0026 _isKarmaMember(beneficiary);\n\n        return (cookslist[beneficiary] || isKarmaRoundAndMember || publicSaleStarted());\n    }\n\n    // Checks wether the beneficiary is a Karma member.\n    // Karma membership is defined as owning 200 $KARMA\n    // Thank you KarmaDAO for getting us together.\n    function _isKarmaMember(address beneficiary) internal view returns (bool) {\n        return karmaToken.balanceOf(beneficiary) \u003e= KARMA_MEMBERSHIP_AMOUNT;\n    }\n\n    // What\u0027s the total cap for the current round?\n    function _totalCapForCurrentRound() internal view returns (uint256) {\n        if (publicSaleStarted()) {\n            return ROUND_3_CAP;\n        } else if(karmaSaleStarted()) {\n            return ROUND_2_CAP;\n        } else { // Cooks sale\n            return ROUND_1_CAP;\n        }\n    }\n\n    // Return human-readable currentRound\n    function getCurrentRound() public view returns (string memory) {\n        if (publicSaleStarted()) return \"Public\";\n        if (karmaSaleStarted()) return \"Karma\";\n        return \"Cooks\";\n    }\n\n    // Set the cooks list\n    function setCooksList(address[] calldata accounts) external onlyOwner {\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\n            cookslist[accounts[i]] = true;\n        }\n    }\n\n    /**\n     * Function that once sale is complete add the liquidity to Uniswap\n     * then locks the liquidity by burning the UNI tokens.\n     */\n    function addAndLockLiquidity() external {\n        require(\n            hasEnded(),\n            \"TacosCrowdsale: can only send liquidity once hardcap is reached\"\n        );\n\n        // How many ETH is in this contract\n        uint256 amountEthForUniswap = address(this).balance;\n        // How many $TACOs are owned by this contract\n        uint256 amountTokensForUniswap = tacoToken.balanceOf(address(this));\n\n        // Unpause TacoToken forever. This will kick off the game.\n        Pauseable(address(tacoToken)).unpause();\n\n        // Send the entire balance and all tokens in the contract to Uniswap LP\n        tacoToken.approve(address(uniswapRouter), amountTokensForUniswap);\n        uniswapRouter.addLiquidityETH{value: amountEthForUniswap}(\n            address(tacoToken),\n            amountTokensForUniswap,\n            amountTokensForUniswap,\n            amountEthForUniswap,\n            address(0), // burn address\n            now\n        );\n        liquidityLocked = true;\n    }\n}\n"}}