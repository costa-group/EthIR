{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"DeflationaryERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract DeflationaryERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /////////////////////////////////\n    //  FOR DEFLATIONARY PURPOSES  //\n    /////////////////////////////////\n    // Marked as `internal` instead of `private` to have access to them from super.\n    mapping (address =\u003e uint256) internal _balances;\n    uint256 internal _totalSupply;\n    /////////////////////////////////\n    //      END MODIFICATIONS      //\n    /////////////////////////////////\n\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Ownable.sol\";\n\ncontract Pausable is Ownable {\n    // For allowing tokens to only become transferable at the end of sale\n    address public pauser;\n    bool public paused;\n\n    constructor() public Ownable() {\n      pauser = msg.sender;\n      paused = true;\n    }\n\n    modifier onlyPauser() {\n        require(pauser == _msgSender(), \"Pausable: Only Pauser can call this function.\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused, \"Pausable: Contract is paused\");\n        _;\n    }\n\n    // PAUSER //\n    function setPauser(address newPauser) public onlyOwner {\n        require(\n            newPauser != address(0),\n            \"Pausable: newPauser is the zero address.\"\n        );\n        require(\n            pauser != address(0),\n            \"Pausable: Pauser rights have been burnt. It\u0027s no longer able to set newPauser\"\n        );\n        pauser = newPauser;\n    }\n\n    function _unpause() internal onlyPauser {\n        paused = false;\n        // Upon unpausing, burn the rights of becoming pauser.\n        pauser = address(0);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"SocialProofable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title SocialProofable\n * @dev Used to define the social proof for a specific token.\n *      Based on the proposal by Dan Levine:\n *      https://docs.google.com/document/d/1wbsqYC6ZqZZdaz3li3UAFaXT2Yrc8G8KUDu7F3KrQ6Y/edit\n *\n * @author @Onchained\n */\ninterface SocialProofable {\n  function getTwitter() external view returns(string memory);\n  function getTwitterProof() external view returns(uint256);\n  function getTelegram() external view returns(string memory);\n  function getWebsite() external view returns(string memory);\n  function getGithub() external view returns(string memory);\n  function getGithubProof() external view returns(bytes memory);\n}\n"},"TacoToken.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./DeflationaryERC20.sol\";\nimport \"./Pausable.sol\";\nimport \"./IERC20.sol\";\nimport \"./SocialProofable.sol\";\n\ninterface IUniswapV2Pair {\n    function sync() external;\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\n/**                                 \n *            ╭╯╭╯  ╭╯╭╯  ╭╯╭╯      \n *        ╱▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔╲▔▔▔╲   \n *       ╱      ╭╮   ╭╮      ╲╮╮ ╲  \n *       ▏     ▂▂▂▂▂▂▂▂▂     ▕╮╮ ▕  \n *       ▏     ╲▂▂▂▂▂▂▂╱     ▕╮╮ ▕  \n *       ╲▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂╲▂▂╱  \n *               TACOS              \n *\n *\n * @title TacoToken\n * @dev Contract for $TACO.\n *      Based of the work by Tendies $TEND\n *\n * @author soulbar@protonmail.com ($TEND)\n * @author @Onchained ($TACO)\n */\ncontract TacoToken is DeflationaryERC20, Pausable, SocialProofable {\n    using SafeMath for uint256;\n\n    //===============================================//\n    //          Contract Variables                   //\n    //===============================================//\n\n    // SOCIAL PROOF //\n    string public constant override getTwitter = \"Taconomics101\";\n    string public constant override getTelegram = \"TacoGram\";\n    string public constant override getWebsite = \"taconomics.io\";\n    string public constant override getGithub = \"taconomics\";\n    uint256 public twitterProof;\n    bytes public githubProof;\n\n    // CRUNCH //\n    uint256 public lastCrunchTime;\n    uint256 public totalCrunched;\n\n    // crunchRate is defined as a percentage (e.g. 1 = 1%, 5 = 5%, 27 = 27%)\n    uint256 public crunchRate;\n\n    /**\n     * rewardForTaquero is defined as a percentage (e.g. 1 = 1%, 5 = 5%, 27 = 27%)\n     * this is however a percentage of the crunchRate.\n     */ \n    uint256 public rewardForTaquero;\n\n    /**\n     * Taco Tuesday means the reward is multiplied by a factor defined here.\n     * This percentage is defined as a multiplier with 1 decimal.\n     * (e.g. 15 = 1.5x, 10 = 1x, 2 = 2x)\n     * This is a multiplier applied to the rewardForTaquero percentage\n     * (e.g. if rewardForTaquery = 2%, and multiplier is 20 (2x), then the reward is 4%)\n     */\n    uint256 public tacoTuesdayRewardMultiplier;\n\n    struct TaqueroStats {\n        uint256 timesCrunched;\n        uint256 tacosCrunched;\n    }\n\n    mapping(address =\u003e TaqueroStats) public taquerosCrunchStats;\n    address[] public taqueros;\n\n    // UNISWAP //\n    IERC20 public WETH;\n    IUniswapV2Factory public uniswapFactory;\n    address public uniswapPool;\n\n    //===============================================//\n    //                 Constructor                   //\n    //===============================================//\n    constructor(uint256 initialSupply, address _uniswapFactoryAddress, address _wethToken)\n        public\n        Pausable()\n        DeflationaryERC20(\"Tacos\", \"TACO\")\n    {\n        _mint(msg.sender, initialSupply);\n\n        // Initialize UniswapFactory\n        uniswapFactory = IUniswapV2Factory(_uniswapFactoryAddress);\n        WETH = IERC20(_wethToken);\n\n        // Crunch variables\n        crunchRate = 4; // Initial crunch rate set at 4%\n        rewardForTaquero = 1; // Initial reward percentage set at 1% (1% of 4%)\n        tacoTuesdayRewardMultiplier = 20; // Initial tacoTuesday multiplier set at 2x\n\n    }\n\n    //===============================================//\n    //                   Events                      //\n    //===============================================//\n    event PoolCrunched(\n        address taquero,\n        uint256 crunchedAmount,\n        uint256 newTotalSupply,\n        uint256 newUniswapPoolSupply,\n        uint256 taqueroReward,\n        uint256 timesCrunched,\n        uint256 totalTacosCrunched\n    );\n\n    //===============================================//\n    //                   Methods                     //\n    //===============================================//\n\n    // UNISWAP POOL //\n    function setUniswapPool() external onlyOwner {\n        require(uniswapPool == address(0), \"TacoToken: pool already created\");\n        uniswapPool = uniswapFactory.createPair(address(WETH), address(this));\n    }\n\n    // TOKEN TRANSFER HOOK //\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n        require(\n            !paused || msg.sender == pauser,\n            \"TacoToken: Cannot transfer tokens while game is paused and sender is not the Pauser.\"\n        );\n    }\n\n    // PAUSABLE OVERRIDE //\n    function unpause() external onlyPauser {\n        super._unpause();\n\n        // Start crunching\n        lastCrunchTime = now;\n    }\n\n    // CRUNCH VARIABLES SETTERS //\n    function setCrunchRate(uint256 _crunchRate) external onlyOwner {\n        require(\n            _crunchRate \u003e 0 \u0026\u0026 _crunchRate \u003c= 10,\n            \"TacoToken: crunchRate must be at least 1 and at most 10\"\n        );\n        crunchRate = _crunchRate;\n    }\n\n    function setRewardForTaquero(uint256 _rewardForTaquero) external onlyOwner {\n        require(\n            _rewardForTaquero \u003e 0 \u0026\u0026 _rewardForTaquero \u003c= 10,\n            \"TacoToken: rewardForTaquero must be at least 1 and at most 10\"\n        );\n        rewardForTaquero = _rewardForTaquero;\n    }\n\n    function setTacoTuesdayRewardMultiplier(uint256 _tacoTuesdayRewardMultiplier) external onlyOwner {\n        require(\n            _tacoTuesdayRewardMultiplier \u003e 9 \u0026\u0026 _tacoTuesdayRewardMultiplier \u003c= 30,\n            \"TacoToken: tacoTuesdayRewardMultiplier must be at least 10 and at most 30\"\n        );\n        tacoTuesdayRewardMultiplier = _tacoTuesdayRewardMultiplier;\n    }\n\n    // INFORMATION OF TAQUEROS FOR UI //\n    function getInfoFor(address addr)\n        public\n        view\n        returns (\n            uint256 balance,\n            uint256 poolBalance,\n            uint256 totalSupply,\n            uint256 totalTacosCrunched,\n            uint256 crunchableTacos,\n            uint256 lastCrunchAt,\n            uint256 timesCrunched,\n            uint256 tacosCrunched,\n            bool tacoTuesday,\n            uint256 tacosCrunchRate,\n            uint256 taqueroRewardRate,\n            uint256 tacoTuesdayMultiplier\n        )\n    {\n        TaqueroStats memory taqueroStats = taquerosCrunchStats[addr];\n\n        return (\n            balanceOf(addr),\n            balanceOf(uniswapPool),\n            _totalSupply,\n            totalCrunched,\n            getCrunchAmount(),\n            lastCrunchTime,\n            taqueroStats.timesCrunched,\n            taqueroStats.tacosCrunched,\n            isTacoTuesday(),\n            crunchRate,\n            rewardForTaquero,\n            tacoTuesdayRewardMultiplier\n        );\n    }\n\n    // CRUNCH DAT POOL! //\n    function crunchPool() external whenNotPaused {\n        uint256 toRemoveFromUniswap = getCrunchAmount();\n        require(\n            toRemoveFromUniswap \u003e= 1 * 1e18,\n            \"crunchPool: min crunch amount not reached.\"\n        );\n\n        // Reset last crunch time\n        lastCrunchTime = now;\n\n        uint256 toPayTaquero = toRemoveFromUniswap\n            .mul(rewardForTaquero)\n            .mul(rewardMultiplier())\n            .div(1000);\n\n        uint256 toBurnPermanently = toRemoveFromUniswap.sub(toPayTaquero);\n\n        //=== DEFLATE SUPPLY\n        // Remove tokens from Uniswap Pool.\n        _balances[uniswapPool] = _balances[uniswapPool].sub(toRemoveFromUniswap);\n        // Payout reward to taquero.\n        _balances[msg.sender] = _balances[msg.sender].add(toPayTaquero);\n        // \"Burn\" remaining tokens.\n        _totalSupply = _totalSupply.sub(toBurnPermanently);\n        //=== END DEFLATE\n\n        totalCrunched = totalCrunched.add(toBurnPermanently); // Track all tacos crunched\n\n        //=== UPDATE TAQUERO STATS\n        // Retrieve Taquero Stats\n        TaqueroStats storage taqueroStats = taquerosCrunchStats[msg.sender];\n        // If this is a new taquero, add to the list\n        if (taqueroStats.timesCrunched == 0) {\n            taqueros.push(msg.sender);\n        }\n        // Update the stats\n        taqueroStats.timesCrunched = taqueroStats.timesCrunched.add(1);\n        taqueroStats.tacosCrunched = taqueroStats.tacosCrunched.add(toPayTaquero);\n        // Save stats in the map\n        taquerosCrunchStats[msg.sender] = taqueroStats;\n        //=== END UPDATE STATS\n\n        IUniswapV2Pair(uniswapPool).sync();\n\n        emit PoolCrunched(\n            msg.sender,\n            toRemoveFromUniswap,\n            _totalSupply,\n            balanceOf(uniswapPool),\n            toPayTaquero,\n            taqueroStats.timesCrunched,\n            taqueroStats.tacosCrunched\n        );\n    }\n\n    // Calculates the Amount of tokens available for Crunching given the delta in time since\n    // last Crunch.\n    function getCrunchAmount() public view returns (uint256) {\n        if (paused) return 0;\n\n        uint256 timeBetweenLastCrunch = now - lastCrunchTime;\n        uint256 tokensInUniswapPool = balanceOf(uniswapPool);\n        uint256 dayInSeconds = 1 days;\n        uint256 crunchAmount = (tokensInUniswapPool.mul(crunchRate).mul(timeBetweenLastCrunch))\n                .div(dayInSeconds)\n                .div(100);\n\n        return crunchAmount;\n    }\n\n    // Determines the Reward Multiplier\n    function rewardMultiplier() public view returns (uint256) {\n        // This returns a multiplier with 1 decimal. so 10 means 1.0x\n        if (isTacoTuesday()) {\n            return tacoTuesdayRewardMultiplier;\n        } else {\n            return 10;\n        }\n    }\n\n    // Is it Tuesday Today?\n    // Thank you @nanexcool\n    // https://twitter.com/nanexcool/status/1259623747339849729\n    function isTacoTuesday() public view returns (bool) {\n        uint256 day = (now / 1 days + 3) % 7;\n        return day == 1;\n    }\n\n    // Taquero Stats getter for Leaderboard\n    function countTaqueros() public view returns (uint256) {\n        return taqueros.length;\n    }\n\n    function getTaqueros() public view returns(address[] memory) {\n        return taqueros;\n    }\n\n    function getTaqueroStats(address _address) public view returns (uint256 timesCrunched, uint256 tacosCrunched) {\n        return (taquerosCrunchStats[_address].timesCrunched, taquerosCrunchStats[_address].tacosCrunched);\n    }\n\n    //===============================================//\n    //                Social Proof                   //\n    //===============================================//\n    function setTwitterProof(uint256 _twitterProof) external onlyOwner {\n        twitterProof = _twitterProof;\n    }\n\n    function getTwitterProof() external override view returns(uint256) {\n        return twitterProof;\n    }\n\n    function setGithubProof(bytes calldata _githubProof) external onlyOwner {\n        githubProof = _githubProof;\n    }\n\n    function getGithubProof() external override view returns(bytes memory) {\n        return githubProof;\n    }\n}\n"}}