{"ERC20.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n}"},"TokenContract.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract TokenContract is ERC20, Ownable{\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public ecofees;\r\n  bool public stateEcofees = false;\r\n  uint256 _amountrest;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  address public tokenOwner;\r\n\r\n  mapping(address =\u003e uint256) balances;\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) internal allowed;\r\n  mapping(address =\u003e bool) public vestedlist;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event UnlockToken();\r\n  event Burn();\r\n  event AddedBeneficiary(address indexed _vestedAddress);\r\n\r\n  bool public mintingFinished = false;\r\n  bool public locked = true;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer(){\r\n    require(!locked || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  constructor(string memory _name, string memory  _symbol, uint8 _decimals, uint _initialSupply) public {\r\n    require (_decimals != 0);\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    totalSupply = _initialSupply;\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(address(0), msg.sender, totalSupply);\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function unlockToken() onlyOwner public returns (bool){\r\n    locked = false;\r\n    emit UnlockToken();\r\n    return true;\r\n  }\r\n\r\n  function burn(address _who, uint256 _value) onlyOwner public returns (bool){\r\n    require(_who != address(0));\r\n\r\n    totalSupply = totalSupply.sub(_value);\r\n    balances[_who] = balances[_who].sub(_value);\r\n    emit Burn();\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value \u003c= balances[msg.sender]);\r\n    require (!isVestedlisted(msg.sender));\r\n    require (msg.sender != address(this));\r\n\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    if (stateEcofees){\r\n        _amountrest = calculEcofees(_value);\r\n        _value = _amountrest;\r\n    }\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFromContract(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n      require (_to != address(0));\r\n      require (_value \u003c= balances[address(this)]);\r\n\r\n      balances[address(this)] = balances[this].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(address(this), _to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value \u003c= balances[_from]);\r\n    require(_value \u003c= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    if (stateEcofees){\r\n        _amountrest = calculEcofees(_value);\r\n        _value = _amountrest;\r\n    }\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue \u003e oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n    /**\r\n     * @dev Adds list of addresses to Vestedlist. Not overloaded due to limitations with truffle testing.\r\n     * @param _vestedAddress Addresses to be added to the Vestedlist\r\n     */\r\n    function addToVestedlist(address[] _vestedAddress) public onlyOwner {\r\n      for (uint256 i = 0; i \u003c _vestedAddress.length; i++) {\r\n        vestedlist[_vestedAddress[i]] = true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes single address from Vestedlist.\r\n     * @param _vestedAddress Address to be removed to the Vestedlist\r\n     */\r\n    function removeFromVestedlist(address _vestedAddress) public onlyOwner {\r\n      vestedlist[_vestedAddress] = false;\r\n    }\r\n\r\n    function isVestedlisted(address _vestedAddress) internal view returns (bool) {\r\n      return (vestedlist[_vestedAddress]);\r\n    }\r\n\r\n    function enableEcofees() public onlyOwner returns (bool){\r\n        stateEcofees = true;\r\n        return true;\r\n\r\n    }\r\n\r\n    function calculEcofees (uint256 _amount) internal returns (uint256){\r\n        ecofees = _amount.div(100);\r\n        emit Transfer (msg.sender, address(this), ecofees);\r\n        _amount = _amount.sub(ecofees);\r\n        return _amount;\r\n    }\r\n\r\n\r\n\r\n}"}}