{"ManagerRole.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./Roles.sol\";\n\ncontract ManagerRole {\n\n    event HumanManagerAdded(address indexed account);\n    event HumanManagerRemoved(address indexed account);\n    event ContractManagerAdded(address indexed account);\n\n    address public feeManager;\n    address public settingsManager;\n    address public tBoxManager;\n\n    constructor () internal {\n        settingsManager = msg.sender;\n        feeManager = msg.sender;\n    }\n\n    modifier onlyFeeManager() {\n        require(isFeeManager(msg.sender));\n        _;\n    }\n\n    modifier onlySettingsManager() {\n        require(isSettingsManager(msg.sender));\n        _;\n    }\n\n    modifier onlyManagerContract() {\n        require(isContractManager(msg.sender));\n        _;\n    }\n\n    function isFeeManager(address account) public view returns (bool) {\n        return account == feeManager;\n    }\n\n    function isSettingsManager(address account) public view returns (bool) {\n        return account == settingsManager;\n    }\n\n    function isContractManager(address account) public view returns (bool) {\n        return account == tBoxManager;\n    }\n\n    function setContractManager(address account) public onlySettingsManager {\n        _setContract(account);\n    }\n\n    function changeFeeManager(address account) public onlyFeeManager {\n        require(account != address(0));\n        feeManager = account;\n    }\n\n    function renounceSettingsManager() public onlySettingsManager {\n        settingsManager = address(0);\n    }\n\n\n    function _setContract(address account) internal {\n        tBoxManager = account;\n        emit ContractManagerAdded(account);\n    }\n}\n"},"Roles.sol":{"content":"pragma solidity 0.4.25;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address =\u003e bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account\u0027s access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n"},"TimviSettings.sol":{"content":"pragma solidity 0.4.25;\n\nimport \"./ManagerRole.sol\";\n\n/// @title TimviSettings\ncontract TimviSettings is ManagerRole {\n\n    event MinDepositUpdated(uint256 _value);\n    event SysFeeUpdated(uint256 _value);\n    event UserFeeUpdated(uint256 _value);\n    event TotalFeeUpdated(uint256 _value);\n    event GlobalSafetyBagUpdated(uint256 _value);\n    event GasPriceLimitUpdated(uint256 _value);\n\n    uint256 public minDeposit;\n    uint256 public sysFee;\n    uint256 public userFee;\n\n    uint256 public gasPriceLimit;\n\n    uint256 public globalSafetyBag;\n\n    uint256 public totalFee;\n    address public oracleAddress;\n    address public tmvAddress;\n\n    constructor() public {\n        minDeposit = 50 finney;\n        sysFee = 3000; // 3%\n        userFee = 3000; // 3%\n        globalSafetyBag = 34783; // 34,783%\n        totalFee = 6000; //6%\n        gasPriceLimit = 0.021 szabo; // 21 GWei\n\n        emit MinDepositUpdated(minDeposit);\n        emit SysFeeUpdated(sysFee);\n        emit UserFeeUpdated(userFee);\n        emit TotalFeeUpdated(totalFee);\n        emit GlobalSafetyBagUpdated(globalSafetyBag);\n        emit GasPriceLimitUpdated(gasPriceLimit);\n    }\n\n    function setMinDepo(uint256 _value) external onlyFeeManager {\n        require(_value \u003e 0 \u0026\u0026 _value \u003c 10 ether, \"Value out of range\");\n        minDeposit = _value;\n        emit MinDepositUpdated(minDeposit);\n    }\n\n    function setSysCom(uint256 _value) external onlyFeeManager {\n        require(_value \u003c= totalFee / 2, \"Value out of range\");\n        sysFee = _value;\n        userFee = totalFee - _value;\n        emit SysFeeUpdated(sysFee);\n        emit UserFeeUpdated(userFee);\n    }\n\n    function setFeeTotal(uint256 _totalFee, uint256 _sysFee) external onlyFeeManager {\n        require(_totalFee \u003e 1000 \u0026\u0026 _totalFee \u003c= 6000, \"Value out of range\");\n        require(_sysFee \u003c= _totalFee / 2, \"Value out of range\");\n        totalFee = _totalFee;\n        sysFee = _sysFee;\n        userFee = totalFee - _sysFee;\n        emit TotalFeeUpdated(totalFee);\n        emit SysFeeUpdated(sysFee);\n        emit UserFeeUpdated(userFee);\n    }\n\n    function setOracleAddress(address _addr) external onlyFeeManager {\n        require(_addr != address(0), \"Zero address\");\n        oracleAddress = _addr;\n    }\n\n    function setGasPriceLimit(uint256 _limit) external onlyFeeManager {\n        require(_limit \u003e 0.005 szabo, \"Gas price limit must be greater than 5 GWei\");\n        gasPriceLimit = _limit;\n        emit GasPriceLimitUpdated(gasPriceLimit);\n    }\n\n    function setSafetyBag(uint256 _bag) external onlyFeeManager {\n        require(_bag \u003c= 100000, \"Value out of range\");\n        globalSafetyBag = _bag;\n        emit GlobalSafetyBagUpdated(globalSafetyBag);\n    }\n\n    function setTmvAddress(address _addr) external onlySettingsManager {\n        require(_addr != address(0), \"Zero address\");\n        tmvAddress = _addr;\n    }\n\n    function minStability() public view returns(uint256) {\n        return 100000 + totalFee;\n    }\n\n    function maxStability() public view returns(uint256) {\n        return minStability() * 150 / 23 / 100 + minStability();\n    }\n\n    function ratio() public view returns(uint256) {\n        return minStability() * 50 / 23 / 100 + maxStability();\n    }\n\n    function globalTargetCollateralization() public view returns(uint256) {\n        return ratio() + globalSafetyBag;\n    }\n}\n"}}