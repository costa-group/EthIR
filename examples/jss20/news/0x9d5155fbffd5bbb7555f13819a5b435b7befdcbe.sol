{"Address.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) } //solium-disable-line security/no-inline-assembly\n        return size \u003e 0;\n    }\n\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n}"},"IERC20.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\ninterface IERC20 {\n\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n"},"Ownable.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\ncontract Ownable {\n\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"TristersLightCoin.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\nimport \u0027SafeMath.sol\u0027;\nimport \u0027Ownable.sol\u0027;\nimport \u0027Address.sol\u0027;\nimport \u0027IERC20.sol\u0027;\n\ncontract TristersLightCoin is Ownable, IERC20 {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    string public constant name = \u0027Tristerâ€™s Light Coin\u0027;\n    string public constant symbol = \u0027Trister\u0027;\n    uint256 public constant decimals = 18;\n    uint256 public constant totalSupply = 8000 * 10000 * 10 ** decimals;\n\n    uint256 public constant FounderAllocation = 500 * 10000 * 10 ** decimals;\n    uint256 public constant FounderLockupAmount = 300 * 10000 * 10 ** decimals;\n    uint256 public constant FounderLockupCliff = 180 days;\n    uint256 public constant FounderReleaseInterval = 30 days;\n    uint256 public constant FounderReleaseAmount = 50 * 10000 * 10 ** decimals;\n\n    address public founder = address(0);\n    uint256 public founderLockupStartTime = 0;\n    uint256 public founderReleasedAmount = 0;\n\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed to, uint256 value);\n    event ChangeFounder(address indexed previousFounder, address indexed newFounder);\n    event SetMinter(address indexed minter);\n\n    constructor(address _founder, address _operator) public {\n        require(_founder != address(0), \"TristersLightCoin: founder is the zero address\");\n        require(_operator != address(0), \"TristersLightCoin: operator is the zero address\");\n        founder = _founder;\n        founderLockupStartTime = block.timestamp;\n        _balances[address(this)] = totalSupply;\n        _transfer(address(this), _operator, FounderAllocation.sub(FounderLockupAmount));\n    }\n\n    function release() public {\n        uint256 currentTime = block.timestamp;\n        uint256 cliffTime = founderLockupStartTime.add(FounderLockupCliff);\n        if (currentTime \u003c cliffTime) return;\n        if (founderReleasedAmount \u003e= FounderLockupAmount) return;\n        uint256 month = currentTime.sub(cliffTime).div(FounderReleaseInterval);\n        uint256 releaseAmount = month.mul(FounderReleaseAmount);\n        if (releaseAmount \u003e FounderLockupAmount) releaseAmount = FounderLockupAmount;\n        if (releaseAmount \u003c= founderReleasedAmount) return;\n        uint256 amount = releaseAmount.sub(founderReleasedAmount);\n        founderReleasedAmount = releaseAmount;\n        _transfer(address(this), founder, amount);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function allowance(address from, address to) public view returns (uint256) {\n        return _allowances[from][to];\n    }\n\n    function approve(address to, uint256 amount) public returns (bool) {\n        _approve(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        uint256 remaining = _allowances[from][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\");\n\n        _transfer(from, to, amount);\n        _approve(from, msg.sender, remaining);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[from] = _balances[from].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[to] = _balances[to].add(amount);\n        emit Transfer(from, to, amount);\n    }\n\n    function _approve(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: approve from the zero address\");\n        require(to != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[from][to] = amount;\n        emit Approval(from, to, amount);\n    }\n\n    function changeFounder(address _founder) public onlyOwner {\n        require(_founder != address(0), \"TristersLightCoin: founder is the zero address\");\n\n        emit ChangeFounder(founder, _founder);\n        founder = _founder;\n    }\n\n    function setMinter(address minter) public onlyOwner {\n        require(minter != address(0), \"TristersLightCoin: minter is the zero address\");\n        require(minter.isContract(), \"TristersLightCoin: minter is not contract\");\n        _transfer(address(this), minter, totalSupply.sub(FounderAllocation));\n        emit SetMinter(minter);\n    }\n\n}"}}